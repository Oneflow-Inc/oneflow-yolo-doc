{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"OneFlow \u9488\u5bf9 YOLO \u7cfb\u5217\u76ee\u6807\u68c0\u6d4b\u7cfb\u5217\u7b97\u6cd5\u7684\u6587\u6863\u3002\u5305\u542b\u5982\u4e0b\u5185\u5bb9\uff1a ultralytics \u7248\u672c yolov5 \u4ece PyTorch \u540e\u7aef\u8fc1\u79fb\u5230 OneFlow \u540e\u7aef\u7684\u597d\u5904\u4ee5\u53ca\u8fc1\u79fb\u7684\u6210\u672c\u548c\u7ecf\u9a8c\u3002 ultralytics \u7248\u672c yolov5 \uff08\u5b98\u65b9 yolov5\uff09\u7684 Tutorials \u7684\u4e00\u5bf9\u4e00\u6c49\u5316\u7248\u3002 ultralytics \u7248\u672c yolov5 \uff08\u5b98\u65b9 yolov5\uff09\u7684 \u6e90\u7801\u89e3\u8bfb\uff08\u7ec6\u8282\u7814\u7a76 & \u9010\u884c\u4ee3\u7801\u89e3\u8bfb\uff09\uff0c\u5177\u4f53\u5305\u542b\u5982\u4e0b\u7ae0\u8282\uff1a YOLOv5 \u7f51\u7edc\u7ed3\u6784\u89e3\u6790 \u5982\u4f55\u51c6\u5907yolov5\u6a21\u578b\u8bad\u7ec3\u6570\u636e(\u4ee5coco\u6570\u636e\u96c6\u548c\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e3a\u4f8b) Model Train(\u4ee5coco\u6570\u636e\u96c6\u4e3a\u4f8b) YOLOv5\u7684\u6570\u636e\u7ec4\u7ec7\u4e0e\u5904\u7406\u6e90\u7801\u89e3\u8bfb YOLOv5\u4e2dLoss\u90e8\u5206\u8ba1\u7b97 \u6a21\u578b\u5bfc\u51fa\u548c\u90e8\u7f72\u4ecb\u7ecd \u7f51\u9875\u90e8\u7f72\u548capp\u3002 \u548ctvm\u7684\u4ea4\u4e92\uff0c\u57fa\u4e8etvm\u7684\u90e8\u7f72\u3002 YOLOv5\u4e2d\u7684\u53c2\u6570\u641c\u7d22 torch_utils/ \u6587\u4ef6\u5939\u4e0b\u7684\u5176\u5b83trick\u4ecb\u7ecd\u3002 yolov1-yolov7 \u8bba\u6587\u7ffb\u8bd1\u3002","title":"\u9996\u9875"},{"location":"thesis_interpretation/06_yolo.html","text":"\u8bba\u6587\uff1aYOLOv6: A Single-Stage Object Detection Framework for Industrial Applications \u4ee3\u7801\uff1ahttps://github.com/meituan/YOLOv6 \u5b98\u65b9\u535a\u6587\uff1ahttps://blog.csdn.net/MeituanTech/article/details/125437630","title":"yolov6"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html","text":"\u4e8c YOLOv5 \u7f51\u7edc\u7ed3\u6784\u89e3\u6790 \u524d\u8a00 YOLOv5\u9488\u5bf9\u4e0d\u540c\u5927\u5c0f\uff08n, s, m, l, x\uff09\u7684\u7f51\u7edc\u6574\u4f53\u67b6\u6784\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u4f1a\u5728\u6bcf\u4e2a\u5b50\u6a21\u5757\u4e2d\u91c7\u7528\u4e0d\u540c\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\uff0c \u5206\u522b\u5e94\u5bf9yaml\u6587\u4ef6\u4e2d\u7684depth_multiple\u548cwidth_multiple\u53c2\u6570\u3002 \u8fd8\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5b98\u65b9\u9664\u4e86n, s, m, l, x\u7248\u672c\u5916\u8fd8\u6709n6, s6, m6, l6, x6\uff0c\u533a\u522b\u5728\u4e8e\u540e\u8005\u662f\u9488\u5bf9\u66f4\u5927\u5206\u8fa8\u7387\u7684\u56fe\u7247\u6bd4\u59821280x1280, \u5f53\u7136\u7ed3\u6784\u4e0a\u4e5f\u6709\u4e9b\u5dee\u5f02\uff0c\u524d\u8005\u53ea\u4f1a\u4e0b\u91c7\u6837\u523032\u500d\u4e14\u91c7\u75283\u4e2a\u9884\u6d4b\u7279\u5f81\u5c42 , \u800c\u540e\u8005\u4f1a\u4e0b\u91c7\u683764\u500d\uff0c\u91c7\u75284\u4e2a\u9884\u6d4b\u7279\u5f81\u5c42\u3002 \u672c\u7ae0\u5c06\u4ee5 yolov5s\u4e3a\u4f8b \uff0c\u4ece\u914d\u7f6e\u6587\u4ef6 modeles/ yolov5s.yaml \u5230 models/ yolo.py \u6e90\u7801\u8fdb\u884c\u89e3\u8bfb\u3002 yolov5s.yaml \u6587\u4ef6\u5185\u5bb9: nc : 80 # number of classes \u6570\u636e\u96c6\u4e2d\u7684\u7c7b\u522b\u6570 depth_multiple : 0.33 # model depth multiple \u6a21\u578b\u5c42\u6570\u56e0\u5b50(\u7528\u6765\u8c03\u6574\u7f51\u7edc\u7684\u6df1\u5ea6) width_multiple : 0.50 # layer channel multiple \u6a21\u578b\u901a\u9053\u6570\u56e0\u5b50(\u7528\u6765\u8c03\u6574\u7f51\u7edc\u7684\u5bbd\u5ea6) # \u5982\u4f55\u7406\u89e3\u8fd9\u4e2adepth_multiple\u548cwidth_multiple\u5462?\u5b83\u51b3\u5b9a\u7684\u662f\u6574\u4e2a\u6a21\u578b\u4e2d\u7684\u6df1\u5ea6\uff08\u5c42\u6570\uff09\u548c\u5bbd\u5ea6\uff08\u901a\u9053\u6570\uff09,\u5177\u4f53\u600e\u4e48\u8c03\u6574\u7684\u7ed3\u5408\u540e\u9762\u7684backbone\u4ee3\u7801\u89e3\u91ca\u3002 anchors : # \u8868\u793a\u4f5c\u7528\u4e8e\u5f53\u524d\u7279\u5f81\u56fe\u7684Anchor\u5927\u5c0f\u4e3a xxx # 9\u4e2aanchor\uff0c\u5176\u4e2dP\u8868\u793a\u7279\u5f81\u56fe\u7684\u5c42\u7ea7\uff0cP3/8\u8be5\u5c42\u7279\u5f81\u56fe\u7f29\u653e\u4e3a1/8,\u662f\u7b2c3\u5c42\u7279\u5f81 - [ 10 , 13 , 16 , 30 , 33 , 23 ] # P3/8\uff0c \u8868\u793a[10,13],[16,30], [33,23]3\u4e2aanchor - [ 30 , 61 , 62 , 45 , 59 , 119 ] # P4/16 - [ 116 , 90 , 156 , 198 , 373 , 326 ] # P5/32 # YOLOv5s v6.0 backbone backbone : # [from, number, module, args] [[ -1 , 1 , Conv , [ 64 , 6 , 2 , 2 ]], # 0-P1/2 [ -1 , 1 , Conv , [ 128 , 3 , 2 ]], # 1-P2/4 [ -1 , 3 , C3 , [ 128 ]], [ -1 , 1 , Conv , [ 256 , 3 , 2 ]], # 3-P3/8 [ -1 , 6 , C3 , [ 256 ]], [ -1 , 1 , Conv , [ 512 , 3 , 2 ]], # 5-P4/16 [ -1 , 9 , C3 , [ 512 ]], [ -1 , 1 , Conv , [ 1024 , 3 , 2 ]], # 7-P5/32 [ -1 , 3 , C3 , [ 1024 ]], [ -1 , 1 , SPPF , [ 1024 , 5 ]], # 9 ] # YOLOv5s v6.0 head head : [[ -1 , 1 , Conv , [ 512 , 1 , 1 ]], [ -1 , 1 , nn.Upsample , [ None , 2 , 'nearest' ]], [[ -1 , 6 ], 1 , Concat , [ 1 ]], # cat backbone P4 [ -1 , 3 , C3 , [ 512 , False ]], # 13 [ -1 , 1 , Conv , [ 256 , 1 , 1 ]], [ -1 , 1 , nn.Upsample , [ None , 2 , 'nearest' ]], [[ -1 , 4 ], 1 , Concat , [ 1 ]], # cat backbone P3 [ -1 , 3 , C3 , [ 256 , False ]], # 17 (P3/8-small) [ -1 , 1 , Conv , [ 256 , 3 , 2 ]], [[ -1 , 14 ], 1 , Concat , [ 1 ]], # cat head P4 [ -1 , 3 , C3 , [ 512 , False ]], # 20 (P4/16-medium) [ -1 , 1 , Conv , [ 512 , 3 , 2 ]], [[ -1 , 10 ], 1 , Concat , [ 1 ]], # cat head P5 [ -1 , 3 , C3 , [ 1024 , False ]], # 23 (P5/32-large) [[ 17 , 20 , 23 ], 1 , Detect , [ nc , anchors ]], # Detect(P3, P4, P5) ] anchors \u89e3\u8bfb yolov5 \u521d\u59cb\u5316\u4e86 9 \u4e2a anchors\uff0c\u5206\u522b\u5728\u4e09\u4e2a\u7279\u5f81\u56fe \uff08feature map\uff09\u4e2d\u4f7f\u7528\uff0c\u6bcf\u4e2a feature map \u7684\u6bcf\u4e2a grid cell \u90fd\u6709\u4e09\u4e2a anchor \u8fdb\u884c\u9884\u6d4b\u3002 \u5206\u914d\u89c4\u5219\uff1a \u5c3a\u5ea6\u8d8a\u5927\u7684 feature map \u8d8a\u9760\u524d\uff0c\u76f8\u5bf9\u539f\u56fe\u7684\u4e0b\u91c7\u6837\u7387\u8d8a\u5c0f\uff0c\u611f\u53d7\u91ce\u8d8a\u5c0f\uff0c \u6240\u4ee5\u76f8\u5bf9\u53ef\u4ee5\u9884\u6d4b\u4e00\u4e9b\u5c3a\u5ea6\u6bd4\u8f83\u5c0f\u7684\u7269\u4f53(\u5c0f\u76ee\u6807)\uff0c\u5206\u914d\u5230\u7684 anchors \u8d8a\u5c0f\u3002 \u5c3a\u5ea6\u8d8a\u5c0f\u7684 feature map \u8d8a\u9760\u540e\uff0c\u76f8\u5bf9\u539f\u56fe\u7684\u4e0b\u91c7\u6837\u7387\u8d8a\u5927\uff0c\u611f\u53d7\u91ce\u8d8a\u5927\uff0c \u6240\u4ee5\u53ef\u4ee5\u9884\u6d4b\u4e00\u4e9b\u5c3a\u5ea6\u6bd4\u8f83\u5927\u7684\u7269\u4f53(\u5927\u76ee\u6807)\uff0c\u6240\u4ee5\u5206\u914d\u5230\u7684 anchors \u8d8a\u5927\u3002 \u5373\u5728\u5c0f\u7279\u5f81\u56fe\uff08feature map\uff09\u4e0a\u68c0\u6d4b\u5927\u76ee\u6807\uff0c\u4e2d\u7b49\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u4e0a\u68c0\u6d4b\u4e2d\u7b49\u76ee\u6807\uff0c \u5728\u5927\u7279\u5f81\u56fe\u4e0a\u68c0\u6d4b\u5c0f\u76ee\u6807\u3002 backbone & head\u89e3\u8bfb [from, number, module, args] \u53c2\u6570 \u56db\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u5206\u522b\u662f\uff1a 1. \u7b2c\u4e00\u4e2a\u53c2\u6570 from \uff1a\u4ece\u54ea\u4e00\u5c42\u83b7\u5f97\u8f93\u5165\uff0c-1\u8868\u793a\u4ece\u4e0a\u4e00\u5c42\u83b7\u5f97\uff0c[-1, 6]\u8868\u793a\u4ece\u4e0a\u5c42\u548c\u7b2c6\u5c42\u4e24\u5c42\u83b7\u5f97\u3002 2. \u7b2c\u4e8c\u4e2a\u53c2\u6570 number\uff1a\u8868\u793a\u6709\u51e0\u4e2a\u76f8\u540c\u7684\u6a21\u5757\uff0c\u5982\u679c\u4e3a9\u5219\u8868\u793a\u67099\u4e2a\u76f8\u540c\u7684\u6a21\u5757\u3002 3. \u7b2c\u4e09\u4e2a\u53c2\u6570 module\uff1a\u6a21\u5757\u7684\u540d\u79f0\uff0c\u8fd9\u4e9b\u6a21\u5757\u5199\u5728common.py\u4e2d\u3002 4. \u7b2c\u56db\u4e2a\u53c2\u6570 args\uff1a\u7c7b\u7684\u521d\u59cb\u5316\u53c2\u6570\uff0c\u7528\u4e8e\u89e3\u6790\u4f5c\u4e3a moudle \u7684\u4f20\u5165\u53c2\u6570\u3002 \u4e0b\u9762\u4ee5\u7b2c\u4e00\u4e2a\u6a21\u5757Conv \u4e3a\u4f8b\u4ecb\u7ecd\u4e0bcommon.py\u4e2d\u7684\u6a21\u5757 Conv \u6a21\u5757\u5b9a\u4e49\u5982\u4e0b: class Conv ( nn . Module ): # Standard convolution def __init__ ( self , c1 , c2 , k = 1 , s = 1 , p = None , g = 1 , act = True ): # ch_in, ch_out, kernel, stride, padding, groups \"\"\" @Pargm c1: \u8f93\u5165\u901a\u9053\u6570 @Pargm c2: \u8f93\u51fa\u901a\u9053\u6570 @Pargm k : \u5377\u79ef\u6838\u5927\u5c0f(kernel_size) @Pargm s : \u5377\u79ef\u6b65\u957f (stride) @Pargm p : \u7279\u5f81\u56fe\u586b\u5145\u5bbd\u5ea6 (padding) @Pargm g : \u63a7\u5236\u5206\u7ec4\uff0c\u5fc5\u987b\u6574\u9664\u8f93\u5165\u7684\u901a\u9053\u6570(\u4fdd\u8bc1\u8f93\u5165\u7684\u901a\u9053\u80fd\u88ab\u6b63\u786e\u5206\u7ec4) \"\"\" super () . __init__ () # https://oneflow.readthedocs.io/en/master/generated/oneflow.nn.Conv2d.html?highlight=Conv self . conv = nn . Conv2d ( c1 , c2 , k , s , autopad ( k , p ), groups = g , bias = False ) self . bn = nn . BatchNorm2d ( c2 ) self . act = nn . SiLU () if act is True else ( act if isinstance ( act , nn . Module ) else nn . Identity ()) def forward ( self , x ): return self . act ( self . bn ( self . conv ( x ))) def forward_fuse ( self , x ): return self . act ( self . conv ( x )) \u6bd4\u5982\u4e0a\u9762\u628awidth_multiple\u8bbe\u7f6e\u4e3a\u4e860.5\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a [64, 6, 2, 2] \u5c31\u4f1a\u88ab\u89e3\u6790\u4e3a [3,64*0.5=32,6,2,2]\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a 3 \u4e3a\u8f93\u5165channel(\u56e0\u4e3a\u8f93\u5165)\uff0c32 \u4e3a\u8f93\u51fachannel\u3002 \u5173\u4e8e\u8c03\u6574\u7f51\u7edc\u5927\u5c0f\u7684\u8be6\u89e3\u8bf4\u660e \u5728 yolo.py \u7684256\u884c \u6709\u5bf9yaml \u6587\u4ef6\u7684nc,depth_multiple\u7b49\u53c2\u6570\u8bfb\u53d6\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b: anchors, nc, gd, gw = d['anchors'], d['nc'], d['depth_multiple'], d['width_multiple'] \"width_multiple\"\u53c2\u6570\u7684\u4f5c\u7528\u524d\u9762\u4ecb\u7ecdargs\u53c2\u6570\u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u90a3\u4e48\"depth_multiple\"\u53c8\u662f\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u5728 yolo.py \u7684257\u884c\u6709\u5bf9\u53c2\u6570\u7684\u5177\u4f53\u5b9a\u4e49\uff1a n = n_ = max ( round ( n * gd ), 1 ) if n > 1 else n # depth gain \u6682\u4e14\u5c06\u8fd9\u6bb5\u4ee3\u7801\u5f53\u4f5c\u516c\u5f0f(1) \u5176\u4e2d gd \u5c31\u662fdepth_multiple\u7684\u503c\uff0cn\u7684\u503c\u5c31\u662fbackbone\u4e2d\u5217\u8868\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a \u6839\u636e\u516c\u793a(1) \u5f88\u5bb9\u6613\u770b\u51fa gd \u5f71\u54cd n \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5f71\u54cd\u7f51\u7edc\u7684\u7ed3\u6784\u5927\u5c0f\u3002 \u540e\u9762\u5404\u5c42\u4e4b\u95f4\u7684\u6a21\u5757\u6570\u91cf\u3001\u5377\u79ef\u6838\u5927\u5c0f\u548c\u6570\u91cf\u7b49\u4e5f\u90fd\u4ea7\u751f\u4e86\u53d8\u5316\uff0cYOLOv5l \u4e0e YOLOv5s \u76f8\u6bd4\u8f83\u8d77\u6765\u8bad\u7ec3\u53c2\u6570\u7684\u5927\u5c0f\u6210\u500d\u6570\u589e\u957f\uff0c \u5176\u6a21\u578b\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\u4e5f\u4f1a\u5927\u5f88\u591a\uff0c\u8fd9\u5c31\u4f7f\u5f97 YOLOv5l \u7684 \u7cbe\u5ea6\u503c\u8981\u6bd4 YOLOv5s \u597d\u5f88\u591a\uff0c\u56e0\u6b64\u5728\u6700\u7ec8\u63a8\u7406\u65f6\u7684\u68c0\u6d4b\u7cbe\u5ea6\u9ad8\uff0c\u4f46\u662f\u6a21\u578b\u7684\u63a8\u7406\u901f\u5ea6\u66f4\u6162\u3002 \u6240\u4ee5 YOLOv5 \u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u5982\u679c\u60f3\u8981\u8ffd\u6c42\u63a8\u7406\u901f\u5ea6\u53ef\u9009\u7528\u8f83\u5c0f\u4e00\u4e9b\u7684\u6a21\u578b\u5982 YOLOv5s\u3001YOLOv5m\uff0c\u5982\u679c\u60f3\u8981\u8ffd\u6c42\u7cbe\u5ea6\u66f4\u9ad8\u5bf9\u63a8\u7406\u901f\u5ea6\u8981\u6c42\u4e0d\u9ad8\u7684\u53ef\u4ee5\u9009\u62e9\u5176\u4ed6\u4e24\u4e2a\u7a0d\u5927\u7684\u6a21\u578b\u3002 \u5982\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a \u56fe2.1 :yolov5 \u6a21\u578b\u6bd4\u8f83\u56fe \u6765\u6e90:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data Conv\u6a21\u5757\u89e3\u8bfb \u7f51\u7edc\u7ed3\u6784\u9884\u89c8 \u4e0b\u9762\u662f\u6839\u636e yolov5s.yaml \u7ed8\u5236\u7684\u7f51\u7edc\u6574\u4f53\u7ed3\u6784\u7b80\u5316\u7248\u3002 \u56fe2.2 :yolov5s \u7f51\u7edc\u6574\u4f53\u7ed3\u6784 \u8be6\u7ec6\u7684\u7f51\u7edc\u7ed3\u6784\u56fe\uff1ahttps://oneflow-static.oss-cn-beijing.aliyuncs.com/one-yolo/imgs/yolov5s.onnx.png \u901a\u8fc7export.py\u5bfc\u51fa\u7684onnx\u683c\u5f0f\uff0c\u5e76\u901a\u8fc7 https://netron.app/ \u7f51\u7ad9\u5bfc\u51fa\u7684\u56fe\u7247(\u6a21\u578b\u5bfc\u51fa \u5c06\u5728\u7b2c\u516b\u7ae0\u4ecb\u7ecd)\u3002 \u6a21\u5757\u7ec4\u4ef6\u53f3\u8fb9\u53c2\u6570 \u8868\u793a\u7279\u5f81\u56fe\u7684\u7684\u5f62\u72b6\uff0c\u6bd4\u5982 \u5728 \u7b2c \u4e00 \u5c42( Conv )\u8f93\u5165 \u56fe\u7247\u5f62\u72b6\u4e3a [ 3, 640, 640] ,\u5173\u4e8e\u8fd9\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u56fa\u5b9a\u4e00\u5f20\u56fe\u7247\u8f93\u5165\u5230\u7f51\u7edc\u5e76\u901a\u8fc7 yolov5s.yaml \u7684\u6a21\u578b\u53c2\u6570\u8ba1\u7b97\u5f97\u5230\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5de5\u7a0b models/ yolo.py \u901a\u8fc7\u4ee3\u7801\u8fdb\u884cprint\u67e5\u770b,\u8be6\u7ec6\u6570\u636e\u53ef\u4ee5\u53c2\u8003\u9644\u4ef6\u88682.1\u3002 yolo.py \u89e3\u8bfb \u6587\u4ef6\u5730\u5740 \u6587\u4ef6\u4e3b\u8981\u5305\u542b \u4e09\u5927\u90e8\u5206 Detect\u7c7b\uff0c Model\u7c7b\uff0c\u548c parse_model \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7 python models/ yolo.py --cfg yolov5s.yaml \u8fd0\u884c\u8be5\u811a\u672c\u8fdb\u884c\u89c2\u5bdf parse_model\u51fd\u6570\u89e3\u8bfb def parse_model ( d , ch ): # model_dict, input_channels(3) \"\"\"\u7528\u5728\u4e0b\u9762Model\u6a21\u5757\u4e2d \u89e3\u6790\u6a21\u578b\u6587\u4ef6(\u5b57\u5178\u5f62\u5f0f)\uff0c\u5e76\u642d\u5efa\u7f51\u7edc\u7ed3\u6784 \u8fd9\u4e2a\u51fd\u6570\u5176\u5b9e\u4e3b\u8981\u505a\u7684\u5c31\u662f: \u66f4\u65b0\u5f53\u524d\u5c42\u7684args\uff08\u53c2\u6570\uff09,\u8ba1\u7b97c2\uff08\u5f53\u524d\u5c42\u7684\u8f93\u51fachannel\uff09 => \u4f7f\u7528\u5f53\u524d\u5c42\u7684\u53c2\u6570\u642d\u5efa\u5f53\u524d\u5c42 => \u751f\u6210 layers + save @Params d: model_dict \u6a21\u578b\u6587\u4ef6 \u5b57\u5178\u5f62\u5f0f {dict:7} [yolov5s.yaml](https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml)\u4e2d\u76846\u4e2a\u5143\u7d20 + ch #Params ch: \u8bb0\u5f55\u6a21\u578b\u6bcf\u4e00\u5c42\u7684\u8f93\u51fachannel \u521d\u59cbch=[3] \u540e\u9762\u4f1a\u5220\u9664 @return nn.Sequential(*layers): \u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u7684\u5c42\u7ed3\u6784 @return sorted(save): \u628a\u6240\u6709\u5c42\u7ed3\u6784\u4e2dfrom\u4e0d\u662f-1\u7684\u503c\u8bb0\u4e0b \u5e76\u6392\u5e8f [4, 6, 10, 14, 17, 20, 23] \"\"\" LOGGER . info ( f \" \\n { '' : >3 }{ 'from' : >18 }{ 'n' : >3 }{ 'params' : >10 } { 'module' : <40 }{ 'arguments' : <30 } \" ) # \u8bfb\u53d6d\u5b57\u5178\u4e2d\u7684anchors\u548cparameters(nc\u3001depth_multiple\u3001width_multiple) anchors , nc , gd , gw = d [ 'anchors' ], d [ 'nc' ], d [ 'depth_multiple' ], d [ 'width_multiple' ] # na: number of anchors \u6bcf\u4e00\u4e2apredict head\u4e0a\u7684anchor\u6570 = 3 na = ( len ( anchors [ 0 ]) // 2 ) if isinstance ( anchors , list ) else anchors # number of anchors no = na * ( nc + 5 ) # number of outputs = anchors * (classes + 5) \u6bcf\u4e00\u4e2apredict head\u5c42\u7684\u8f93\u51fachannel # \u5f00\u59cb\u642d\u5efa\u7f51\u7edc # layers: \u4fdd\u5b58\u6bcf\u4e00\u5c42\u7684\u5c42\u7ed3\u6784 # save: \u8bb0\u5f55\u4e0b\u6240\u6709\u5c42\u7ed3\u6784\u4e2dfrom\u4e2d\u4e0d\u662f-1\u7684\u5c42\u7ed3\u6784\u5e8f\u53f7 # c2: \u4fdd\u5b58\u5f53\u524d\u5c42\u7684\u8f93\u51fachannel layers , save , c2 = [], [], ch [ - 1 ] # layers, savelist, ch out # enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002 for i , ( f , n , m , args ) in enumerate ( d [ 'backbone' ] + d [ 'head' ]): # from, number, module, args m = eval ( m ) if isinstance ( m , str ) else m # eval strings for j , a in enumerate ( args ): # args\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e00\u6b65\u628a\u5217\u8868\u4e2d\u7684\u5185\u5bb9\u53d6\u51fa\u6765 with contextlib . suppress ( NameError ): args [ j ] = eval ( a ) if isinstance ( a , str ) else a # eval strings # \u5c06\u6df1\u5ea6\u4e0e\u6df1\u5ea6\u56e0\u5b50\u76f8\u4e58\uff0c\u8ba1\u7b97\u5c42\u6df1\u5ea6\u3002\u6df1\u5ea6\u6700\u5c0f\u4e3a1. n = n_ = max ( round ( n * gd ), 1 ) if n > 1 else n # depth gain # \u5982\u679c\u5f53\u524d\u7684\u6a21\u5757m\u5728\u672c\u9879\u76ee\u5b9a\u4e49\u7684\u6a21\u5757\u7c7b\u578b\u4e2d\uff0c\u5c31\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u6a21\u5757 if m in ( Conv , GhostConv , Bottleneck , GhostBottleneck , SPP , SPPF , DWConv , MixConv2d , Focus , CrossConv , BottleneckCSP , C3 , C3TR , C3SPP , C3Ghost , nn . ConvTranspose2d , DWConvTranspose2d , C3x ): # c1: \u8f93\u5165\u901a\u9053\u6570 c2\uff1a\u8f93\u51fa\u901a\u9053\u6570 c1 , c2 = ch [ f ], args [ 0 ] # \u8be5\u5c42\u4e0d\u662f\u6700\u540e\u4e00\u5c42\uff0c\u5219\u5c06\u901a\u9053\u6570\u4e58\u4ee5\u5bbd\u5ea6\u56e0\u5b50 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bbd\u5ea6\u56e0\u5b50\u4f5c\u7528\u4e8e\u9664\u4e86\u6700\u540e\u4e00\u5c42\u4e4b\u5916\u7684\u6240\u6709\u5c42 if c2 != no : # if not output # make_divisible\u7684\u4f5c\u7528\uff0c\u4f7f\u5f97\u539f\u59cb\u7684\u901a\u9053\u6570\u4e58\u4ee5\u5bbd\u5ea6\u56e0\u5b50\u4e4b\u540e\u53d6\u6574\u52308\u7684\u500d\u6570\uff0c\u8fd9\u6837\u5904\u7406\u4e00\u822c\u662f\u8ba9\u6a21\u578b\u7684\u5e76\u884c\u6027\u548c\u63a8\u7406\u6027\u80fd\u66f4\u597d\u3002 c2 = make_divisible ( c2 * gw , 8 ) # \u5c06\u524d\u9762\u7684\u8fd0\u7b97\u7ed3\u679c\u4fdd\u5b58\u5728args\u4e2d\uff0c\u5b83\u4e5f\u5c31\u662f\u8fd9\u4e2a\u6a21\u5757\u6700\u7ec8\u7684\u8f93\u5165\u53c2\u6570\u3002 args = [ c1 , c2 , * args [ 1 :]] # \u6839\u636e\u6bcf\u5c42\u7f51\u7edc\u53c2\u6570\u7684\u4e0d\u540c\uff0c\u5206\u522b\u5904\u7406\u53c2\u6570 \u5177\u4f53\u5404\u4e2a\u7c7b\u7684\u53c2\u6570\u662f\u4ec0\u4e48\u8bf7\u53c2\u8003\u5b83\u4eec\u7684__init__\u65b9\u6cd5\u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u89e3\u91ca\u4e86 if m in [ BottleneckCSP , C3 , C3TR , C3Ghost , C3x ]: # \u8fd9\u91cc\u7684\u610f\u601d\u5c31\u662f\u91cd\u590dn\u6b21\uff0c\u6bd4\u5982conv\u8fd9\u4e2a\u6a21\u5757\u91cd\u590dn\u6b21\uff0c\u8fd9\u4e2an \u662f\u4e0a\u9762\u7b97\u51fa\u6765\u7684 depth args . insert ( 2 , n ) # number of repeats n = 1 elif m is nn . BatchNorm2d : args = [ ch [ f ]] elif m is Concat : c2 = sum ( ch [ x ] for x in f ) elif m is Detect : args . append ([ ch [ x ] for x in f ]) if isinstance ( args [ 1 ], int ): # number of anchors args [ 1 ] = [ list ( range ( args [ 1 ] * 2 ))] * len ( f ) elif m is Contract : c2 = ch [ f ] * args [ 0 ] ** 2 elif m is Expand : c2 = ch [ f ] // args [ 0 ] ** 2 else : c2 = ch [ f ] # \u6784\u5efa\u6574\u4e2a\u7f51\u7edc\u6a21\u5757 \u8fd9\u91cc\u5c31\u662f\u6839\u636e\u6a21\u5757\u7684\u91cd\u590d\u6b21\u6570n\u4ee5\u53ca\u6a21\u5757\u672c\u8eab\u548c\u5b83\u7684\u53c2\u6570\u6765\u6784\u5efa\u8fd9\u4e2a\u6a21\u5757\u548c\u53c2\u6570\u5bf9\u5e94\u7684Module m_ = nn . Sequential ( * ( m ( * args ) for _ in range ( n ))) if n > 1 else m ( * args ) # module # \u83b7\u53d6\u6a21\u5757(module type)\u5177\u4f53\u540d\u4f8b\u5982 models.common.Conv , models.common.C3 , models.common.SPPF \u7b49\u3002 t = str ( m )[ 8 : - 2 ] . replace ( '__main__.' , '' ) # replace\u51fd\u6570\u4f5c\u7528\u662f\u5b57\u7b26\u4e32\"__main__\"\u66ff\u6362\u4e3a''\uff0c\u5728\u5f53\u524d\u9879\u76ee\u6ca1\u6709\u7528\u5230\u8fd9\u4e2a\u66ff\u6362\u3002 np = sum ( x . numel () for x in m_ . parameters ()) # number params m_ . i , m_ . f , m_ . type , m_ . np = i , f , t , np # attach index, 'from' index, type, number params LOGGER . info ( f ' { i : >3 }{ str ( f ) : >18 }{ n_ : >3 }{ np : 10.0f } { t : <40 }{ str ( args ) : <30 } ' ) # print \"\"\" \u5982\u679cx\u4e0d\u662f-1\uff0c\u5219\u5c06\u5176\u4fdd\u5b58\u5728save\u5217\u8868\u4e2d\uff0c\u8868\u793a\u8be5\u5c42\u9700\u8981\u4fdd\u5b58\u7279\u5f81\u56fe\u3002 \u8fd9\u91cc x % i \u4e0e x \u7b49\u4ef7\u4f8b\u5982\u5728\u6700\u540e\u4e00\u5c42 : f = [17,20,23] , i = 24 y = [ x % i for x in ([f] if isinstance(f, int) else f) if x != -1 ] print(y) # [17, 20, 23] # \u5199\u6210x % i \u53ef\u80fd\u56e0\u4e3a\uff1ai - 1 = -1 % i (\u6bd4\u5982 f = [-1]\uff0c\u5219 [x % i for x in f] \u4ee3\u8868 [11] ) \"\"\" save . extend ( x % i for x in ([ f ] if isinstance ( f , int ) else f ) if x != - 1 ) # append to savelist layers . append ( m_ ) if i == 0 : # \u5982\u679c\u662f\u521d\u6b21\u8fed\u4ee3\uff0c\u5219\u65b0\u521b\u5efa\u4e00\u4e2ach\uff08\u56e0\u4e3a\u5f62\u53c2ch\u5728\u521b\u5efa\u7b2c\u4e00\u4e2a\u7f51\u7edc\u6a21\u5757\u65f6\u9700\u8981\u7528\u5230\uff0c\u6240\u4ee5\u521b\u5efa\u7f51\u7edc\u6a21\u5757\u4e4b\u540e\u518d\u521d\u59cb\u5316ch\uff09 ch = [] ch . append ( c2 ) # \u5c06\u6240\u6709\u7684\u5c42\u5c01\u88c5\u4e3ann.Sequential , \u5bf9\u4fdd\u5b58\u7684\u7279\u5f81\u56fe\u6392\u5e8f return nn . Sequential ( * layers ), sorted ( save ) Model \u7c7b\u89e3\u8bfb class Model ( nn . Module ): # YOLOv5 model def __init__ ( self , cfg = '[yolov5s.yaml](https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml)' , ch = 3 , nc = None , anchors = None ): # model, input channels, number of classes super () . __init__ () # \u5982\u679ccfg\u5df2\u7ecf\u662f\u5b57\u5178\uff0c\u5219\u76f4\u63a5\u8d4b\u503c\uff0c\u5426\u5219\u5148\u52a0\u8f7dcfg\u8def\u5f84\u7684\u6587\u4ef6\u4e3a\u5b57\u5178\u5e76\u8d4b\u503c\u7ed9self.yaml\u3002 if isinstance ( cfg , dict ): self . yaml = cfg # model dict else : # is *.yaml \u52a0\u8f7dyaml\u6a21\u5757 import yaml # for flow hub self . yaml_file = Path ( cfg ) . name with open ( cfg , encoding = 'ascii' , errors = 'ignore' ) as f : self . yaml = yaml . safe_load ( f ) # model dict \u4eceyaml\u6587\u4ef6\u4e2d\u52a0\u8f7d\u51fa\u5b57\u5178 # Define model # ch: \u8f93\u5165\u901a\u9053\u6570\u3002 \u5047\u5982self.yaml\u6709\u952e\u2018ch\u2019\uff0c\u5219\u5c06\u8be5\u952e\u5bf9\u5e94\u7684\u503c\u8d4b\u7ed9\u5185\u90e8\u53d8\u91cfch\u3002\u5047\u5982\u6ca1\u6709\u2018ch\u2019\uff0c\u5219\u5c06\u5f62\u53c2ch\u8d4b\u7ed9\u5185\u90e8\u53d8\u91cfch ch = self . yaml [ 'ch' ] = self . yaml . get ( 'ch' , ch ) # input channels # \u5047\u5982yaml\u4e2d\u7684nc\u548c\u65b9\u6cd5\u5f62\u53c2\u4e2d\u7684nc\u4e0d\u4e00\u81f4\uff0c\u5219\u8986\u76d6yaml\u4e2d\u7684nc\u3002 if nc and nc != self . yaml [ 'nc' ]: LOGGER . info ( f \"Overriding model.yaml nc= { self . yaml [ 'nc' ] } with nc= { nc } \" ) self . yaml [ 'nc' ] = nc # override yaml value if anchors : # anchors \u5148\u9a8c\u6846\u7684\u914d\u7f6e LOGGER . info ( f 'Overriding model.yaml anchors with anchors= { anchors } ' ) self . yaml [ 'anchors' ] = round ( anchors ) # override yaml value # \u5f97\u5230\u6a21\u578b\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u4fdd\u5b58\u7684\u7279\u5f81\u56fe\u5217\u8868\u3002 self . model , self . save = parse_model ( deepcopy ( self . yaml ), ch = [ ch ]) # model, savelist self . names = [ str ( i ) for i in range ( self . yaml [ 'nc' ])] # default names \u521d\u59cb\u5316\u7c7b\u540d\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a[0,1,2...] # self.inplace=True \u9ed8\u8ba4True \u8282\u7701\u5185\u5b58 self . inplace = self . yaml . get ( 'inplace' , True ) # Build strides, anchors \u786e\u5b9a\u6b65\u957f\u3001\u6b65\u957f\u5bf9\u5e94\u7684\u951a\u6846 m = self . model [ - 1 ] # Detect() if isinstance ( m , Detect ): # \u68c0\u9a8c\u6a21\u578b\u7684\u6700\u540e\u4e00\u5c42\u662fDetect\u6a21\u5757 s = 256 # 2x min stride m . inplace = self . inplace # \u8ba1\u7b97\u4e09\u4e2afeature map\u4e0b\u91c7\u6837\u7684\u500d\u7387 [8, 16, 32] m . stride = flow . tensor ([ s / x . shape [ - 2 ] for x in self . forward ( flow . zeros ( 1 , ch , s , s ))]) # forward # \u68c0\u67e5anchor\u987a\u5e8f\u4e0estride\u987a\u5e8f\u662f\u5426\u4e00\u81f4 anchor\u7684\u987a\u5e8f\u5e94\u8be5\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u91cc\u6392\u4e00\u4e0b\u5e8f check_anchor_order ( m ) # must be in pixel-space (not grid-space) # \u5bf9\u5e94\u7684anchor\u8fdb\u884c\u7f29\u653e\u64cd\u4f5c\uff0c\u539f\u56e0\uff1a\u5f97\u5230anchor\u5728\u5b9e\u9645\u7684\u7279\u5f81\u56fe\u4e2d\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u52a0\u8f7d\u7684\u539f\u59cbanchor\u5927\u5c0f\u662f\u76f8\u5bf9\u4e8e\u539f\u56fe\u7684\u50cf\u7d20\uff0c\u4f46\u662f\u7ecf\u8fc7\u5377\u79ef\u6c60\u5316\u4e4b\u540e\uff0c\u7279\u5f81\u56fe\u7684\u957f\u5bbd\u53d8\u5c0f\u4e86\u3002 m . anchors /= m . stride . view ( - 1 , 1 , 1 ) self . stride = m . stride self . _initialize_biases () # only run once \u521d\u59cb\u5316\u504f\u7f6e # Init weights, biases # \u8c03\u7528oneflow_utils.py\u4e0binitialize_weights\u521d\u59cb\u5316\u6a21\u578b\u6743\u91cd initialize_weights ( self ) self . info () # \u6253\u5370\u6a21\u578b\u4fe1\u606f LOGGER . info ( '' ) # \u7ba1\u7406\u524d\u5411\u4f20\u64ad\u51fd\u6570 def forward ( self , x , augment = False , profile = False , visualize = False ): if augment : # \u662f\u5426\u5728\u6d4b\u8bd5\u65f6\u4e5f\u4f7f\u7528\u6570\u636e\u589e\u5f3a Test Time Augmentation(TTA) return self . _forward_augment ( x ) # augmented inference, None return self . _forward_once ( x , profile , visualize ) # single-scale inference, train # \u5e26\u6570\u636e\u589e\u5f3a\u7684\u524d\u5411\u4f20\u64ad def _forward_augment ( self , x ): img_size = x . shape [ - 2 :] # height, width s = [ 1 , 0.83 , 0.67 ] # scales f = [ None , 3 , None ] # flips (2-ud, 3-lr) y = [] # outputs for si , fi in zip ( s , f ): xi = scale_img ( x . flip ( fi ) if fi else x , si , gs = int ( self . stride . max ())) yi = self . _forward_once ( xi )[ 0 ] # forward # cv2.imwrite(f'img_{si}.jpg', 255 * xi[0].cpu().numpy().transpose((1, 2, 0))[:, :, ::-1]) # save yi = self . _descale_pred ( yi , fi , si , img_size ) y . append ( yi ) y = self . _clip_augmented ( y ) # clip augmented tails return flow . cat ( y , 1 ), None # augmented inference, train # \u524d\u5411\u4f20\u64ad\u5177\u4f53\u5b9e\u73b0 def _forward_once ( self , x , profile = False , visualize = False ): \"\"\" @params x: \u8f93\u5165\u56fe\u50cf @params profile: True \u53ef\u4ee5\u505a\u4e00\u4e9b\u6027\u80fd\u8bc4\u4f30 @params feature_vis: True \u53ef\u4ee5\u505a\u4e00\u4e9b\u7279\u5f81\u53ef\u89c6\u5316 \"\"\" # y: \u5b58\u653e\u7740self.save=True\u7684\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\uff0c\u56e0\u4e3a\u540e\u9762\u7684\u7279\u5f81\u878d\u5408\u64cd\u4f5c\u8981\u7528\u5230\u8fd9\u4e9b\u7279\u5f81\u56fe y , dt = [], [] # outputs # \u524d\u5411\u63a8\u7406\u6bcf\u4e00\u5c42\u7ed3\u6784 m.i=index m.f=from m.type=\u7c7b\u540d m.np=number of params for m in self . model : # if not from previous layer m.f=\u5f53\u524d\u5c42\u7684\u8f93\u5165\u6765\u81ea\u54ea\u4e00\u5c42\u7684\u8f93\u51fa s\u7684m.f\u90fd\u662f-1 if m . f != - 1 : # if not from previous layer x = y [ m . f ] if isinstance ( m . f , int ) else [ x if j == - 1 else y [ j ] for j in m . f ] # from earlier layers if profile : self . _profile_one_layer ( m , x , dt ) x = m ( x ) # run y . append ( x if m . i in self . save else None ) # save output if visualize : feature_visualization ( x , m . type , m . i , save_dir = visualize ) return x # \u5c06\u63a8\u7406\u7ed3\u679c\u6062\u590d\u5230\u539f\u56fe\u56fe\u7247\u5c3a\u5bf8(\u9006\u64cd\u4f5c) def _descale_pred ( self , p , flips , scale , img_size ): # de-scale predictions following augmented inference (inverse operation) \"\"\"\u7528\u5728\u4e0a\u9762\u7684__init__\u51fd\u6570\u4e0a \u5c06\u63a8\u7406\u7ed3\u679c\u6062\u590d\u5230\u539f\u56fe\u56fe\u7247\u5c3a\u5bf8 Test Time Augmentation(TTA)\u4e2d\u7528\u5230 de-scale predictions following augmented inference (inverse operation) @params p: \u63a8\u7406\u7ed3\u679c @params flips: @params scale: @params img_size: \"\"\" if self . inplace : p [ ... , : 4 ] /= scale # de-scale if flips == 2 : p [ ... , 1 ] = img_size [ 0 ] - p [ ... , 1 ] # de-flip ud elif flips == 3 : p [ ... , 0 ] = img_size [ 1 ] - p [ ... , 0 ] # de-flip lr else : x , y , wh = p [ ... , 0 : 1 ] / scale , p [ ... , 1 : 2 ] / scale , p [ ... , 2 : 4 ] / scale # de-scale if flips == 2 : y = img_size [ 0 ] - y # de-flip ud elif flips == 3 : x = img_size [ 1 ] - x # de-flip lr p = flow . cat (( x , y , wh , p [ ... , 4 :]), - 1 ) return p # \u8fd9\u4e2a\u662fTTA\u7684\u65f6\u5019\u5bf9\u539f\u56fe\u7247\u8fdb\u884c\u88c1\u526a\uff0c\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff0c\u7528\u5728TTA\u6d4b\u8bd5\u7684\u65f6\u5019\u3002 def _clip_augmented ( self , y ): # Clip YOLOv5 augmented inference tails nl = self . model [ - 1 ] . nl # number of detection layers (P3-P5) g = sum ( 4 ** x for x in range ( nl )) # grid points e = 1 # exclude layer count i = ( y [ 0 ] . shape [ 1 ] // g ) * sum ( 4 ** x for x in range ( e )) # indices y [ 0 ] = y [ 0 ][:, : - i ] # large i = ( y [ - 1 ] . shape [ 1 ] // g ) * sum ( 4 ** ( nl - 1 - x ) for x in range ( e )) # indices y [ - 1 ] = y [ - 1 ][:, i :] # small return y # \u6253\u5370\u65e5\u5fd7\u4fe1\u606f \u524d\u5411\u63a8\u7406\u65f6\u95f4 def _profile_one_layer ( self , m , x , dt ): c = isinstance ( m , Detect ) # is final layer, copy input as inplace fix o = thop . profile ( m , inputs = ( x . copy () if c else x ,), verbose = False )[ 0 ] / 1E9 * 2 if thop else 0 # FLOPs t = time_sync () for _ in range ( 10 ): m ( x . copy () if c else x ) dt . append (( time_sync () - t ) * 100 ) if m == self . model [ 0 ]: LOGGER . info ( f \" { 'time (ms)' : >10s } { 'GFLOPs' : >10s } { 'params' : >10s } module\" ) LOGGER . info ( f ' { dt [ - 1 ] : 10.2f } { o : 10.2f } { m . np : 10.0f } { m . type } ' ) if c : LOGGER . info ( f \" { sum ( dt ) : 10.2f } { '-' : >10s } { '-' : >10s } Total\" ) # initialize biases into Detect(), cf is class frequency def _initialize_biases ( self , cf = None ): # https://arxiv.org/abs/1708.02002 section 3.3 # cf = flow.bincount(flow.tensor(np.concatenate(dataset.labels, 0)[:, 0]).long(), minlength=nc) + 1. m = self . model [ - 1 ] # Detect() module for mi , s in zip ( m . m , m . stride ): # from b = mi . bias . view ( m . na , - 1 ) . detach () # conv.bias(255) to (3,85) b [:, 4 ] += math . log ( 8 / ( 640 / s ) ** 2 ) # obj (8 objects per 640 image) b [:, 5 :] += math . log ( 0.6 / ( m . nc - 0.999999 )) if cf is None else flow . log ( cf / cf . sum ()) # cls mi . bias = flow . nn . Parameter ( b . view ( - 1 ), requires_grad = True ) # \u6253\u5370\u6a21\u578b\u4e2d\u6700\u540eDetect\u5c42\u7684\u504f\u7f6ebiases\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u4efb\u9009\u54ea\u4e9b\u5c42biases\u4fe1\u606f) def _print_biases ( self ): \"\"\" \u6253\u5370\u6a21\u578b\u4e2d\u6700\u540eDetect\u6a21\u5757\u91cc\u9762\u7684\u5377\u79ef\u5c42\u7684\u504f\u7f6ebiases\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u4efb\u9009\u54ea\u4e9b\u5c42biases\u4fe1\u606f) \"\"\" m = self . model [ - 1 ] # Detect() module for mi in m . m : # from b = mi . bias . detach () . view ( m . na , - 1 ) . T # conv.bias(255) to (3,85) LOGGER . info ( ( ' %6g Conv2d.bias:' + ' %10.3g ' * 6 ) % ( mi . weight . shape [ 1 ], * b [: 5 ] . mean ( 1 ) . tolist (), b [ 5 :] . mean ())) def _print_weights ( self ): \"\"\" \u6253\u5370\u6a21\u578b\u4e2dBottleneck\u5c42\u7684\u6743\u91cd\u53c2\u6570weights\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u4efb\u9009\u54ea\u4e9b\u5c42weights\u4fe1\u606f) \"\"\" for m in self . model . modules (): if type ( m ) is Bottleneck : LOGGER . info ( ' %10.3g ' % ( m . w . detach () . sigmoid () * 2 )) # shortcut weights # fuse()\u662f\u7528\u6765\u8fdb\u884cconv\u548cbn\u5c42\u5408\u5e76\uff0c\u4e3a\u4e86\u63d0\u901f\u6a21\u578b\u63a8\u7406\u901f\u5ea6\u3002 def fuse ( self ): # fuse model Conv2d() + BatchNorm2d() layers \"\"\"\u7528\u5728detect.py\u3001val.py fuse model Conv2d() + BatchNorm2d() layers \u8c03\u7528oneflow_utils.py\u4e2d\u7684fuse_conv_and_bn\u51fd\u6570\u548ccommon.py\u4e2dConv\u6a21\u5757\u7684fuseforward\u51fd\u6570 \"\"\" LOGGER . info ( 'Fusing layers... ' ) for m in self . model . modules (): # \u5982\u679c\u5f53\u524d\u5c42\u662f\u5377\u79ef\u5c42Conv\u4e14\u6709bn\u7ed3\u6784, \u90a3\u4e48\u5c31\u8c03\u7528fuse_conv_and_bn\u51fd\u6570\u8bb2conv\u548cbn\u8fdb\u884c\u878d\u5408, \u52a0\u901f\u63a8\u7406 if isinstance ( m , ( Conv , DWConv )) and hasattr ( m , 'bn' ): m . conv = fuse_conv_and_bn ( m . conv , m . bn ) # update conv delattr ( m , 'bn' ) # remove batchnorm \u79fb\u9664bn remove batchnorm m . forward = m . forward_fuse # update forward \u66f4\u65b0\u524d\u5411\u4f20\u64ad update forward (\u53cd\u5411\u4f20\u64ad\u4e0d\u7528\u7ba1, \u56e0\u4e3a\u8fd9\u79cd\u63a8\u7406\u53ea\u7528\u5728\u63a8\u7406\u9636\u6bb5) self . info () # \u6253\u5370conv+bn\u878d\u5408\u540e\u7684\u6a21\u578b\u4fe1\u606f return self # \u6253\u5370\u6a21\u578b\u7ed3\u6784\u4fe1\u606f \u5728\u5f53\u524d\u7c7b__init__\u51fd\u6570\u7ed3\u5c3e\u5904\u6709\u8c03\u7528 def info ( self , verbose = False , img_size = 640 ): # print model information model_info ( self , verbose , img_size ) def _apply ( self , fn ): # Apply to(), cpu(), cuda(), half() to model tensors that are not parameters or registered buffers self = super () . _apply ( fn ) m = self . model [ - 1 ] # Detect() if isinstance ( m , Detect ): m . stride = fn ( m . stride ) m . grid = list ( map ( fn , m . grid )) if isinstance ( m . anchor_grid , list ): m . anchor_grid = list ( map ( fn , m . anchor_grid )) return self Detect\u7c7b\u89e3\u8bfb class Detect ( nn . Module ): \"\"\" Detect\u6a21\u5757\u662f\u7528\u6765\u6784\u5efaDetect\u5c42\u7684\uff0c\u5c06\u8f93\u5165feature map \u901a\u8fc7\u4e00\u4e2a\u5377\u79ef\u64cd\u4f5c\u548c\u516c\u5f0f\u8ba1\u7b97\u5230\u6211\u4eec\u60f3\u8981\u7684shape, \u4e3a\u540e\u9762\u7684\u8ba1\u7b97\u635f\u5931\u6216\u8005NMS\u540e\u5904\u7406\u4f5c\u51c6\u5907 \"\"\" stride = None # strides computed during build onnx_dynamic = False # ONNX export parameter export = False # export mode def __init__ ( self , nc = 80 , anchors = (), ch = (), inplace = True ): # detection layer super () . __init__ () # nc:\u5206\u7c7b\u6570\u91cf self . nc = nc # number of classes # no:\u6bcf\u4e2aanchor\u7684\u8f93\u51fa\u6570 self . no = nc + 5 # number of outputs per anchor # nl:\u9884\u6d4b\u5c42\u6570\uff0c\u6b64\u6b21\u4e3a3 self . nl = len ( anchors ) # number of detection layers # na:anchors\u7684\u6570\u91cf\uff0c\u6b64\u6b21\u4e3a3 self . na = len ( anchors [ 0 ]) // 2 # number of anchors # grid:\u683c\u5b50\u5750\u6807\u7cfb\uff0c\u5de6\u4e0a\u89d2\u4e3a(1,1),\u53f3\u4e0b\u89d2\u4e3a(input.w/stride,input.h/stride) self . grid = [ flow . zeros ( 1 )] * self . nl # init grid self . anchor_grid = [ flow . zeros ( 1 )] * self . nl # init anchor grid # \u5199\u5165\u7f13\u5b58\u4e2d\uff0c\u5e76\u547d\u540d\u4e3aanchors self . register_buffer ( 'anchors' , flow . tensor ( anchors ) . float () . view ( self . nl , - 1 , 2 )) # shape(nl,na,2) # \u5c06\u8f93\u51fa\u901a\u8fc7\u5377\u79ef\u5230 self.no * self.na \u7684\u901a\u9053\uff0c\u8fbe\u5230\u5168\u8fde\u63a5\u7684\u4f5c\u7528 self . m = nn . ModuleList ( nn . Conv2d ( x , self . no * self . na , 1 ) for x in ch ) # output conv self . inplace = inplace # use inplace ops (e.g. slice assignment) def forward ( self , x ): z = [] # inference output for i in range ( self . nl ): x [ i ] = self . m [ i ]( x [ i ]) # conv bs , _ , ny , nx = x [ i ] . shape # x(bs,255,20,20) to x(bs,3,20,20,85) x [ i ] = x [ i ] . view ( bs , self . na , self . no , ny , nx ) . permute ( 0 , 1 , 3 , 4 , 2 ) . contiguous () if not self . training : # inference if self . onnx_dynamic or self . grid [ i ] . shape [ 2 : 4 ] != x [ i ] . shape [ 2 : 4 ]: # \u5411\u524d\u4f20\u64ad\u65f6\u9700\u8981\u5c06\u76f8\u5bf9\u5750\u6807\u8f6c\u6362\u5230grid\u7edd\u5bf9\u5750\u6807\u7cfb\u4e2d self . grid [ i ], self . anchor_grid [ i ] = self . _make_grid ( nx , ny , i ) y = x [ i ] . sigmoid () if self . inplace : y [ ... , 0 : 2 ] = ( y [ ... , 0 : 2 ] * 2 + self . grid [ i ]) * self . stride [ i ] # xy y [ ... , 2 : 4 ] = ( y [ ... , 2 : 4 ] * 2 ) ** 2 * self . anchor_grid [ i ] # wh else : # for YOLOv5 on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953 xy , wh , conf = y . split (( 2 , 2 , self . nc + 1 ), 4 ) # y.tensor_split((2, 4, 5), 4) xy = ( xy * 2 + self . grid [ i ]) * self . stride [ i ] # xy wh = ( wh * 2 ) ** 2 * self . anchor_grid [ i ] # wh y = flow . cat (( xy , wh , conf ), 4 ) z . append ( y . view ( bs , - 1 , self . no )) return x if self . training else ( flow . cat ( z , 1 ),) if self . export else ( flow . cat ( z , 1 ), x ) # \u76f8\u5bf9\u5750\u6807\u8f6c\u6362\u5230grid\u7edd\u5bf9\u5750\u6807\u7cfb def _make_grid ( self , nx = 20 , ny = 20 , i = 0 ): d = self . anchors [ i ] . device t = self . anchors [ i ] . dtype shape = 1 , self . na , ny , nx , 2 # grid shape y , x = flow . arange ( ny , device = d , dtype = t ), flow . arange ( nx , device = d , dtype = t ) yv , xv = flow . meshgrid ( y , x , indexing = \"ij\" ) grid = flow . stack (( xv , yv ), 2 ) . expand ( shape ) - 0.5 # add grid offset, i.e. y = 2.0 * x - 0.5 anchor_grid = ( self . anchors [ i ] * self . stride [ i ]) . view (( 1 , self . na , 1 , 1 , 2 )) . expand ( shape ) return grid , anchor_grid \u9644\u4ef6 \u88682.1 yolov5s.yaml \u89e3\u6790\u8868 \u5c42\u6570 form moudule arguments input output 0 -1 Conv [3, 32, 6, 2, 2] [3, 640, 640] [32, 320, 320] 1 -1 Conv [32, 64, 3, 2] [32, 320, 320] [64, 160, 160] 2 -1 C3 [64, 64, 1] [64, 160, 160] [64, 160, 160] 3 -1 Conv [64, 128, 3, 2] [64, 160, 160] [128, 80, 80] 4 -1 C3 [128, 128, 2] [128, 80, 80] [128, 80, 80] 5 -1 Conv [128, 256, 3, 2] [128, 80, 80] [256, 40, 40] 6 -1 C3 [256, 256, 3] [256, 40, 40] [256, 40, 40] 7 -1 Conv [256, 512, 3, 2] [256, 40, 40] [512, 20, 20] 8 -1 C3 [512, 512, 1] [512, 20, 20] [512, 20, 20] 9 -1 SPPF [512, 512, 5] [512, 20, 20] [512, 20, 20] 10 -1 Conv [512, 256, 1, 1] [512, 20, 20] [256, 20, 20] 11 -1 Upsample [None, 2, 'nearest'] [256, 20, 20] [256, 40, 40] 12 [-1, 6] Concat [1] [1, 256, 40, 40],[1, 256, 40, 40] [512, 40, 40] 13 -1 C3 [512, 256, 1, False] [512, 40, 40] [256, 40, 40] 14 -1 Conv [256, 128, 1, 1] [256, 40, 40] [128, 40, 40] 15 -1 Upsample [None, 2, 'nearest'] [128, 40, 40] [128, 80, 80] 16 [-1, 4] Concat [1] [1, 128, 80, 80],[1, 128, 80, 80] [256, 80, 80] 17 -1 C3 [256, 128, 1, False] [256, 80, 80] [128, 80, 80] 18 -1 Conv [128, 128, 3, 2] [128, 80, 80] [128, 40, 40] 19 [-1, 14] Concat [1] [1, 128, 40, 40],[1, 128, 40, 40] [256, 40, 40] 20 -1 C3 [256, 256, 1, False] [256, 40, 40] [256, 40, 40] 21 -1 Conv [256, 256, 3, 2] [256, 40, 40] [256, 20, 20] 22 [-1, 10] Concat [1] [1, 256, 20, 20],[1, 256, 20, 20] [512, 20, 20] 23 -1 C3 [512, 512, 1, False] [512, 20, 20] [512, 20, 20] 24 [17, 20, 23] Detect [80, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]] [1, 128, 80, 80],[1, 256, 40, 40],[1, 512, 20, 20] [1, 3, 80, 80, 85],[1, 3, 40, 40, 85],[1, 3, 20, 20, 85] \u53c2\u8003\u6587\u7ae0: https://zhuanlan.zhihu.com/p/436891962?ivk_sa=1025922q https://zhuanlan.zhihu.com/p/110204563 https://www.it610.com/article/1550621248474648576.htm","title":"YOLOv5 \u7f51\u7edc\u7ed3\u6784\u89e3\u6790"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#yolov5","text":"","title":"\u4e8c YOLOv5 \u7f51\u7edc\u7ed3\u6784\u89e3\u6790"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#_1","text":"YOLOv5\u9488\u5bf9\u4e0d\u540c\u5927\u5c0f\uff08n, s, m, l, x\uff09\u7684\u7f51\u7edc\u6574\u4f53\u67b6\u6784\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u4f1a\u5728\u6bcf\u4e2a\u5b50\u6a21\u5757\u4e2d\u91c7\u7528\u4e0d\u540c\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\uff0c \u5206\u522b\u5e94\u5bf9yaml\u6587\u4ef6\u4e2d\u7684depth_multiple\u548cwidth_multiple\u53c2\u6570\u3002 \u8fd8\u9700\u8981\u6ce8\u610f\u4e00\u70b9\uff0c\u5b98\u65b9\u9664\u4e86n, s, m, l, x\u7248\u672c\u5916\u8fd8\u6709n6, s6, m6, l6, x6\uff0c\u533a\u522b\u5728\u4e8e\u540e\u8005\u662f\u9488\u5bf9\u66f4\u5927\u5206\u8fa8\u7387\u7684\u56fe\u7247\u6bd4\u59821280x1280, \u5f53\u7136\u7ed3\u6784\u4e0a\u4e5f\u6709\u4e9b\u5dee\u5f02\uff0c\u524d\u8005\u53ea\u4f1a\u4e0b\u91c7\u6837\u523032\u500d\u4e14\u91c7\u75283\u4e2a\u9884\u6d4b\u7279\u5f81\u5c42 , \u800c\u540e\u8005\u4f1a\u4e0b\u91c7\u683764\u500d\uff0c\u91c7\u75284\u4e2a\u9884\u6d4b\u7279\u5f81\u5c42\u3002 \u672c\u7ae0\u5c06\u4ee5 yolov5s\u4e3a\u4f8b \uff0c\u4ece\u914d\u7f6e\u6587\u4ef6 modeles/ yolov5s.yaml \u5230 models/ yolo.py \u6e90\u7801\u8fdb\u884c\u89e3\u8bfb\u3002","title":"\u524d\u8a00"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#yolov5syaml","text":"nc : 80 # number of classes \u6570\u636e\u96c6\u4e2d\u7684\u7c7b\u522b\u6570 depth_multiple : 0.33 # model depth multiple \u6a21\u578b\u5c42\u6570\u56e0\u5b50(\u7528\u6765\u8c03\u6574\u7f51\u7edc\u7684\u6df1\u5ea6) width_multiple : 0.50 # layer channel multiple \u6a21\u578b\u901a\u9053\u6570\u56e0\u5b50(\u7528\u6765\u8c03\u6574\u7f51\u7edc\u7684\u5bbd\u5ea6) # \u5982\u4f55\u7406\u89e3\u8fd9\u4e2adepth_multiple\u548cwidth_multiple\u5462?\u5b83\u51b3\u5b9a\u7684\u662f\u6574\u4e2a\u6a21\u578b\u4e2d\u7684\u6df1\u5ea6\uff08\u5c42\u6570\uff09\u548c\u5bbd\u5ea6\uff08\u901a\u9053\u6570\uff09,\u5177\u4f53\u600e\u4e48\u8c03\u6574\u7684\u7ed3\u5408\u540e\u9762\u7684backbone\u4ee3\u7801\u89e3\u91ca\u3002 anchors : # \u8868\u793a\u4f5c\u7528\u4e8e\u5f53\u524d\u7279\u5f81\u56fe\u7684Anchor\u5927\u5c0f\u4e3a xxx # 9\u4e2aanchor\uff0c\u5176\u4e2dP\u8868\u793a\u7279\u5f81\u56fe\u7684\u5c42\u7ea7\uff0cP3/8\u8be5\u5c42\u7279\u5f81\u56fe\u7f29\u653e\u4e3a1/8,\u662f\u7b2c3\u5c42\u7279\u5f81 - [ 10 , 13 , 16 , 30 , 33 , 23 ] # P3/8\uff0c \u8868\u793a[10,13],[16,30], [33,23]3\u4e2aanchor - [ 30 , 61 , 62 , 45 , 59 , 119 ] # P4/16 - [ 116 , 90 , 156 , 198 , 373 , 326 ] # P5/32 # YOLOv5s v6.0 backbone backbone : # [from, number, module, args] [[ -1 , 1 , Conv , [ 64 , 6 , 2 , 2 ]], # 0-P1/2 [ -1 , 1 , Conv , [ 128 , 3 , 2 ]], # 1-P2/4 [ -1 , 3 , C3 , [ 128 ]], [ -1 , 1 , Conv , [ 256 , 3 , 2 ]], # 3-P3/8 [ -1 , 6 , C3 , [ 256 ]], [ -1 , 1 , Conv , [ 512 , 3 , 2 ]], # 5-P4/16 [ -1 , 9 , C3 , [ 512 ]], [ -1 , 1 , Conv , [ 1024 , 3 , 2 ]], # 7-P5/32 [ -1 , 3 , C3 , [ 1024 ]], [ -1 , 1 , SPPF , [ 1024 , 5 ]], # 9 ] # YOLOv5s v6.0 head head : [[ -1 , 1 , Conv , [ 512 , 1 , 1 ]], [ -1 , 1 , nn.Upsample , [ None , 2 , 'nearest' ]], [[ -1 , 6 ], 1 , Concat , [ 1 ]], # cat backbone P4 [ -1 , 3 , C3 , [ 512 , False ]], # 13 [ -1 , 1 , Conv , [ 256 , 1 , 1 ]], [ -1 , 1 , nn.Upsample , [ None , 2 , 'nearest' ]], [[ -1 , 4 ], 1 , Concat , [ 1 ]], # cat backbone P3 [ -1 , 3 , C3 , [ 256 , False ]], # 17 (P3/8-small) [ -1 , 1 , Conv , [ 256 , 3 , 2 ]], [[ -1 , 14 ], 1 , Concat , [ 1 ]], # cat head P4 [ -1 , 3 , C3 , [ 512 , False ]], # 20 (P4/16-medium) [ -1 , 1 , Conv , [ 512 , 3 , 2 ]], [[ -1 , 10 ], 1 , Concat , [ 1 ]], # cat head P5 [ -1 , 3 , C3 , [ 1024 , False ]], # 23 (P5/32-large) [[ 17 , 20 , 23 ], 1 , Detect , [ nc , anchors ]], # Detect(P3, P4, P5) ]","title":"yolov5s.yaml\u6587\u4ef6\u5185\u5bb9:"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#anchors","text":"yolov5 \u521d\u59cb\u5316\u4e86 9 \u4e2a anchors\uff0c\u5206\u522b\u5728\u4e09\u4e2a\u7279\u5f81\u56fe \uff08feature map\uff09\u4e2d\u4f7f\u7528\uff0c\u6bcf\u4e2a feature map \u7684\u6bcf\u4e2a grid cell \u90fd\u6709\u4e09\u4e2a anchor \u8fdb\u884c\u9884\u6d4b\u3002 \u5206\u914d\u89c4\u5219\uff1a \u5c3a\u5ea6\u8d8a\u5927\u7684 feature map \u8d8a\u9760\u524d\uff0c\u76f8\u5bf9\u539f\u56fe\u7684\u4e0b\u91c7\u6837\u7387\u8d8a\u5c0f\uff0c\u611f\u53d7\u91ce\u8d8a\u5c0f\uff0c \u6240\u4ee5\u76f8\u5bf9\u53ef\u4ee5\u9884\u6d4b\u4e00\u4e9b\u5c3a\u5ea6\u6bd4\u8f83\u5c0f\u7684\u7269\u4f53(\u5c0f\u76ee\u6807)\uff0c\u5206\u914d\u5230\u7684 anchors \u8d8a\u5c0f\u3002 \u5c3a\u5ea6\u8d8a\u5c0f\u7684 feature map \u8d8a\u9760\u540e\uff0c\u76f8\u5bf9\u539f\u56fe\u7684\u4e0b\u91c7\u6837\u7387\u8d8a\u5927\uff0c\u611f\u53d7\u91ce\u8d8a\u5927\uff0c \u6240\u4ee5\u53ef\u4ee5\u9884\u6d4b\u4e00\u4e9b\u5c3a\u5ea6\u6bd4\u8f83\u5927\u7684\u7269\u4f53(\u5927\u76ee\u6807)\uff0c\u6240\u4ee5\u5206\u914d\u5230\u7684 anchors \u8d8a\u5927\u3002 \u5373\u5728\u5c0f\u7279\u5f81\u56fe\uff08feature map\uff09\u4e0a\u68c0\u6d4b\u5927\u76ee\u6807\uff0c\u4e2d\u7b49\u5927\u5c0f\u7684\u7279\u5f81\u56fe\u4e0a\u68c0\u6d4b\u4e2d\u7b49\u76ee\u6807\uff0c \u5728\u5927\u7279\u5f81\u56fe\u4e0a\u68c0\u6d4b\u5c0f\u76ee\u6807\u3002","title":"anchors \u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#backbone-head","text":"","title":"backbone &amp; head\u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#from-number-module-args","text":"\u56db\u4e2a\u53c2\u6570\u7684\u610f\u4e49\u5206\u522b\u662f\uff1a 1. \u7b2c\u4e00\u4e2a\u53c2\u6570 from \uff1a\u4ece\u54ea\u4e00\u5c42\u83b7\u5f97\u8f93\u5165\uff0c-1\u8868\u793a\u4ece\u4e0a\u4e00\u5c42\u83b7\u5f97\uff0c[-1, 6]\u8868\u793a\u4ece\u4e0a\u5c42\u548c\u7b2c6\u5c42\u4e24\u5c42\u83b7\u5f97\u3002 2. \u7b2c\u4e8c\u4e2a\u53c2\u6570 number\uff1a\u8868\u793a\u6709\u51e0\u4e2a\u76f8\u540c\u7684\u6a21\u5757\uff0c\u5982\u679c\u4e3a9\u5219\u8868\u793a\u67099\u4e2a\u76f8\u540c\u7684\u6a21\u5757\u3002 3. \u7b2c\u4e09\u4e2a\u53c2\u6570 module\uff1a\u6a21\u5757\u7684\u540d\u79f0\uff0c\u8fd9\u4e9b\u6a21\u5757\u5199\u5728common.py\u4e2d\u3002 4. \u7b2c\u56db\u4e2a\u53c2\u6570 args\uff1a\u7c7b\u7684\u521d\u59cb\u5316\u53c2\u6570\uff0c\u7528\u4e8e\u89e3\u6790\u4f5c\u4e3a moudle \u7684\u4f20\u5165\u53c2\u6570\u3002 \u4e0b\u9762\u4ee5\u7b2c\u4e00\u4e2a\u6a21\u5757Conv \u4e3a\u4f8b\u4ecb\u7ecd\u4e0bcommon.py\u4e2d\u7684\u6a21\u5757 Conv \u6a21\u5757\u5b9a\u4e49\u5982\u4e0b: class Conv ( nn . Module ): # Standard convolution def __init__ ( self , c1 , c2 , k = 1 , s = 1 , p = None , g = 1 , act = True ): # ch_in, ch_out, kernel, stride, padding, groups \"\"\" @Pargm c1: \u8f93\u5165\u901a\u9053\u6570 @Pargm c2: \u8f93\u51fa\u901a\u9053\u6570 @Pargm k : \u5377\u79ef\u6838\u5927\u5c0f(kernel_size) @Pargm s : \u5377\u79ef\u6b65\u957f (stride) @Pargm p : \u7279\u5f81\u56fe\u586b\u5145\u5bbd\u5ea6 (padding) @Pargm g : \u63a7\u5236\u5206\u7ec4\uff0c\u5fc5\u987b\u6574\u9664\u8f93\u5165\u7684\u901a\u9053\u6570(\u4fdd\u8bc1\u8f93\u5165\u7684\u901a\u9053\u80fd\u88ab\u6b63\u786e\u5206\u7ec4) \"\"\" super () . __init__ () # https://oneflow.readthedocs.io/en/master/generated/oneflow.nn.Conv2d.html?highlight=Conv self . conv = nn . Conv2d ( c1 , c2 , k , s , autopad ( k , p ), groups = g , bias = False ) self . bn = nn . BatchNorm2d ( c2 ) self . act = nn . SiLU () if act is True else ( act if isinstance ( act , nn . Module ) else nn . Identity ()) def forward ( self , x ): return self . act ( self . bn ( self . conv ( x ))) def forward_fuse ( self , x ): return self . act ( self . conv ( x )) \u6bd4\u5982\u4e0a\u9762\u628awidth_multiple\u8bbe\u7f6e\u4e3a\u4e860.5\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a [64, 6, 2, 2] \u5c31\u4f1a\u88ab\u89e3\u6790\u4e3a [3,64*0.5=32,6,2,2]\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a 3 \u4e3a\u8f93\u5165channel(\u56e0\u4e3a\u8f93\u5165)\uff0c32 \u4e3a\u8f93\u51fachannel\u3002","title":"[from, number, module, args] \u53c2\u6570"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#_2","text":"\u5728 yolo.py \u7684256\u884c \u6709\u5bf9yaml \u6587\u4ef6\u7684nc,depth_multiple\u7b49\u53c2\u6570\u8bfb\u53d6\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b: anchors, nc, gd, gw = d['anchors'], d['nc'], d['depth_multiple'], d['width_multiple'] \"width_multiple\"\u53c2\u6570\u7684\u4f5c\u7528\u524d\u9762\u4ecb\u7ecdargs\u53c2\u6570\u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u90a3\u4e48\"depth_multiple\"\u53c8\u662f\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u5728 yolo.py \u7684257\u884c\u6709\u5bf9\u53c2\u6570\u7684\u5177\u4f53\u5b9a\u4e49\uff1a n = n_ = max ( round ( n * gd ), 1 ) if n > 1 else n # depth gain \u6682\u4e14\u5c06\u8fd9\u6bb5\u4ee3\u7801\u5f53\u4f5c\u516c\u5f0f(1) \u5176\u4e2d gd \u5c31\u662fdepth_multiple\u7684\u503c\uff0cn\u7684\u503c\u5c31\u662fbackbone\u4e2d\u5217\u8868\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a \u6839\u636e\u516c\u793a(1) \u5f88\u5bb9\u6613\u770b\u51fa gd \u5f71\u54cd n \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5f71\u54cd\u7f51\u7edc\u7684\u7ed3\u6784\u5927\u5c0f\u3002 \u540e\u9762\u5404\u5c42\u4e4b\u95f4\u7684\u6a21\u5757\u6570\u91cf\u3001\u5377\u79ef\u6838\u5927\u5c0f\u548c\u6570\u91cf\u7b49\u4e5f\u90fd\u4ea7\u751f\u4e86\u53d8\u5316\uff0cYOLOv5l \u4e0e YOLOv5s \u76f8\u6bd4\u8f83\u8d77\u6765\u8bad\u7ec3\u53c2\u6570\u7684\u5927\u5c0f\u6210\u500d\u6570\u589e\u957f\uff0c \u5176\u6a21\u578b\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\u4e5f\u4f1a\u5927\u5f88\u591a\uff0c\u8fd9\u5c31\u4f7f\u5f97 YOLOv5l \u7684 \u7cbe\u5ea6\u503c\u8981\u6bd4 YOLOv5s \u597d\u5f88\u591a\uff0c\u56e0\u6b64\u5728\u6700\u7ec8\u63a8\u7406\u65f6\u7684\u68c0\u6d4b\u7cbe\u5ea6\u9ad8\uff0c\u4f46\u662f\u6a21\u578b\u7684\u63a8\u7406\u901f\u5ea6\u66f4\u6162\u3002 \u6240\u4ee5 YOLOv5 \u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u5982\u679c\u60f3\u8981\u8ffd\u6c42\u63a8\u7406\u901f\u5ea6\u53ef\u9009\u7528\u8f83\u5c0f\u4e00\u4e9b\u7684\u6a21\u578b\u5982 YOLOv5s\u3001YOLOv5m\uff0c\u5982\u679c\u60f3\u8981\u8ffd\u6c42\u7cbe\u5ea6\u66f4\u9ad8\u5bf9\u63a8\u7406\u901f\u5ea6\u8981\u6c42\u4e0d\u9ad8\u7684\u53ef\u4ee5\u9009\u62e9\u5176\u4ed6\u4e24\u4e2a\u7a0d\u5927\u7684\u6a21\u578b\u3002 \u5982\u4e0b\u9762\u8fd9\u5f20\u56fe\uff1a \u56fe2.1 :yolov5 \u6a21\u578b\u6bd4\u8f83\u56fe \u6765\u6e90:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data","title":"\u5173\u4e8e\u8c03\u6574\u7f51\u7edc\u5927\u5c0f\u7684\u8be6\u89e3\u8bf4\u660e"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#conv","text":"","title":"Conv\u6a21\u5757\u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#_3","text":"\u4e0b\u9762\u662f\u6839\u636e yolov5s.yaml \u7ed8\u5236\u7684\u7f51\u7edc\u6574\u4f53\u7ed3\u6784\u7b80\u5316\u7248\u3002 \u56fe2.2 :yolov5s \u7f51\u7edc\u6574\u4f53\u7ed3\u6784 \u8be6\u7ec6\u7684\u7f51\u7edc\u7ed3\u6784\u56fe\uff1ahttps://oneflow-static.oss-cn-beijing.aliyuncs.com/one-yolo/imgs/yolov5s.onnx.png \u901a\u8fc7export.py\u5bfc\u51fa\u7684onnx\u683c\u5f0f\uff0c\u5e76\u901a\u8fc7 https://netron.app/ \u7f51\u7ad9\u5bfc\u51fa\u7684\u56fe\u7247(\u6a21\u578b\u5bfc\u51fa \u5c06\u5728\u7b2c\u516b\u7ae0\u4ecb\u7ecd)\u3002 \u6a21\u5757\u7ec4\u4ef6\u53f3\u8fb9\u53c2\u6570 \u8868\u793a\u7279\u5f81\u56fe\u7684\u7684\u5f62\u72b6\uff0c\u6bd4\u5982 \u5728 \u7b2c \u4e00 \u5c42( Conv )\u8f93\u5165 \u56fe\u7247\u5f62\u72b6\u4e3a [ 3, 640, 640] ,\u5173\u4e8e\u8fd9\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u56fa\u5b9a\u4e00\u5f20\u56fe\u7247\u8f93\u5165\u5230\u7f51\u7edc\u5e76\u901a\u8fc7 yolov5s.yaml \u7684\u6a21\u578b\u53c2\u6570\u8ba1\u7b97\u5f97\u5230\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u5de5\u7a0b models/ yolo.py \u901a\u8fc7\u4ee3\u7801\u8fdb\u884cprint\u67e5\u770b,\u8be6\u7ec6\u6570\u636e\u53ef\u4ee5\u53c2\u8003\u9644\u4ef6\u88682.1\u3002","title":"\u7f51\u7edc\u7ed3\u6784\u9884\u89c8"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#yolopy","text":"\u6587\u4ef6\u5730\u5740 \u6587\u4ef6\u4e3b\u8981\u5305\u542b \u4e09\u5927\u90e8\u5206 Detect\u7c7b\uff0c Model\u7c7b\uff0c\u548c parse_model \u51fd\u6570 \u53ef\u4ee5\u901a\u8fc7 python models/ yolo.py --cfg yolov5s.yaml \u8fd0\u884c\u8be5\u811a\u672c\u8fdb\u884c\u89c2\u5bdf","title":"yolo.py \u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#parse_model","text":"def parse_model ( d , ch ): # model_dict, input_channels(3) \"\"\"\u7528\u5728\u4e0b\u9762Model\u6a21\u5757\u4e2d \u89e3\u6790\u6a21\u578b\u6587\u4ef6(\u5b57\u5178\u5f62\u5f0f)\uff0c\u5e76\u642d\u5efa\u7f51\u7edc\u7ed3\u6784 \u8fd9\u4e2a\u51fd\u6570\u5176\u5b9e\u4e3b\u8981\u505a\u7684\u5c31\u662f: \u66f4\u65b0\u5f53\u524d\u5c42\u7684args\uff08\u53c2\u6570\uff09,\u8ba1\u7b97c2\uff08\u5f53\u524d\u5c42\u7684\u8f93\u51fachannel\uff09 => \u4f7f\u7528\u5f53\u524d\u5c42\u7684\u53c2\u6570\u642d\u5efa\u5f53\u524d\u5c42 => \u751f\u6210 layers + save @Params d: model_dict \u6a21\u578b\u6587\u4ef6 \u5b57\u5178\u5f62\u5f0f {dict:7} [yolov5s.yaml](https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml)\u4e2d\u76846\u4e2a\u5143\u7d20 + ch #Params ch: \u8bb0\u5f55\u6a21\u578b\u6bcf\u4e00\u5c42\u7684\u8f93\u51fachannel \u521d\u59cbch=[3] \u540e\u9762\u4f1a\u5220\u9664 @return nn.Sequential(*layers): \u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u7684\u5c42\u7ed3\u6784 @return sorted(save): \u628a\u6240\u6709\u5c42\u7ed3\u6784\u4e2dfrom\u4e0d\u662f-1\u7684\u503c\u8bb0\u4e0b \u5e76\u6392\u5e8f [4, 6, 10, 14, 17, 20, 23] \"\"\" LOGGER . info ( f \" \\n { '' : >3 }{ 'from' : >18 }{ 'n' : >3 }{ 'params' : >10 } { 'module' : <40 }{ 'arguments' : <30 } \" ) # \u8bfb\u53d6d\u5b57\u5178\u4e2d\u7684anchors\u548cparameters(nc\u3001depth_multiple\u3001width_multiple) anchors , nc , gd , gw = d [ 'anchors' ], d [ 'nc' ], d [ 'depth_multiple' ], d [ 'width_multiple' ] # na: number of anchors \u6bcf\u4e00\u4e2apredict head\u4e0a\u7684anchor\u6570 = 3 na = ( len ( anchors [ 0 ]) // 2 ) if isinstance ( anchors , list ) else anchors # number of anchors no = na * ( nc + 5 ) # number of outputs = anchors * (classes + 5) \u6bcf\u4e00\u4e2apredict head\u5c42\u7684\u8f93\u51fachannel # \u5f00\u59cb\u642d\u5efa\u7f51\u7edc # layers: \u4fdd\u5b58\u6bcf\u4e00\u5c42\u7684\u5c42\u7ed3\u6784 # save: \u8bb0\u5f55\u4e0b\u6240\u6709\u5c42\u7ed3\u6784\u4e2dfrom\u4e2d\u4e0d\u662f-1\u7684\u5c42\u7ed3\u6784\u5e8f\u53f7 # c2: \u4fdd\u5b58\u5f53\u524d\u5c42\u7684\u8f93\u51fachannel layers , save , c2 = [], [], ch [ - 1 ] # layers, savelist, ch out # enumerate() \u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u4e2a\u53ef\u904d\u5386\u7684\u6570\u636e\u5bf9\u8c61(\u5982\u5217\u8868\u3001\u5143\u7ec4\u6216\u5b57\u7b26\u4e32)\u7ec4\u5408\u4e3a\u4e00\u4e2a\u7d22\u5f15\u5e8f\u5217\uff0c\u540c\u65f6\u5217\u51fa\u6570\u636e\u548c\u6570\u636e\u4e0b\u6807\uff0c\u4e00\u822c\u7528\u5728 for \u5faa\u73af\u5f53\u4e2d\u3002 for i , ( f , n , m , args ) in enumerate ( d [ 'backbone' ] + d [ 'head' ]): # from, number, module, args m = eval ( m ) if isinstance ( m , str ) else m # eval strings for j , a in enumerate ( args ): # args\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e00\u6b65\u628a\u5217\u8868\u4e2d\u7684\u5185\u5bb9\u53d6\u51fa\u6765 with contextlib . suppress ( NameError ): args [ j ] = eval ( a ) if isinstance ( a , str ) else a # eval strings # \u5c06\u6df1\u5ea6\u4e0e\u6df1\u5ea6\u56e0\u5b50\u76f8\u4e58\uff0c\u8ba1\u7b97\u5c42\u6df1\u5ea6\u3002\u6df1\u5ea6\u6700\u5c0f\u4e3a1. n = n_ = max ( round ( n * gd ), 1 ) if n > 1 else n # depth gain # \u5982\u679c\u5f53\u524d\u7684\u6a21\u5757m\u5728\u672c\u9879\u76ee\u5b9a\u4e49\u7684\u6a21\u5757\u7c7b\u578b\u4e2d\uff0c\u5c31\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u6a21\u5757 if m in ( Conv , GhostConv , Bottleneck , GhostBottleneck , SPP , SPPF , DWConv , MixConv2d , Focus , CrossConv , BottleneckCSP , C3 , C3TR , C3SPP , C3Ghost , nn . ConvTranspose2d , DWConvTranspose2d , C3x ): # c1: \u8f93\u5165\u901a\u9053\u6570 c2\uff1a\u8f93\u51fa\u901a\u9053\u6570 c1 , c2 = ch [ f ], args [ 0 ] # \u8be5\u5c42\u4e0d\u662f\u6700\u540e\u4e00\u5c42\uff0c\u5219\u5c06\u901a\u9053\u6570\u4e58\u4ee5\u5bbd\u5ea6\u56e0\u5b50 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bbd\u5ea6\u56e0\u5b50\u4f5c\u7528\u4e8e\u9664\u4e86\u6700\u540e\u4e00\u5c42\u4e4b\u5916\u7684\u6240\u6709\u5c42 if c2 != no : # if not output # make_divisible\u7684\u4f5c\u7528\uff0c\u4f7f\u5f97\u539f\u59cb\u7684\u901a\u9053\u6570\u4e58\u4ee5\u5bbd\u5ea6\u56e0\u5b50\u4e4b\u540e\u53d6\u6574\u52308\u7684\u500d\u6570\uff0c\u8fd9\u6837\u5904\u7406\u4e00\u822c\u662f\u8ba9\u6a21\u578b\u7684\u5e76\u884c\u6027\u548c\u63a8\u7406\u6027\u80fd\u66f4\u597d\u3002 c2 = make_divisible ( c2 * gw , 8 ) # \u5c06\u524d\u9762\u7684\u8fd0\u7b97\u7ed3\u679c\u4fdd\u5b58\u5728args\u4e2d\uff0c\u5b83\u4e5f\u5c31\u662f\u8fd9\u4e2a\u6a21\u5757\u6700\u7ec8\u7684\u8f93\u5165\u53c2\u6570\u3002 args = [ c1 , c2 , * args [ 1 :]] # \u6839\u636e\u6bcf\u5c42\u7f51\u7edc\u53c2\u6570\u7684\u4e0d\u540c\uff0c\u5206\u522b\u5904\u7406\u53c2\u6570 \u5177\u4f53\u5404\u4e2a\u7c7b\u7684\u53c2\u6570\u662f\u4ec0\u4e48\u8bf7\u53c2\u8003\u5b83\u4eec\u7684__init__\u65b9\u6cd5\u8fd9\u91cc\u4e0d\u518d\u8be6\u7ec6\u89e3\u91ca\u4e86 if m in [ BottleneckCSP , C3 , C3TR , C3Ghost , C3x ]: # \u8fd9\u91cc\u7684\u610f\u601d\u5c31\u662f\u91cd\u590dn\u6b21\uff0c\u6bd4\u5982conv\u8fd9\u4e2a\u6a21\u5757\u91cd\u590dn\u6b21\uff0c\u8fd9\u4e2an \u662f\u4e0a\u9762\u7b97\u51fa\u6765\u7684 depth args . insert ( 2 , n ) # number of repeats n = 1 elif m is nn . BatchNorm2d : args = [ ch [ f ]] elif m is Concat : c2 = sum ( ch [ x ] for x in f ) elif m is Detect : args . append ([ ch [ x ] for x in f ]) if isinstance ( args [ 1 ], int ): # number of anchors args [ 1 ] = [ list ( range ( args [ 1 ] * 2 ))] * len ( f ) elif m is Contract : c2 = ch [ f ] * args [ 0 ] ** 2 elif m is Expand : c2 = ch [ f ] // args [ 0 ] ** 2 else : c2 = ch [ f ] # \u6784\u5efa\u6574\u4e2a\u7f51\u7edc\u6a21\u5757 \u8fd9\u91cc\u5c31\u662f\u6839\u636e\u6a21\u5757\u7684\u91cd\u590d\u6b21\u6570n\u4ee5\u53ca\u6a21\u5757\u672c\u8eab\u548c\u5b83\u7684\u53c2\u6570\u6765\u6784\u5efa\u8fd9\u4e2a\u6a21\u5757\u548c\u53c2\u6570\u5bf9\u5e94\u7684Module m_ = nn . Sequential ( * ( m ( * args ) for _ in range ( n ))) if n > 1 else m ( * args ) # module # \u83b7\u53d6\u6a21\u5757(module type)\u5177\u4f53\u540d\u4f8b\u5982 models.common.Conv , models.common.C3 , models.common.SPPF \u7b49\u3002 t = str ( m )[ 8 : - 2 ] . replace ( '__main__.' , '' ) # replace\u51fd\u6570\u4f5c\u7528\u662f\u5b57\u7b26\u4e32\"__main__\"\u66ff\u6362\u4e3a''\uff0c\u5728\u5f53\u524d\u9879\u76ee\u6ca1\u6709\u7528\u5230\u8fd9\u4e2a\u66ff\u6362\u3002 np = sum ( x . numel () for x in m_ . parameters ()) # number params m_ . i , m_ . f , m_ . type , m_ . np = i , f , t , np # attach index, 'from' index, type, number params LOGGER . info ( f ' { i : >3 }{ str ( f ) : >18 }{ n_ : >3 }{ np : 10.0f } { t : <40 }{ str ( args ) : <30 } ' ) # print \"\"\" \u5982\u679cx\u4e0d\u662f-1\uff0c\u5219\u5c06\u5176\u4fdd\u5b58\u5728save\u5217\u8868\u4e2d\uff0c\u8868\u793a\u8be5\u5c42\u9700\u8981\u4fdd\u5b58\u7279\u5f81\u56fe\u3002 \u8fd9\u91cc x % i \u4e0e x \u7b49\u4ef7\u4f8b\u5982\u5728\u6700\u540e\u4e00\u5c42 : f = [17,20,23] , i = 24 y = [ x % i for x in ([f] if isinstance(f, int) else f) if x != -1 ] print(y) # [17, 20, 23] # \u5199\u6210x % i \u53ef\u80fd\u56e0\u4e3a\uff1ai - 1 = -1 % i (\u6bd4\u5982 f = [-1]\uff0c\u5219 [x % i for x in f] \u4ee3\u8868 [11] ) \"\"\" save . extend ( x % i for x in ([ f ] if isinstance ( f , int ) else f ) if x != - 1 ) # append to savelist layers . append ( m_ ) if i == 0 : # \u5982\u679c\u662f\u521d\u6b21\u8fed\u4ee3\uff0c\u5219\u65b0\u521b\u5efa\u4e00\u4e2ach\uff08\u56e0\u4e3a\u5f62\u53c2ch\u5728\u521b\u5efa\u7b2c\u4e00\u4e2a\u7f51\u7edc\u6a21\u5757\u65f6\u9700\u8981\u7528\u5230\uff0c\u6240\u4ee5\u521b\u5efa\u7f51\u7edc\u6a21\u5757\u4e4b\u540e\u518d\u521d\u59cb\u5316ch\uff09 ch = [] ch . append ( c2 ) # \u5c06\u6240\u6709\u7684\u5c42\u5c01\u88c5\u4e3ann.Sequential , \u5bf9\u4fdd\u5b58\u7684\u7279\u5f81\u56fe\u6392\u5e8f return nn . Sequential ( * layers ), sorted ( save )","title":"parse_model\u51fd\u6570\u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#model","text":"class Model ( nn . Module ): # YOLOv5 model def __init__ ( self , cfg = '[yolov5s.yaml](https://github.com/Oneflow-Inc/one-yolov5/blob/main/models/yolov5s.yaml)' , ch = 3 , nc = None , anchors = None ): # model, input channels, number of classes super () . __init__ () # \u5982\u679ccfg\u5df2\u7ecf\u662f\u5b57\u5178\uff0c\u5219\u76f4\u63a5\u8d4b\u503c\uff0c\u5426\u5219\u5148\u52a0\u8f7dcfg\u8def\u5f84\u7684\u6587\u4ef6\u4e3a\u5b57\u5178\u5e76\u8d4b\u503c\u7ed9self.yaml\u3002 if isinstance ( cfg , dict ): self . yaml = cfg # model dict else : # is *.yaml \u52a0\u8f7dyaml\u6a21\u5757 import yaml # for flow hub self . yaml_file = Path ( cfg ) . name with open ( cfg , encoding = 'ascii' , errors = 'ignore' ) as f : self . yaml = yaml . safe_load ( f ) # model dict \u4eceyaml\u6587\u4ef6\u4e2d\u52a0\u8f7d\u51fa\u5b57\u5178 # Define model # ch: \u8f93\u5165\u901a\u9053\u6570\u3002 \u5047\u5982self.yaml\u6709\u952e\u2018ch\u2019\uff0c\u5219\u5c06\u8be5\u952e\u5bf9\u5e94\u7684\u503c\u8d4b\u7ed9\u5185\u90e8\u53d8\u91cfch\u3002\u5047\u5982\u6ca1\u6709\u2018ch\u2019\uff0c\u5219\u5c06\u5f62\u53c2ch\u8d4b\u7ed9\u5185\u90e8\u53d8\u91cfch ch = self . yaml [ 'ch' ] = self . yaml . get ( 'ch' , ch ) # input channels # \u5047\u5982yaml\u4e2d\u7684nc\u548c\u65b9\u6cd5\u5f62\u53c2\u4e2d\u7684nc\u4e0d\u4e00\u81f4\uff0c\u5219\u8986\u76d6yaml\u4e2d\u7684nc\u3002 if nc and nc != self . yaml [ 'nc' ]: LOGGER . info ( f \"Overriding model.yaml nc= { self . yaml [ 'nc' ] } with nc= { nc } \" ) self . yaml [ 'nc' ] = nc # override yaml value if anchors : # anchors \u5148\u9a8c\u6846\u7684\u914d\u7f6e LOGGER . info ( f 'Overriding model.yaml anchors with anchors= { anchors } ' ) self . yaml [ 'anchors' ] = round ( anchors ) # override yaml value # \u5f97\u5230\u6a21\u578b\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u4fdd\u5b58\u7684\u7279\u5f81\u56fe\u5217\u8868\u3002 self . model , self . save = parse_model ( deepcopy ( self . yaml ), ch = [ ch ]) # model, savelist self . names = [ str ( i ) for i in range ( self . yaml [ 'nc' ])] # default names \u521d\u59cb\u5316\u7c7b\u540d\u5217\u8868\uff0c\u9ed8\u8ba4\u4e3a[0,1,2...] # self.inplace=True \u9ed8\u8ba4True \u8282\u7701\u5185\u5b58 self . inplace = self . yaml . get ( 'inplace' , True ) # Build strides, anchors \u786e\u5b9a\u6b65\u957f\u3001\u6b65\u957f\u5bf9\u5e94\u7684\u951a\u6846 m = self . model [ - 1 ] # Detect() if isinstance ( m , Detect ): # \u68c0\u9a8c\u6a21\u578b\u7684\u6700\u540e\u4e00\u5c42\u662fDetect\u6a21\u5757 s = 256 # 2x min stride m . inplace = self . inplace # \u8ba1\u7b97\u4e09\u4e2afeature map\u4e0b\u91c7\u6837\u7684\u500d\u7387 [8, 16, 32] m . stride = flow . tensor ([ s / x . shape [ - 2 ] for x in self . forward ( flow . zeros ( 1 , ch , s , s ))]) # forward # \u68c0\u67e5anchor\u987a\u5e8f\u4e0estride\u987a\u5e8f\u662f\u5426\u4e00\u81f4 anchor\u7684\u987a\u5e8f\u5e94\u8be5\u662f\u4ece\u5c0f\u5230\u5927\uff0c\u8fd9\u91cc\u6392\u4e00\u4e0b\u5e8f check_anchor_order ( m ) # must be in pixel-space (not grid-space) # \u5bf9\u5e94\u7684anchor\u8fdb\u884c\u7f29\u653e\u64cd\u4f5c\uff0c\u539f\u56e0\uff1a\u5f97\u5230anchor\u5728\u5b9e\u9645\u7684\u7279\u5f81\u56fe\u4e2d\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u52a0\u8f7d\u7684\u539f\u59cbanchor\u5927\u5c0f\u662f\u76f8\u5bf9\u4e8e\u539f\u56fe\u7684\u50cf\u7d20\uff0c\u4f46\u662f\u7ecf\u8fc7\u5377\u79ef\u6c60\u5316\u4e4b\u540e\uff0c\u7279\u5f81\u56fe\u7684\u957f\u5bbd\u53d8\u5c0f\u4e86\u3002 m . anchors /= m . stride . view ( - 1 , 1 , 1 ) self . stride = m . stride self . _initialize_biases () # only run once \u521d\u59cb\u5316\u504f\u7f6e # Init weights, biases # \u8c03\u7528oneflow_utils.py\u4e0binitialize_weights\u521d\u59cb\u5316\u6a21\u578b\u6743\u91cd initialize_weights ( self ) self . info () # \u6253\u5370\u6a21\u578b\u4fe1\u606f LOGGER . info ( '' ) # \u7ba1\u7406\u524d\u5411\u4f20\u64ad\u51fd\u6570 def forward ( self , x , augment = False , profile = False , visualize = False ): if augment : # \u662f\u5426\u5728\u6d4b\u8bd5\u65f6\u4e5f\u4f7f\u7528\u6570\u636e\u589e\u5f3a Test Time Augmentation(TTA) return self . _forward_augment ( x ) # augmented inference, None return self . _forward_once ( x , profile , visualize ) # single-scale inference, train # \u5e26\u6570\u636e\u589e\u5f3a\u7684\u524d\u5411\u4f20\u64ad def _forward_augment ( self , x ): img_size = x . shape [ - 2 :] # height, width s = [ 1 , 0.83 , 0.67 ] # scales f = [ None , 3 , None ] # flips (2-ud, 3-lr) y = [] # outputs for si , fi in zip ( s , f ): xi = scale_img ( x . flip ( fi ) if fi else x , si , gs = int ( self . stride . max ())) yi = self . _forward_once ( xi )[ 0 ] # forward # cv2.imwrite(f'img_{si}.jpg', 255 * xi[0].cpu().numpy().transpose((1, 2, 0))[:, :, ::-1]) # save yi = self . _descale_pred ( yi , fi , si , img_size ) y . append ( yi ) y = self . _clip_augmented ( y ) # clip augmented tails return flow . cat ( y , 1 ), None # augmented inference, train # \u524d\u5411\u4f20\u64ad\u5177\u4f53\u5b9e\u73b0 def _forward_once ( self , x , profile = False , visualize = False ): \"\"\" @params x: \u8f93\u5165\u56fe\u50cf @params profile: True \u53ef\u4ee5\u505a\u4e00\u4e9b\u6027\u80fd\u8bc4\u4f30 @params feature_vis: True \u53ef\u4ee5\u505a\u4e00\u4e9b\u7279\u5f81\u53ef\u89c6\u5316 \"\"\" # y: \u5b58\u653e\u7740self.save=True\u7684\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\uff0c\u56e0\u4e3a\u540e\u9762\u7684\u7279\u5f81\u878d\u5408\u64cd\u4f5c\u8981\u7528\u5230\u8fd9\u4e9b\u7279\u5f81\u56fe y , dt = [], [] # outputs # \u524d\u5411\u63a8\u7406\u6bcf\u4e00\u5c42\u7ed3\u6784 m.i=index m.f=from m.type=\u7c7b\u540d m.np=number of params for m in self . model : # if not from previous layer m.f=\u5f53\u524d\u5c42\u7684\u8f93\u5165\u6765\u81ea\u54ea\u4e00\u5c42\u7684\u8f93\u51fa s\u7684m.f\u90fd\u662f-1 if m . f != - 1 : # if not from previous layer x = y [ m . f ] if isinstance ( m . f , int ) else [ x if j == - 1 else y [ j ] for j in m . f ] # from earlier layers if profile : self . _profile_one_layer ( m , x , dt ) x = m ( x ) # run y . append ( x if m . i in self . save else None ) # save output if visualize : feature_visualization ( x , m . type , m . i , save_dir = visualize ) return x # \u5c06\u63a8\u7406\u7ed3\u679c\u6062\u590d\u5230\u539f\u56fe\u56fe\u7247\u5c3a\u5bf8(\u9006\u64cd\u4f5c) def _descale_pred ( self , p , flips , scale , img_size ): # de-scale predictions following augmented inference (inverse operation) \"\"\"\u7528\u5728\u4e0a\u9762\u7684__init__\u51fd\u6570\u4e0a \u5c06\u63a8\u7406\u7ed3\u679c\u6062\u590d\u5230\u539f\u56fe\u56fe\u7247\u5c3a\u5bf8 Test Time Augmentation(TTA)\u4e2d\u7528\u5230 de-scale predictions following augmented inference (inverse operation) @params p: \u63a8\u7406\u7ed3\u679c @params flips: @params scale: @params img_size: \"\"\" if self . inplace : p [ ... , : 4 ] /= scale # de-scale if flips == 2 : p [ ... , 1 ] = img_size [ 0 ] - p [ ... , 1 ] # de-flip ud elif flips == 3 : p [ ... , 0 ] = img_size [ 1 ] - p [ ... , 0 ] # de-flip lr else : x , y , wh = p [ ... , 0 : 1 ] / scale , p [ ... , 1 : 2 ] / scale , p [ ... , 2 : 4 ] / scale # de-scale if flips == 2 : y = img_size [ 0 ] - y # de-flip ud elif flips == 3 : x = img_size [ 1 ] - x # de-flip lr p = flow . cat (( x , y , wh , p [ ... , 4 :]), - 1 ) return p # \u8fd9\u4e2a\u662fTTA\u7684\u65f6\u5019\u5bf9\u539f\u56fe\u7247\u8fdb\u884c\u88c1\u526a\uff0c\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff0c\u7528\u5728TTA\u6d4b\u8bd5\u7684\u65f6\u5019\u3002 def _clip_augmented ( self , y ): # Clip YOLOv5 augmented inference tails nl = self . model [ - 1 ] . nl # number of detection layers (P3-P5) g = sum ( 4 ** x for x in range ( nl )) # grid points e = 1 # exclude layer count i = ( y [ 0 ] . shape [ 1 ] // g ) * sum ( 4 ** x for x in range ( e )) # indices y [ 0 ] = y [ 0 ][:, : - i ] # large i = ( y [ - 1 ] . shape [ 1 ] // g ) * sum ( 4 ** ( nl - 1 - x ) for x in range ( e )) # indices y [ - 1 ] = y [ - 1 ][:, i :] # small return y # \u6253\u5370\u65e5\u5fd7\u4fe1\u606f \u524d\u5411\u63a8\u7406\u65f6\u95f4 def _profile_one_layer ( self , m , x , dt ): c = isinstance ( m , Detect ) # is final layer, copy input as inplace fix o = thop . profile ( m , inputs = ( x . copy () if c else x ,), verbose = False )[ 0 ] / 1E9 * 2 if thop else 0 # FLOPs t = time_sync () for _ in range ( 10 ): m ( x . copy () if c else x ) dt . append (( time_sync () - t ) * 100 ) if m == self . model [ 0 ]: LOGGER . info ( f \" { 'time (ms)' : >10s } { 'GFLOPs' : >10s } { 'params' : >10s } module\" ) LOGGER . info ( f ' { dt [ - 1 ] : 10.2f } { o : 10.2f } { m . np : 10.0f } { m . type } ' ) if c : LOGGER . info ( f \" { sum ( dt ) : 10.2f } { '-' : >10s } { '-' : >10s } Total\" ) # initialize biases into Detect(), cf is class frequency def _initialize_biases ( self , cf = None ): # https://arxiv.org/abs/1708.02002 section 3.3 # cf = flow.bincount(flow.tensor(np.concatenate(dataset.labels, 0)[:, 0]).long(), minlength=nc) + 1. m = self . model [ - 1 ] # Detect() module for mi , s in zip ( m . m , m . stride ): # from b = mi . bias . view ( m . na , - 1 ) . detach () # conv.bias(255) to (3,85) b [:, 4 ] += math . log ( 8 / ( 640 / s ) ** 2 ) # obj (8 objects per 640 image) b [:, 5 :] += math . log ( 0.6 / ( m . nc - 0.999999 )) if cf is None else flow . log ( cf / cf . sum ()) # cls mi . bias = flow . nn . Parameter ( b . view ( - 1 ), requires_grad = True ) # \u6253\u5370\u6a21\u578b\u4e2d\u6700\u540eDetect\u5c42\u7684\u504f\u7f6ebiases\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u4efb\u9009\u54ea\u4e9b\u5c42biases\u4fe1\u606f) def _print_biases ( self ): \"\"\" \u6253\u5370\u6a21\u578b\u4e2d\u6700\u540eDetect\u6a21\u5757\u91cc\u9762\u7684\u5377\u79ef\u5c42\u7684\u504f\u7f6ebiases\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u4efb\u9009\u54ea\u4e9b\u5c42biases\u4fe1\u606f) \"\"\" m = self . model [ - 1 ] # Detect() module for mi in m . m : # from b = mi . bias . detach () . view ( m . na , - 1 ) . T # conv.bias(255) to (3,85) LOGGER . info ( ( ' %6g Conv2d.bias:' + ' %10.3g ' * 6 ) % ( mi . weight . shape [ 1 ], * b [: 5 ] . mean ( 1 ) . tolist (), b [ 5 :] . mean ())) def _print_weights ( self ): \"\"\" \u6253\u5370\u6a21\u578b\u4e2dBottleneck\u5c42\u7684\u6743\u91cd\u53c2\u6570weights\u4fe1\u606f(\u4e5f\u53ef\u4ee5\u4efb\u9009\u54ea\u4e9b\u5c42weights\u4fe1\u606f) \"\"\" for m in self . model . modules (): if type ( m ) is Bottleneck : LOGGER . info ( ' %10.3g ' % ( m . w . detach () . sigmoid () * 2 )) # shortcut weights # fuse()\u662f\u7528\u6765\u8fdb\u884cconv\u548cbn\u5c42\u5408\u5e76\uff0c\u4e3a\u4e86\u63d0\u901f\u6a21\u578b\u63a8\u7406\u901f\u5ea6\u3002 def fuse ( self ): # fuse model Conv2d() + BatchNorm2d() layers \"\"\"\u7528\u5728detect.py\u3001val.py fuse model Conv2d() + BatchNorm2d() layers \u8c03\u7528oneflow_utils.py\u4e2d\u7684fuse_conv_and_bn\u51fd\u6570\u548ccommon.py\u4e2dConv\u6a21\u5757\u7684fuseforward\u51fd\u6570 \"\"\" LOGGER . info ( 'Fusing layers... ' ) for m in self . model . modules (): # \u5982\u679c\u5f53\u524d\u5c42\u662f\u5377\u79ef\u5c42Conv\u4e14\u6709bn\u7ed3\u6784, \u90a3\u4e48\u5c31\u8c03\u7528fuse_conv_and_bn\u51fd\u6570\u8bb2conv\u548cbn\u8fdb\u884c\u878d\u5408, \u52a0\u901f\u63a8\u7406 if isinstance ( m , ( Conv , DWConv )) and hasattr ( m , 'bn' ): m . conv = fuse_conv_and_bn ( m . conv , m . bn ) # update conv delattr ( m , 'bn' ) # remove batchnorm \u79fb\u9664bn remove batchnorm m . forward = m . forward_fuse # update forward \u66f4\u65b0\u524d\u5411\u4f20\u64ad update forward (\u53cd\u5411\u4f20\u64ad\u4e0d\u7528\u7ba1, \u56e0\u4e3a\u8fd9\u79cd\u63a8\u7406\u53ea\u7528\u5728\u63a8\u7406\u9636\u6bb5) self . info () # \u6253\u5370conv+bn\u878d\u5408\u540e\u7684\u6a21\u578b\u4fe1\u606f return self # \u6253\u5370\u6a21\u578b\u7ed3\u6784\u4fe1\u606f \u5728\u5f53\u524d\u7c7b__init__\u51fd\u6570\u7ed3\u5c3e\u5904\u6709\u8c03\u7528 def info ( self , verbose = False , img_size = 640 ): # print model information model_info ( self , verbose , img_size ) def _apply ( self , fn ): # Apply to(), cpu(), cuda(), half() to model tensors that are not parameters or registered buffers self = super () . _apply ( fn ) m = self . model [ - 1 ] # Detect() if isinstance ( m , Detect ): m . stride = fn ( m . stride ) m . grid = list ( map ( fn , m . grid )) if isinstance ( m . anchor_grid , list ): m . anchor_grid = list ( map ( fn , m . anchor_grid )) return self","title":"Model \u7c7b\u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#detect","text":"class Detect ( nn . Module ): \"\"\" Detect\u6a21\u5757\u662f\u7528\u6765\u6784\u5efaDetect\u5c42\u7684\uff0c\u5c06\u8f93\u5165feature map \u901a\u8fc7\u4e00\u4e2a\u5377\u79ef\u64cd\u4f5c\u548c\u516c\u5f0f\u8ba1\u7b97\u5230\u6211\u4eec\u60f3\u8981\u7684shape, \u4e3a\u540e\u9762\u7684\u8ba1\u7b97\u635f\u5931\u6216\u8005NMS\u540e\u5904\u7406\u4f5c\u51c6\u5907 \"\"\" stride = None # strides computed during build onnx_dynamic = False # ONNX export parameter export = False # export mode def __init__ ( self , nc = 80 , anchors = (), ch = (), inplace = True ): # detection layer super () . __init__ () # nc:\u5206\u7c7b\u6570\u91cf self . nc = nc # number of classes # no:\u6bcf\u4e2aanchor\u7684\u8f93\u51fa\u6570 self . no = nc + 5 # number of outputs per anchor # nl:\u9884\u6d4b\u5c42\u6570\uff0c\u6b64\u6b21\u4e3a3 self . nl = len ( anchors ) # number of detection layers # na:anchors\u7684\u6570\u91cf\uff0c\u6b64\u6b21\u4e3a3 self . na = len ( anchors [ 0 ]) // 2 # number of anchors # grid:\u683c\u5b50\u5750\u6807\u7cfb\uff0c\u5de6\u4e0a\u89d2\u4e3a(1,1),\u53f3\u4e0b\u89d2\u4e3a(input.w/stride,input.h/stride) self . grid = [ flow . zeros ( 1 )] * self . nl # init grid self . anchor_grid = [ flow . zeros ( 1 )] * self . nl # init anchor grid # \u5199\u5165\u7f13\u5b58\u4e2d\uff0c\u5e76\u547d\u540d\u4e3aanchors self . register_buffer ( 'anchors' , flow . tensor ( anchors ) . float () . view ( self . nl , - 1 , 2 )) # shape(nl,na,2) # \u5c06\u8f93\u51fa\u901a\u8fc7\u5377\u79ef\u5230 self.no * self.na \u7684\u901a\u9053\uff0c\u8fbe\u5230\u5168\u8fde\u63a5\u7684\u4f5c\u7528 self . m = nn . ModuleList ( nn . Conv2d ( x , self . no * self . na , 1 ) for x in ch ) # output conv self . inplace = inplace # use inplace ops (e.g. slice assignment) def forward ( self , x ): z = [] # inference output for i in range ( self . nl ): x [ i ] = self . m [ i ]( x [ i ]) # conv bs , _ , ny , nx = x [ i ] . shape # x(bs,255,20,20) to x(bs,3,20,20,85) x [ i ] = x [ i ] . view ( bs , self . na , self . no , ny , nx ) . permute ( 0 , 1 , 3 , 4 , 2 ) . contiguous () if not self . training : # inference if self . onnx_dynamic or self . grid [ i ] . shape [ 2 : 4 ] != x [ i ] . shape [ 2 : 4 ]: # \u5411\u524d\u4f20\u64ad\u65f6\u9700\u8981\u5c06\u76f8\u5bf9\u5750\u6807\u8f6c\u6362\u5230grid\u7edd\u5bf9\u5750\u6807\u7cfb\u4e2d self . grid [ i ], self . anchor_grid [ i ] = self . _make_grid ( nx , ny , i ) y = x [ i ] . sigmoid () if self . inplace : y [ ... , 0 : 2 ] = ( y [ ... , 0 : 2 ] * 2 + self . grid [ i ]) * self . stride [ i ] # xy y [ ... , 2 : 4 ] = ( y [ ... , 2 : 4 ] * 2 ) ** 2 * self . anchor_grid [ i ] # wh else : # for YOLOv5 on AWS Inferentia https://github.com/ultralytics/yolov5/pull/2953 xy , wh , conf = y . split (( 2 , 2 , self . nc + 1 ), 4 ) # y.tensor_split((2, 4, 5), 4) xy = ( xy * 2 + self . grid [ i ]) * self . stride [ i ] # xy wh = ( wh * 2 ) ** 2 * self . anchor_grid [ i ] # wh y = flow . cat (( xy , wh , conf ), 4 ) z . append ( y . view ( bs , - 1 , self . no )) return x if self . training else ( flow . cat ( z , 1 ),) if self . export else ( flow . cat ( z , 1 ), x ) # \u76f8\u5bf9\u5750\u6807\u8f6c\u6362\u5230grid\u7edd\u5bf9\u5750\u6807\u7cfb def _make_grid ( self , nx = 20 , ny = 20 , i = 0 ): d = self . anchors [ i ] . device t = self . anchors [ i ] . dtype shape = 1 , self . na , ny , nx , 2 # grid shape y , x = flow . arange ( ny , device = d , dtype = t ), flow . arange ( nx , device = d , dtype = t ) yv , xv = flow . meshgrid ( y , x , indexing = \"ij\" ) grid = flow . stack (( xv , yv ), 2 ) . expand ( shape ) - 0.5 # add grid offset, i.e. y = 2.0 * x - 0.5 anchor_grid = ( self . anchors [ i ] * self . stride [ i ]) . view (( 1 , self . na , 1 , 1 , 2 )) . expand ( shape ) return grid , anchor_grid","title":"Detect\u7c7b\u89e3\u8bfb"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#_4","text":"\u88682.1 yolov5s.yaml \u89e3\u6790\u8868 \u5c42\u6570 form moudule arguments input output 0 -1 Conv [3, 32, 6, 2, 2] [3, 640, 640] [32, 320, 320] 1 -1 Conv [32, 64, 3, 2] [32, 320, 320] [64, 160, 160] 2 -1 C3 [64, 64, 1] [64, 160, 160] [64, 160, 160] 3 -1 Conv [64, 128, 3, 2] [64, 160, 160] [128, 80, 80] 4 -1 C3 [128, 128, 2] [128, 80, 80] [128, 80, 80] 5 -1 Conv [128, 256, 3, 2] [128, 80, 80] [256, 40, 40] 6 -1 C3 [256, 256, 3] [256, 40, 40] [256, 40, 40] 7 -1 Conv [256, 512, 3, 2] [256, 40, 40] [512, 20, 20] 8 -1 C3 [512, 512, 1] [512, 20, 20] [512, 20, 20] 9 -1 SPPF [512, 512, 5] [512, 20, 20] [512, 20, 20] 10 -1 Conv [512, 256, 1, 1] [512, 20, 20] [256, 20, 20] 11 -1 Upsample [None, 2, 'nearest'] [256, 20, 20] [256, 40, 40] 12 [-1, 6] Concat [1] [1, 256, 40, 40],[1, 256, 40, 40] [512, 40, 40] 13 -1 C3 [512, 256, 1, False] [512, 40, 40] [256, 40, 40] 14 -1 Conv [256, 128, 1, 1] [256, 40, 40] [128, 40, 40] 15 -1 Upsample [None, 2, 'nearest'] [128, 40, 40] [128, 80, 80] 16 [-1, 4] Concat [1] [1, 128, 80, 80],[1, 128, 80, 80] [256, 80, 80] 17 -1 C3 [256, 128, 1, False] [256, 80, 80] [128, 80, 80] 18 -1 Conv [128, 128, 3, 2] [128, 80, 80] [128, 40, 40] 19 [-1, 14] Concat [1] [1, 128, 40, 40],[1, 128, 40, 40] [256, 40, 40] 20 -1 C3 [256, 256, 1, False] [256, 40, 40] [256, 40, 40] 21 -1 Conv [256, 256, 3, 2] [256, 40, 40] [256, 20, 20] 22 [-1, 10] Concat [1] [1, 256, 20, 20],[1, 256, 20, 20] [512, 20, 20] 23 -1 C3 [512, 512, 1, False] [512, 20, 20] [512, 20, 20] 24 [17, 20, 23] Detect [80, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]] [1, 128, 80, 80],[1, 256, 40, 40],[1, 512, 20, 20] [1, 3, 80, 80, 85],[1, 3, 40, 40, 85],[1, 3, 20, 20, 85]","title":"\u9644\u4ef6"},{"location":"tutorials/01_chapter/yolov5_network_structure_analysis.html#_5","text":"https://zhuanlan.zhihu.com/p/436891962?ivk_sa=1025922q https://zhuanlan.zhihu.com/p/110204563 https://www.it610.com/article/1550621248474648576.htm","title":"\u53c2\u8003\u6587\u7ae0:"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html","text":"\u5f15\u8a00 \u672c\u6587\u4e3b\u8981\u4ece\u4ecb\u7ecdyolo\u6570\u636e\u96c6\u7684\u683c\u5f0f\uff0c\u518d\u5230\u5982\u4f55\u8fdb\u884c\u6570\u636e\u96c6\u5236\u4f5c\u4ece\u800c\u80fd\u83b7\u5f97\u66f4\u597d\u7684\u8bad\u7ec3\u7ed3\u679c\u8fdb\u884c\u6982\u8ff0\u3002 \u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3 1.\u521b\u5efadataset.yaml COCO128\u662f\u5b98\u65b9\u7ed9\u7684\u4e00\u4e2a\u5c0f\u7684\u6570\u636e\u96c6 \u7531 COCO \u6570\u636e\u96c6\u524d128\u5f20\u56fe\u7247\u7ec4\u6210\u3002 \u8fd9128\u5e45\u56fe\u50cf\u7528\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\uff0c\u4ee5\u9a8c\u8bc1\u6211\u4eec\u7684\u8bad\u7ec3\u662f\u5426\u80fd\u591f\u8fc7\u6b63\u5e38\u8fdb\u884c\u3002 coco128.yaml \u3002 \u6570\u636e\u96c6\u914d\u7f6e\u6587\u4ef6 coco128.yaml \u5b9a\u4e49\u4e86\u5982\u4e0b\u7684\u914d\u7f6e\u9009\u9879\uff1a # train and val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/] # \u8bad\u7ec3\u548c\u9a8c\u8bc1\u56fe\u50cf\u7684\u8def\u5f84\u76f8\u540c train: ../coco128/images/train2017/ val: ../coco128/images/train2017/ # number of classes nc: 80 # \u7c7b\u522b\u6570 # class names \u7c7b\u540d\u5217\u8868 names: ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'] # Download script/URL (optional) \u7528\u4e8e\u81ea\u52a8\u4e0b\u8f7d\u7684\u53ef\u9009\u4e0b\u8f7d\u547d\u4ee4/URL \u3002 download: https://ultralytics.com/assets/coco128.zip \u6ce8\u610f\uff1a\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7684\u8bdd\u6309\u81ea\u5df1\u9700\u6c42\u4fee\u6539\u8fd9\u4e2ayaml\u6587\u4ef6\u3002\u4e3b\u8981\u4fee\u6539\u4ee5\u4e0b\u4e24\u70b9\u3002 1. \u4fee\u6539\u8bad\u7ec3\u548c\u9a8c\u8bc1\u56fe\u50cf\u7684\u8def\u5f84\u4e3a\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u8def\u5f84 2. \u4fee\u6539\u7c7b\u522b\u6570\u548c\u7c7b\u540d\u5217\u8868 2.\u521b\u5efa Labels \u4f7f\u7528\u5de5\u5177\u4f8b\u5982 CVAT , makesense.ai , Labelbox \uff0clabelimg(\u5728\u672c\u7ae0\u5982\u4f55\u5236\u4f5c\u6570\u636e\u96c6\u4e2d\u4ecb\u7ecdlabelimg\u5de5\u5177\u4f7f\u7528) \u7b49\uff0c\u5728\u4f60\u81ea\u5df1\u7684\u6570\u636e\u96c6\u63d0\u4f9b\u7684\u56fe\u7247\u4e0a\u505a\u76ee\u6807\u6846\u7684\u6807\u6ce8\uff0c\u5c06\u6807\u6ce8\u4fe1\u606f\u5bfc\u51fa\u4e3a\u4e00\u4e2atxt\u540e\u7f00\u7ed3\u5c3e\u7684\u6587\u4ef6\u3002\uff08\u5982\u679c\u56fe\u50cf\u4e2d\u6ca1\u6709\u5bf9\u8c61\uff0c\u5219\u4e0d\u9700\u8981*.txt\u6587\u4ef6\uff09\u3002 *.txt\u6587\u4ef6\u89c4\u8303\u5982\u4e0b\u6240\u793a: - \u6bcf\u4e00\u884c \u4e00\u4e2a\u5bf9\u8c61\u3002 - \u6bcf\u4e00\u884c\u662f class x_center y_center width height \u683c\u5f0f\u3002 - \u6846\u5750\u6807\u5fc5\u987b\u91c7\u7528\u6807\u51c6\u5316xywh\u683c\u5f0f\uff08\u4ece0\u52301\uff09\u3002\u5982\u679c\u6846\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5219\u5c06x_center\u548cwidth\u9664\u4ee5\u56fe\u50cf\u5bbd\u5ea6\uff0c\u5c06y_centre\u548cheight\u9664\u4ee5\u56fe\u50cf\u9ad8\u5ea6\u3002 - \u7c7b\u53f7\u4e3a\u96f6\u7d22\u5f15\u7684\u7f16\u53f7\uff08\u4ece0\u5f00\u59cb\u8ba1\u6570\uff09\u3002 \u8fd9\u91cc\u5047\u8bbe\u4ee5coco\u6570\u636e\u96c6\u7684\u76ee\u6807\u7c7b\u522b\u7ea6\u5b9a\u6765\u6807\u6ce8 \u4e0e\u4e0a\u8ff0\u56fe\u50cf\u76f8\u5bf9\u5e94\u7684\u6807\u7b7e\u6587\u4ef6\u5305\u542b2\u4e2a\u4eba\uff08class 0\uff09\u548c \u4e00\u4e2a\u9886\u5e26\uff08class 27\uff09\uff1a 3.\u76ee\u5f55\u7ed3\u6784 \u6839\u636e\u4e0b\u9762\u7684\u793a\u4f8b\u7ec4\u7ec7\u8bad\u7ec3\u96c6\u5408\u9a8c\u8bc1\u96c6\u7684\u56fe\u7247\u548c\u6807\u7b7e \u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684 /coco128 \u662f\u4f4d\u4e8e /yolov5 \u76ee\u5f55\u9644\u8fd1\u3002YOLOv5\u901a\u8fc7\u5c06\u6bcf\u4e2a\u56fe\u50cf\u8def\u5f84 xx/images/xx.jpg \u66ff\u6362\u4e3a xx/labels/xx.txt \u6765\u81ea\u52a8\u5b9a\u4f4d\u6bcf\u4e2a\u56fe\u50cf\u7684\u6807\u7b7e\u3002\u4f8b\u5982\uff1a dataset / images / im0 . jpg # image dataset / labels / im0 . txt # label \u5236\u4f5c\u6570\u636e\u96c6 \u6570\u636e\u96c6\u6807\u6ce8\u5de5\u5177 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd labelimg: \u662f\u4e00\u79cd\u77e9\u5f62\u6807\u6ce8\u5de5\u5177\uff0c\u5e38\u7528\u4e8e\u76ee\u6807\u8bc6\u522b\u548c\u76ee\u6807\u68c0\u6d4b,\u53ef\u76f4\u63a5\u751f\u6210yolo\u8bfb\u53d6\u7684txt\u6807\u7b7e\u683c\u5f0f\uff0c\u4f46\u5176\u53ea\u80fd\u8fdb\u884c\u77e9\u5f62\u6846\u6807\u6ce8\u3002(\u5f53\u7136\u4e5f\u53ef\u4ee5\u9009\u7528\u5176\u5b83\u7684\u5de5\u5177\u8fdb\u884c\u6807\u6ce8\u5e76\u4e14\u7f51\u4e0a\u90fd\u6709\u5927\u91cf\u5173\u4e8e\u6807\u6ce8\u5de5\u5177\u7684\u6559\u7a0b\u3002) \u9996\u5148labelimg\u7684\u5b89\u88c5\u5341\u5206\u7b80\u5355\uff0c\u76f4\u63a5\u4f7f\u7528cmd\u4e2d\u7684pip\u8fdb\u884c\u5b89\u88c5\uff0c\u5728cmd\u4e2d\u8f93\u5165\u547d\u4ee4\u884c\uff1a pip install labelimg \u5b89\u88c5\u540e\u76f4\u63a5\u8f93\u5165\u547d\u4ee4\uff1a labelimg \u5373\u53ef\u6253\u5f00\u8fd0\u884c\uff1a \u4e00\u4e2a\u597d\u7684\u6570\u636e\u96c6 \u6bcf\u4e2a\u7c7b\u7684\u56fe\u50cf\u3002 >= 1500 \u5f20\u56fe\u7247\u3002 \u6bcf\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u2265 \u5efa\u8bae\u6bcf\u4e2a\u7c7b10000\u4e2a\u5b9e\u4f8b\uff08\u6807\u8bb0\u5bf9\u8c61\uff09 \u56fe\u7247\u5f62\u8c61\u591a\u6837\u3002\u5fc5\u987b\u4ee3\u8868\u5df2\u90e8\u7f72\u7684\u73af\u5883\u3002\u5bf9\u4e8e\u73b0\u5b9e\u4e16\u754c\u7684\u4f7f\u7528\u6848\u4f8b\uff0c\u6211\u4eec\u63a8\u8350\u6765\u81ea\u4e00\u5929\u4e2d\u4e0d\u540c\u65f6\u95f4\u3001\u4e0d\u540c\u5b63\u8282\u3001\u4e0d\u540c\u5929\u6c14\u3001\u4e0d\u540c\u7167\u660e\u3001\u4e0d\u540c\u89d2\u5ea6\u3001\u4e0d\u540c\u6765\u6e90\uff08\u5728\u7ebf\u91c7\u96c6\u3001\u672c\u5730\u91c7\u96c6\u3001\u4e0d\u540c\u6444\u50cf\u673a\uff09\u7b49\u7684\u56fe\u50cf\u3002 \u6807\u7b7e\u4e00\u81f4\u6027\u3002\u5fc5\u987b\u6807\u8bb0\u6240\u6709\u56fe\u50cf\u4e2d\u6240\u6709\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u3002\u90e8\u5206\u6807\u8bb0\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002 \u6807\u7b7e\u51c6\u786e\u6027\u3002 \u6807\u7b7e\u5fc5\u987b\u7d27\u5bc6\u5730\u5305\u56f4\u6bcf\u4e2a\u5bf9\u8c61\u3002\u5bf9\u8c61\u4e0e\u5176\u8fb9\u754c\u6846\u4e4b\u95f4\u4e0d\u5e94\u5b58\u5728\u4efb\u4f55\u7a7a\u95f4\u3002\u4efb\u4f55\u5bf9\u8c61\u90fd\u4e0d\u5e94\u7f3a\u5c11\u6807\u7b7e\u3002 \u6807\u7b7e\u9a8c\u8bc1\u3002\u67e5\u770btrain_batch*.jpg \u5728 \u8bad\u7ec3\u5f00\u59cb\u9a8c\u8bc1\u6807\u7b7e\u662f\u5426\u6b63\u786e\uff0c\u5373\u53c2\u89c1 mosaic\u3002 \u80cc\u666f\u56fe\u50cf\u3002\u80cc\u666f\u56fe\u50cf\u662f\u6ca1\u6709\u6dfb\u52a0\u5230\u6570\u636e\u96c6\u4ee5\u51cf\u5c11 False Positives\uff08FP\uff09\u7684\u5bf9\u8c61\u7684\u56fe\u50cf\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u5927\u7ea60-10%\u7684\u80cc\u666f\u56fe\u50cf\u6765\u5e2e\u52a9\u51cf\u5c11FPs\uff08COCO\u67091000\u4e2a\u80cc\u666f\u56fe\u50cf\u4f9b\u53c2\u8003\uff0c\u5360\u603b\u6570\u76841%\uff09\u3002\u80cc\u666f\u56fe\u50cf\u4e0d\u9700\u8981\u6807\u7b7e\u3002 lnstances per category \u6bcf\u4e2a\u7c7b\u522b\u7684\u60c5\u51b5 Categories per image \u6bcf\u5e45\u56fe\u50cf\u7c7b\u522b (a) lnstances per image \u6bcf\u5e45\u56fe\u50cf\u7684\u5185\u5bb9 (b) Number of categories vs. number of instances \u7c7b\u522b\u6570\u76ee vs \u5b9e\u4f8b\u6570\u76ee (c) lnstance size \u5e72\u6270\u5927\u5c0f (d) Number of categories \u7c7b\u522b\u6570 (e) Percent of image size \u56fe\u50cf\u5927\u5c0f\u767e\u5206\u6bd4 \u53c2\u8003\u6587\u7ae0 https://github.com/ultralytics/yolov5/wiki/Tips-for-Best-Training-Results https://docs.ultralytics.com/tutorials/train-custom-datasets/#weights-biases-logging-new","title":"\u5982\u4f55\u51c6\u5907yolov5\u6a21\u578b\u8bad\u7ec3\u6570\u636e"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#_1","text":"\u672c\u6587\u4e3b\u8981\u4ece\u4ecb\u7ecdyolo\u6570\u636e\u96c6\u7684\u683c\u5f0f\uff0c\u518d\u5230\u5982\u4f55\u8fdb\u884c\u6570\u636e\u96c6\u5236\u4f5c\u4ece\u800c\u80fd\u83b7\u5f97\u66f4\u597d\u7684\u8bad\u7ec3\u7ed3\u679c\u8fdb\u884c\u6982\u8ff0\u3002","title":"\u5f15\u8a00"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#_2","text":"","title":"\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#1datasetyaml","text":"COCO128\u662f\u5b98\u65b9\u7ed9\u7684\u4e00\u4e2a\u5c0f\u7684\u6570\u636e\u96c6 \u7531 COCO \u6570\u636e\u96c6\u524d128\u5f20\u56fe\u7247\u7ec4\u6210\u3002 \u8fd9128\u5e45\u56fe\u50cf\u7528\u4e8e\u8bad\u7ec3\u548c\u9a8c\u8bc1\uff0c\u4ee5\u9a8c\u8bc1\u6211\u4eec\u7684\u8bad\u7ec3\u662f\u5426\u80fd\u591f\u8fc7\u6b63\u5e38\u8fdb\u884c\u3002 coco128.yaml \u3002 \u6570\u636e\u96c6\u914d\u7f6e\u6587\u4ef6 coco128.yaml \u5b9a\u4e49\u4e86\u5982\u4e0b\u7684\u914d\u7f6e\u9009\u9879\uff1a # train and val data as 1) directory: path/images/, 2) file: path/images.txt, or 3) list: [path1/images/, path2/images/] # \u8bad\u7ec3\u548c\u9a8c\u8bc1\u56fe\u50cf\u7684\u8def\u5f84\u76f8\u540c train: ../coco128/images/train2017/ val: ../coco128/images/train2017/ # number of classes nc: 80 # \u7c7b\u522b\u6570 # class names \u7c7b\u540d\u5217\u8868 names: ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'] # Download script/URL (optional) \u7528\u4e8e\u81ea\u52a8\u4e0b\u8f7d\u7684\u53ef\u9009\u4e0b\u8f7d\u547d\u4ee4/URL \u3002 download: https://ultralytics.com/assets/coco128.zip \u6ce8\u610f\uff1a\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7684\u8bdd\u6309\u81ea\u5df1\u9700\u6c42\u4fee\u6539\u8fd9\u4e2ayaml\u6587\u4ef6\u3002\u4e3b\u8981\u4fee\u6539\u4ee5\u4e0b\u4e24\u70b9\u3002 1. \u4fee\u6539\u8bad\u7ec3\u548c\u9a8c\u8bc1\u56fe\u50cf\u7684\u8def\u5f84\u4e3a\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u8def\u5f84 2. \u4fee\u6539\u7c7b\u522b\u6570\u548c\u7c7b\u540d\u5217\u8868","title":"1.\u521b\u5efadataset.yaml"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#2-labels","text":"\u4f7f\u7528\u5de5\u5177\u4f8b\u5982 CVAT , makesense.ai , Labelbox \uff0clabelimg(\u5728\u672c\u7ae0\u5982\u4f55\u5236\u4f5c\u6570\u636e\u96c6\u4e2d\u4ecb\u7ecdlabelimg\u5de5\u5177\u4f7f\u7528) \u7b49\uff0c\u5728\u4f60\u81ea\u5df1\u7684\u6570\u636e\u96c6\u63d0\u4f9b\u7684\u56fe\u7247\u4e0a\u505a\u76ee\u6807\u6846\u7684\u6807\u6ce8\uff0c\u5c06\u6807\u6ce8\u4fe1\u606f\u5bfc\u51fa\u4e3a\u4e00\u4e2atxt\u540e\u7f00\u7ed3\u5c3e\u7684\u6587\u4ef6\u3002\uff08\u5982\u679c\u56fe\u50cf\u4e2d\u6ca1\u6709\u5bf9\u8c61\uff0c\u5219\u4e0d\u9700\u8981*.txt\u6587\u4ef6\uff09\u3002 *.txt\u6587\u4ef6\u89c4\u8303\u5982\u4e0b\u6240\u793a: - \u6bcf\u4e00\u884c \u4e00\u4e2a\u5bf9\u8c61\u3002 - \u6bcf\u4e00\u884c\u662f class x_center y_center width height \u683c\u5f0f\u3002 - \u6846\u5750\u6807\u5fc5\u987b\u91c7\u7528\u6807\u51c6\u5316xywh\u683c\u5f0f\uff08\u4ece0\u52301\uff09\u3002\u5982\u679c\u6846\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\uff0c\u5219\u5c06x_center\u548cwidth\u9664\u4ee5\u56fe\u50cf\u5bbd\u5ea6\uff0c\u5c06y_centre\u548cheight\u9664\u4ee5\u56fe\u50cf\u9ad8\u5ea6\u3002 - \u7c7b\u53f7\u4e3a\u96f6\u7d22\u5f15\u7684\u7f16\u53f7\uff08\u4ece0\u5f00\u59cb\u8ba1\u6570\uff09\u3002 \u8fd9\u91cc\u5047\u8bbe\u4ee5coco\u6570\u636e\u96c6\u7684\u76ee\u6807\u7c7b\u522b\u7ea6\u5b9a\u6765\u6807\u6ce8 \u4e0e\u4e0a\u8ff0\u56fe\u50cf\u76f8\u5bf9\u5e94\u7684\u6807\u7b7e\u6587\u4ef6\u5305\u542b2\u4e2a\u4eba\uff08class 0\uff09\u548c \u4e00\u4e2a\u9886\u5e26\uff08class 27\uff09\uff1a","title":"2.\u521b\u5efa Labels"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#3","text":"\u6839\u636e\u4e0b\u9762\u7684\u793a\u4f8b\u7ec4\u7ec7\u8bad\u7ec3\u96c6\u5408\u9a8c\u8bc1\u96c6\u7684\u56fe\u7247\u548c\u6807\u7b7e \u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684 /coco128 \u662f\u4f4d\u4e8e /yolov5 \u76ee\u5f55\u9644\u8fd1\u3002YOLOv5\u901a\u8fc7\u5c06\u6bcf\u4e2a\u56fe\u50cf\u8def\u5f84 xx/images/xx.jpg \u66ff\u6362\u4e3a xx/labels/xx.txt \u6765\u81ea\u52a8\u5b9a\u4f4d\u6bcf\u4e2a\u56fe\u50cf\u7684\u6807\u7b7e\u3002\u4f8b\u5982\uff1a dataset / images / im0 . jpg # image dataset / labels / im0 . txt # label","title":"3.\u76ee\u5f55\u7ed3\u6784"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#_3","text":"","title":"\u5236\u4f5c\u6570\u636e\u96c6"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#_4","text":"\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd labelimg: \u662f\u4e00\u79cd\u77e9\u5f62\u6807\u6ce8\u5de5\u5177\uff0c\u5e38\u7528\u4e8e\u76ee\u6807\u8bc6\u522b\u548c\u76ee\u6807\u68c0\u6d4b,\u53ef\u76f4\u63a5\u751f\u6210yolo\u8bfb\u53d6\u7684txt\u6807\u7b7e\u683c\u5f0f\uff0c\u4f46\u5176\u53ea\u80fd\u8fdb\u884c\u77e9\u5f62\u6846\u6807\u6ce8\u3002(\u5f53\u7136\u4e5f\u53ef\u4ee5\u9009\u7528\u5176\u5b83\u7684\u5de5\u5177\u8fdb\u884c\u6807\u6ce8\u5e76\u4e14\u7f51\u4e0a\u90fd\u6709\u5927\u91cf\u5173\u4e8e\u6807\u6ce8\u5de5\u5177\u7684\u6559\u7a0b\u3002) \u9996\u5148labelimg\u7684\u5b89\u88c5\u5341\u5206\u7b80\u5355\uff0c\u76f4\u63a5\u4f7f\u7528cmd\u4e2d\u7684pip\u8fdb\u884c\u5b89\u88c5\uff0c\u5728cmd\u4e2d\u8f93\u5165\u547d\u4ee4\u884c\uff1a pip install labelimg \u5b89\u88c5\u540e\u76f4\u63a5\u8f93\u5165\u547d\u4ee4\uff1a labelimg \u5373\u53ef\u6253\u5f00\u8fd0\u884c\uff1a","title":"\u6570\u636e\u96c6\u6807\u6ce8\u5de5\u5177"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#_5","text":"\u6bcf\u4e2a\u7c7b\u7684\u56fe\u50cf\u3002 >= 1500 \u5f20\u56fe\u7247\u3002 \u6bcf\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\u2265 \u5efa\u8bae\u6bcf\u4e2a\u7c7b10000\u4e2a\u5b9e\u4f8b\uff08\u6807\u8bb0\u5bf9\u8c61\uff09 \u56fe\u7247\u5f62\u8c61\u591a\u6837\u3002\u5fc5\u987b\u4ee3\u8868\u5df2\u90e8\u7f72\u7684\u73af\u5883\u3002\u5bf9\u4e8e\u73b0\u5b9e\u4e16\u754c\u7684\u4f7f\u7528\u6848\u4f8b\uff0c\u6211\u4eec\u63a8\u8350\u6765\u81ea\u4e00\u5929\u4e2d\u4e0d\u540c\u65f6\u95f4\u3001\u4e0d\u540c\u5b63\u8282\u3001\u4e0d\u540c\u5929\u6c14\u3001\u4e0d\u540c\u7167\u660e\u3001\u4e0d\u540c\u89d2\u5ea6\u3001\u4e0d\u540c\u6765\u6e90\uff08\u5728\u7ebf\u91c7\u96c6\u3001\u672c\u5730\u91c7\u96c6\u3001\u4e0d\u540c\u6444\u50cf\u673a\uff09\u7b49\u7684\u56fe\u50cf\u3002 \u6807\u7b7e\u4e00\u81f4\u6027\u3002\u5fc5\u987b\u6807\u8bb0\u6240\u6709\u56fe\u50cf\u4e2d\u6240\u6709\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u3002\u90e8\u5206\u6807\u8bb0\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002 \u6807\u7b7e\u51c6\u786e\u6027\u3002 \u6807\u7b7e\u5fc5\u987b\u7d27\u5bc6\u5730\u5305\u56f4\u6bcf\u4e2a\u5bf9\u8c61\u3002\u5bf9\u8c61\u4e0e\u5176\u8fb9\u754c\u6846\u4e4b\u95f4\u4e0d\u5e94\u5b58\u5728\u4efb\u4f55\u7a7a\u95f4\u3002\u4efb\u4f55\u5bf9\u8c61\u90fd\u4e0d\u5e94\u7f3a\u5c11\u6807\u7b7e\u3002 \u6807\u7b7e\u9a8c\u8bc1\u3002\u67e5\u770btrain_batch*.jpg \u5728 \u8bad\u7ec3\u5f00\u59cb\u9a8c\u8bc1\u6807\u7b7e\u662f\u5426\u6b63\u786e\uff0c\u5373\u53c2\u89c1 mosaic\u3002 \u80cc\u666f\u56fe\u50cf\u3002\u80cc\u666f\u56fe\u50cf\u662f\u6ca1\u6709\u6dfb\u52a0\u5230\u6570\u636e\u96c6\u4ee5\u51cf\u5c11 False Positives\uff08FP\uff09\u7684\u5bf9\u8c61\u7684\u56fe\u50cf\u3002\u6211\u4eec\u5efa\u8bae\u4f7f\u7528\u5927\u7ea60-10%\u7684\u80cc\u666f\u56fe\u50cf\u6765\u5e2e\u52a9\u51cf\u5c11FPs\uff08COCO\u67091000\u4e2a\u80cc\u666f\u56fe\u50cf\u4f9b\u53c2\u8003\uff0c\u5360\u603b\u6570\u76841%\uff09\u3002\u80cc\u666f\u56fe\u50cf\u4e0d\u9700\u8981\u6807\u7b7e\u3002 lnstances per category \u6bcf\u4e2a\u7c7b\u522b\u7684\u60c5\u51b5 Categories per image \u6bcf\u5e45\u56fe\u50cf\u7c7b\u522b (a) lnstances per image \u6bcf\u5e45\u56fe\u50cf\u7684\u5185\u5bb9 (b) Number of categories vs. number of instances \u7c7b\u522b\u6570\u76ee vs \u5b9e\u4f8b\u6570\u76ee (c) lnstance size \u5e72\u6270\u5927\u5c0f (d) Number of categories \u7c7b\u522b\u6570 (e) Percent of image size \u56fe\u50cf\u5927\u5c0f\u767e\u5206\u6bd4","title":"\u4e00\u4e2a\u597d\u7684\u6570\u636e\u96c6"},{"location":"tutorials/03_chapter/how_to_prepare_yolov5_training_data.html#_6","text":"https://github.com/ultralytics/yolov5/wiki/Tips-for-Best-Training-Results https://docs.ultralytics.com/tutorials/train-custom-datasets/#weights-biases-logging-new","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html","text":"\u6458\u8981 \u6765\u6e90:https://github.com/Zzh-tju/DIoU/blob/master/README.md#introduction \u8fb9\u754c\u6846\u56de\u5f52\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u5173\u952e\u6b65\u9aa4 \uff0c\u5728\u73b0\u6709\u65b9\u6cd5\u4e2d\uff0c\u867d\u7136 \\(\\ell_n\\) -norm loss \u88ab\u5e7f\u6cdb\u7528\u4e8e\u8fb9\u754c\u6846\u56de\u5f52\uff0c\u4f46\u5b83\u4e0d\u662f\u9488\u5bf9\u8bc4\u4f30\u6307\u6807\u91cf\u8eab\u5b9a\u5236\u7684\uff0c\u5373 Intersection over Union (IoU)\u3002\u6700\u8fd1\uff0c\u5df2\u7ecf\u63d0\u51fa\u4e86 IoU \u635f\u5931\u548cgeneralized IoU (GIoU) Loss\u4f5c\u4e3a\u8bc4\u4f30IoU\u7684\u6307\u6807 \uff0c\u4f46\u4ecd\u7136\u5b58\u5728\u6536\u655b\u901f\u5ea6\u6162\u548c\u56de\u5f52\u4e0d\u51c6\u786e\u7684\u95ee\u9898\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7ed3\u5408\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u4e4b\u95f4\u7684\u5f52\u4e00\u5316\u8ddd\u79bb\u6765\u63d0\u51fa\u8ddd\u79bb-IoU (DIoU) Loss\uff0c\u5b83\u5728\u8bad\u7ec3\u4e2d\u7684\u6536\u655b\u901f\u5ea6\u6bd4 IoU \u548c GIoU Loss\u5feb\u5f97\u591a\u3002 \u6b64\u5916\uff0c\u672c\u6587\u603b\u7ed3\u4e86\u8fb9\u754c\u6846\u56de\u5f52\u4e2d\u7684\u4e09\u4e2a\u51e0\u4f55\u56e0\u7d20\uff0c\u5373 \u91cd\u53e0\u9762\u79ef\uff08overlap area\uff09\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb\uff08central point distance\uff09\u548c\u9ad8\u5bbd\u6bd4\uff08aspect ratio\uff09 \uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u63d0\u51fa\u4e86\u5b8c\u5168 \\(IoU (CIoU)\\) \u635f\u5931\uff0c\u4ece\u800c\u4fc3\u8fdb\u4e86\u66f4\u5feb\u7684\u6536\u655b\u548c\u66f4\u4f18\u7684\u6027\u80fd\u3002\u901a\u8fc7\u5c06 \\(DIoU \u548c CIoU \u635f\u5931\\) \u7ed3\u5408\u5230\u6700\u5148\u8fdb\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\uff0c\u4f8b\u5982 YOLO v3\u3001SSD \u548c Faster RCNN\uff0c\u6211\u4eec\u4e0d\u4ec5\u5728 IoU \u6307\u6807\u65b9\u9762\u800c\u4e14\u5728 GIoU \u6307\u6807\u65b9\u9762\u90fd\u83b7\u5f97\u4e86\u663e\u7740\u7684\u6027\u80fd\u63d0\u5347\u3002\u6b64\u5916\uff0cDIoU \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7528\u4e8e\u975e\u6700\u5927\u6291\u5236\uff08NMS\uff09\u4f5c\u4e3a\u6807\u51c6\uff0c\u8fdb\u4e00\u6b65\u4fc3\u8fdb\u6027\u80fd\u63d0\u5347\u3002 \u6ce8\u91ca:\u8fd9\u91ccIOU\u6307\u6807\u65b9\u9762\u548cGIOU\u6307\u6807\u65b9\u9762\u6307\u7684\u662f\u5728\uff1a\u76ee\u6807\u68c0\u6d4b\u7cbe\u5ea6\u6d4b\u91cf(mAP\u503c),IOU\u635f\u5931\u8ba1\u7b97\u7a33\u5b9a\u6027\u7b49\u4e00\u4e9b\u65b9\u9762\u3002 \u76ee\u6807\u68c0\u6d4b\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u4e2d\u7684\u5173\u952e\u95ee\u9898\u4e4b\u4e00 \uff0c\u51e0\u5341 \u5e74\u6765\u4e00\u76f4\u53d7\u5230\u4e86\u5e7f\u6cdb\u7684\u7814\u7a76\u5173\u6ce8 (Redmon et al. 2016; Redmon and Farhadi 2018; Ren et al. 2015; He et al. 2017; Yang et al. 2018; Wang et al. 2019; 2018). \u901a\u5e38\uff0c\u73b0\u6709\u7684\u76ee\u6807\u68c0\u6d4b\u65b9\u6cd5\u53ef\u4ee5\u5206\u4e3a\uff1a - \u5355\u9636\u6bb5-\u68c0\u6d4b\uff0c\u5982YOLO\u7cfb\u5217 (Redmon et al. 2016; Red- mon and Farhadi 2017; 2018) \u548cSSD (Liu et al. 2016; Fu et al. 2017), - \u4e24\u9636\u6bb5\u68c0\u6d4b\uff0c\u5982 R-CNN\u7cfb\u5217\u68c0\u6d4b (Girshick et al. 2014; Girshick 2015; Ren et al. 2015; He et al. 2017), - \u751a\u81f3\u662f\u591a\u9636\u6bb5\u7684\u68c0\u6d4b, \u50cfCascade R-CNN (Cai and Vasconcelos 2018). \u5c3d\u7ba1\u5b58\u5728\u8fd9\u4e9b\u4e0d \u540c\u7684\u68c0\u6d4b\u6846\u67b6\uff0c\u4f46\u8fb9\u754c\u6846\u56de\u5f52\u9884\u6d4b\u4e00\u4e2a\u77e9\u5f62\u6846\u6765\u5b9a\u4f4d\u76ee\u6807\u5bf9\u8c61\u4ecd\u7136\u662f\u5176\u4e2d\u5173\u952e\u6b65\u9aa4\u3002 \u524d\u8a00 \u672c\u6587\u4e3b\u8981\u662f\u7ed3\u5408\u8bba\u6587 Distance-IoU Loss: Faster and Better Learning for Bounding Box Regression \u8fdb\u884c\u5bf9iou\u7684\u89e3\u6790\u5b66\u4e60\u3002 IOU IOU\u4ecb\u7ecd Intersection over Union (IoU) \u5728\u6307\u6807\u8bc4\u4f30\u6982\u8ff0\u7684\u5c0f\u8282\u6709\u4ecb\u7ecd\u8fc7IOU,\u5df2\u7ecf\u5bf9IOU\u6709\u4e86\u521d\u6b65\u7684\u8ba4\u8bc6(\u5176\u5b9e\u5728yolov5\u9879\u76ee\u4e2d\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u4f7f\u7528\uff0c\u800c\u662f\u7528\u7684\u540e\u9762\u4ecb\u7ecd\u7684CIOU ) \u8ba1\u7b97\u516c\u5f0f\uff1a \\(\\Large{I o U=\\frac{\\left|B \\cap B^{g t}\\right|}{\\left|B \\cup B^{g t}\\right|} }\\) (1) \\(B^{g t}=\\left(x^{g t}, y^{g t}, w^{g t}, h^{g t}\\right)\\) \u662f\u771f\u5b9e\u56de\u5f52\u6846(gt:ground-truth), \\(B=(x, y, w, h)\\) \u662f\u9884\u6d4b\u56de\u5f52\u6846\u3002 IOU loss \u8ba1\u7b97\u516c\u5f0f: \\(\\Large\\mathcal{L}_{I o U}=1-\\frac{\\left|B \\cap B^{g t}\\right|}{\\left|B \\cup B^{g t}\\right|}\\) (2) IOU Loss \u4f18\u7f3a\u70b9\u5206\u6790 \u6709\u660e\u663e\u7684\u7f3a\u9677 IoU loss\u53ea\u5728\u8fb9\u754c\u6846\u6709\u91cd\u53e0\u65f6\u624d\u80fd\u5de5\u4f5c, \u5bf9\u4e8e\u4e0d\u91cd \u53e0\u7684\u60c5\u51b5\u4e0d\u4f1a\u63d0\u4f9b\u4efb\u4f55\u79fb\u52a8 ( \u79fb\u52a8\u4ee3\u8868:\u9884\u6d4b\u6846\u671d\u7740\u76ee\u6807\u6846\u91cd\u53e0\u7684\u65b9\u5411\u79fb\u52a8 ) \u68af\u5ea6\u3002( \u79fb\u52a8\u68af\u5ea6,\u5373\u65e0\u6cd5\u8861\u91cf\u5b8c\u5168\u4e0d\u76f8\u4ea4\u7684\u4e24\u4e2a\u6846\u6240\u4ea7\u751f\u7684\u7684\u635f\u5931\uff08iou\u56fa\u5b9a\u4e3a0\uff09\uff0c\u548c\u4e24\u4e2a\u4e0d\u540c\u5f62\u72b6\u7684\u9884\u6d4b\u6846\u53ef\u80fd\u4ea7\u751f\u76f8\u540c\u7684loss\uff08\u76f8\u540c\u7684iou\uff09\u5206\u522b\u5982\u4e0b\u56fe\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u6240\u793a\u3002 ) GIOU GIOU\u4ecb\u7ecd GIOU\u7684\u8bbe\u8ba1\u521d\u8877\u5c31\u662f\u60f3\u89e3\u51b3IOU Loss\u5b58\u5728\u7684\u95ee\u9898\uff08\u9884\u6d4b\u6846\u4e0e\u771f\u5b9e\u6846\u4e0d\u76f8\u4ea4\u65f6iou\u6052\u5b9a\u4e3a0\uff09\uff0c\u8bbe\u8ba1\u4e86\u4e00\u5957Generalized Intersection over Union Loss\u3002\u5728IOU\u7684\u57fa\u7840\u4e0a\uff0cGIOU\u8fd8\u9700\u8981\u627e\u5230\u9884\u6d4b\u6846\u548c\u771f\u5b9e\u6846\u7684\u6700\u5c0f\u5916\u63a5\u77e9\u5f62\uff0c\u7136\u540e\u6c42\u51fa\u6700\u5c0f\u5916\u63a5\u77e9\u5f62\u51cf\u53bb\u4e24\u4e2a\u9884\u6d4b\u6846union\u7684\u9762\u79ef\uff0c\u5177\u4f53\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a GIOU loss \u8ba1\u7b97\u516c\u5f0f : \\(\\large\\mathcal{L}_{G I o U}=1-I o U+\\frac{\\left|C-B \\cup B^{g t}\\right|}{|C|}\\) (3) \u5176\u4e2d \\(C\\) \u662f\u8986\u76d6 \\(B\\) \u548c \\(B^{g t}\\) \u7684\u6700\u5c0f\u65b9\u6846 ,\u7531\u4e8e\u5f15\u5165\u4e86 \\(C\\) \uff0c\u5728\u4e0d\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\uff0c\u9884\u6d4b\u6846\u4e5f\u4f1a\u5411\u76ee\u6807\u6846\u79fb\u52a8\u3002 GIOU \u4f18\u7f3a\u70b9\u5206\u6790 GIOU Loss\u89e3\u51b3\u4e86IOU Loss\u5728\u4e0d\u76f8\u4ea4\u60c5\u51b5\u7684\u95ee\u9898\uff0c\u5728\u6240\u6709\u6027\u80fd\u6307\u6807\u4e2d\u90fd\u53ef\u4ee5\u4f5c\u4e3aIoU\u7684\u9002\u5f53\u66ff\u4ee3\u54c1\uff0c\u5728\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u80fd\u591f\u5f97\u5230\u66f4\u9ad8\u7684\u51c6\u786e\u7387\u3002 \u7f3a\u70b9\uff1a\u867d\u7136GIoU\u53ef\u4ee5\u7f13\u89e3\u91cd\u53e0\u60c5\u51b5\u4e0b\u7684\u68af\u5ea6\u6d88\u5931\u95ee\u9898,\u4f46\u5b83\u4ecd\u6709\u4e00\u4e9b\u5c40\u9650\u6027\u3002 ( \u5373\u65e0\u6cd5\u8861\u91cf\u6709\u5305\u542b\u5173\u7cfb\u65f6\u7684\u6846\u56de\u5f52\u635f\u5931\uff0c\u5982\u4e0b\u56fe\uff0c\u4e09\u4e2a\u56de\u5f52\u6846\u5177\u6709\u76f8\u540c\u7684GIOU Loss\uff0c\u4f46\u662f\u663e\u7136\u7b2c\u4e09\u4e2a\u6846\u7684\u56de\u5f52\u6548\u679c\u66f4\u597d\u3002 ) IOU & GIOU \u5206\u6790 \u9996\u5148\uff0c\u5728\u672c\u6587\u4e0a\u90e8\u5206\u6211\u4eec\u5206\u6790\u4e86\u5173\u4e8e\u539f\u59cb\u7684IoU\u635f\u5931\u548cGIoU \u635f\u5931\u7684\u5c40\u9650\u6027\u3002\u4e0b\u9762\u5c06\u901a\u8fc7\u6a21\u62df\u5b9e\u9a8c\u7ed3\u679c\u5bf9\u8fb9\u754c\u6846\u56de\u5f52\u7684\u8fc7\u7a0b\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u89e3\u6790\u3002(\u8865\u5145\u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u6a21\u578b\u5b9e\u9a8c? \u56e0\u4e3a\u4ec5\u4ec5\u4ece\u68c0\u6d4b\u7ed3\u679c\u6765\u5206\u6790\u8fb9\u754c\u6846\u56de\u5f52\u7684\u8fc7\u7a0b\u5f88\u96be\uff0c\u56e0\u4e3a\u5728\u4e0d\u53d7\u63a7\u5236\u7684\u57fa\u51c6\u4e2d\u7684\u56de\u5f52\u60c5\u51b5\u5f80\u5f80\u4e0d\u5168\u9762\u6bd4\u5982\uff1a\u4e0d\u540c\u7684\u8ddd\u79bb(distances),\u4e0d\u540c\u7684\u5c3a\u5ea6(scales)\u548c\u4e0d\u540c\u7684\u957f\u5bbd\u6bd4(aspect ratios)\u3002 \u76f8\u53cd\uff0c\u8fdb\u884c\u6a21\u62df\u5b9e\u9a8c\uff0c\u5728\u5b9e\u9a8c\u4e2d\u7efc\u5408\u8003\u8651\u56de\u5f52\u60c5\u51b5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5206\u6790\u7ed9\u5b9a\u635f\u5931\u51fd\u6570\u7684\u95ee\u9898\u3002) \u6a21\u62df\u5b9e\u9a8c \u5728\u6a21\u62df\u5b9e\u9a8c\u4e2d, \u6211\u4eec\u8bd5\u56fe\u901a\u8fc7\u8ddd\u79bb(distances), \u5c3a\u5ea6 (scales)\u548c\u957f\u5bbd\u6bd4(aspect ratios)\u6765\u8986\u76d6\u8fb9\u754c\u6846\u4e4b\u95f4\u7684\u5927\u90e8\u5206\u5173\u7cfb\uff0c\u5982\u56fe3(a).\u6240\u793a\u3002\u7279\u522b\u662f, \u6211\u4eec\u9009\u62e97\u4e2a\u5355\u4f4d\u6846 (\u5373\u6bcf\u4e2a\u6846\u7684\u9762\u79ef\u4e3a 1) \uff0c\u5177\u6709\u4e0d\u540c\u7684\u957f\u5bbd\u6bd4 (\u5373 \\(1: 4\u30011: 3\u30011: 2\u30011:1\u30012: 1\u30013:1 \u548c 4: 1\\) ) \u4f5c\u4e3a\u76ee \u6807\u6846\u3002\u5728\u4e0d\u5931\u4e00\u822c\u6027\u7684\u60c5\u51b5\u4e0b\uff0c7\u4e2a\u76ee\u6807\u6846\u7684\u4e2d\u5fc3\u70b9\u88ab\u56fa\u5b9a\u5728 \\((10,10)\\) \u3002\u951a\u6846\u5747\u5300\u5730\u5206\u6563\u57285000\u4e2a\u70b9\u4e0a\u3002 \\(({i})\\) \u8ddd\u79bb: \u5728\u4ee5\u534a\u5f84\u4e3a 3 \u7684 \\((10\u300110)\\) \u4e3a\u4e2d\u5fc3\u7684\u5706\u5f62\u533a\u57df\u5185, \u5747\u5300\u9009\u62e95000\u4e2a\u70b9, \u653e\u7f6e7\u4e2a\u5c3a\u5ea6\u30017\u4e2a\u957f\u5bbd\u6bd4\u7684\u951a \u6846\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u91cd\u53e0\u548c\u4e0d\u91cd\u53e0\u7684\u65b9\u6846\u90fd\u88ab\u5305\u62ec\u3002 \\(({ii})\\) \u5c3a\u5ea6:\u5bf9\u4e8e\u6bcf\u4e2a\u70b9, \u951a\u6846\u7684\u9762\u79ef\u5206\u522b\u8bbe\u7f6e\u4e3a \\(0.5 \u3001 0.67 \u3001 0.75 \u3001 1 \u3001 1.33 \u3001 1.5 \u548c 2\\) \u3002 \\(({iii})\\) \u957f\u5bbd\u6bd4: \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u70b9\u548c\u5c3a\u5ea6, \u91c7\u7528 7 \u4e2a\u957f\u5bbd\u6bd4, \u5373\u4e0e\u76ee\u6807\u6846\u9075\u5faa\u76f8\u540c\u7684\u8bbe\u7f6e (\u5373 \\(1: 4 \u3001 1: 3 \u3001 1: 2 \u3001 1: 1 \u3001 2: 1 \u3001 3: 1 \u548c 4: 1\\) ) \u3002\u6240\u6709 \\(5000 \\times 7 \\times 7\\) \u951a\u7bb1\u90fd\u5bf9\u5e94\u5728\u6bcf\u4e2a\u76ee\u6807\u6846\u3002\u7efc \u4e0a\u6240\u8ff0\uff0c\u603b\u5171\u6709 \\(1,715,000 =7 \\times 7 \\times 7 \\times 5,000\\) \u4e2a\u56de\u5f52\u6848\u4f8b\u3002 \u56fe3: \u4eff\u771f\u5b9e\u9a8c: (a) \u901a\u8fc7\u8003\u8651\u4e0d\u540c\u7684\u8ddd\u79bb\u3001\u5c3a\u5ea6\u548c\u957f\u5bbd\u6bd4, \u91c7\u7528\u4e86171.5\u4e07\u4e2a\u56de\u5f52\u6848\u4f8b\u3002(b)\u56de\u5f52\u8bef\u5dee\u548c\uff08\u5373: \\(\\sum_{n} \\mathbf{E}(t, n)\\) ) \u8fed\u4ee3\u6b21\u6570\u4e3a \\(\\mathrm{t}\\) \u65f6\u4e0d\u540c\u635f\u5931\u51fd\u6570\u7684\u66f2\u7ebf\u3002 \u7136\u540e\u901a\u8fc7\u7ed9\u5b9a\u635f\u5931\u51fd\u6570 \\(\\mathcal{L}\\) , \u6211\u4eec\u53ef\u4ee5\u7528\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5 \u6765\u6a21\u62df\u6bcf\u79cd\u60c5\u51b5\u4e0b\u7684\u8fb9\u754c\u6846\u56de\u5f52\u8fc7\u7a0b\u3002\u5bf9\u4e8e\u9884\u6d4b\u6846 \\(B_{i}\\) , \u5f53\u524d\u7684\u9884\u6d4b\u53ef\u4ee5\u901a\u8fc7: \\(B_{i}^{t}=B_{i}^{t-1}+\\eta\\left(2-I o U_{i}^{t-1}\\right) \\nabla B_{i}^{t-1},\\) (4) \u5176\u4e2d \\(B_{i}^{t}\\) \u662f\u8fed\u4ee3 \\(t\\) \u65f6\u7684\u9884\u6d4b\u6846, \\(\\nabla B_{i}^{t-1}\\) \u8868\u793a\u635f\u5931\u7684\u68af\u5ea6 \\(\\mathcal{L} w.r.t. B_{i}\\) \u8fed\u4ee3\u65f6 \\(t-1\\) , \u548c \\(\\eta\\) \u662f\u4e00\u4e2a\u6b65 \u9aa4\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6211\u4eec\u7684\u5b9e\u73b0\u4e2d\uff0c\u68af\u5ea6\u4e58\u4ee5 \\(2-I o U_{1}^{t-1}\\) \u53bb\u52a0\u901f\u6536\u655b\u3002 \u8fb9\u754c\u76d2\u56de\u5f52\u7684\u6027\u80fd\u8bc4\u4f30\u901a\u8fc7\u4f7f\u7528 \\(\\ell_{1} -norm.\\) \u5bf9\u4e8e\u6bcf\u4e2a\u635f\u5931 \u51fd\u6570, \u4eff\u771f\u6a21\u62df\u5b9e\u9a8c\u5f53\u8fbe\u5230\u8fed\u4ee3 \\(T=200\\) \u65f6, \u8bef\u5dee\u66f2\u7ebf\u5982 \\(\u56fe3(b).\\) \u6240\u793a\u3002 IoU \u548c GIoU \u635f\u5931\u7684\u9650\u5236 \u5728\u56fe4\u4e2d\uff0c\u6211\u4eec\u53ef\u89c6\u5316\u8fed\u4ee3T\u65f6\u5bf95000\u4e2a\u5206\u6563\u70b9\u7684\u6700\u7ec8\u56de\u5f52\u8bef\u5dee\u3002 \u4ece\u56fe4(a)\u4e2d\u5f88\u5bb9\u6613\u770b\u51fa\uff0cIoU\u635f\u5931\u53ea\u9002\u7528\u4e8e\u4e0e\u76ee\u6807\u6846\u91cd\u53e0\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u2207B\u603b\u662f0\uff0c\u6ca1\u6709\u91cd\u53e0\u7684\u951a\u6846\u5c06\u4e0d\u4f1a\u79fb\u52a8\u3002\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u60e9\u7f5a\u9879\u89c1\u516c\u5f0f(3), GIoU \u635f\u5931\u80fd\u591f\u66f4\u597d\u7684\u7f13\u89e3\u975e\u91cd\u53e0 \u6848\u4f8b\u7684\u95ee\u9898\uff0c\u5982\u56fe\u6240\u793a4(b), \u4f46GIoU\u7684\u635f\u5931\u663e\u8457\u6269\u5927\u4e86\u76c6\u5730\uff0c\u5373GIoU\u7684\u5de5\u4f5c\u9762\u79ef\u3002\u4f46\u662f\uff0c\u5728\u6c34\u5e73\u65b9\u5411\u548c\u5782\u76f4\u65b9\u5411\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u5f88\u53ef\u80fd\u6709\u5f88\u5927\u7684\u8bef\u5dee\u3002\u8fd9\u662f\u56e0\u4e3aGIoU\u635f\u5931\u4e2d\u7684\u60e9\u7f5a\u9879\u662f\u7528\u6765\u6700\u5c0f\u5316|C\u2212A\u222aB|\uff0c\u4f46\u662fC\u2212A\u222aB\u7684\u9762\u79ef\u901a\u5e38\u5f88\u5c0f\u6216\u4e3a0\uff08\u5f53\u4e24\u4e2a\u76d2\u5b50\u6709\u5305\u542b\u5173\u7cfb\u65f6\uff09\uff0c\u7136\u540eGIoU\u51e0\u4e4e\u9000\u5316\u4e3aIoU\u635f\u5931\u3002\u53ea\u8981\u4ee5\u9002\u5f53\u7684\u5b66\u4e60\u901f\u7387\u8fd0\u884c\u8db3\u591f\u7684\u8fed\u4ee3GIoU \u635f\u5931\u80fd\u6536\u655b\u5230\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u6536\u655b\u901f\u5ea6\u5374\u662f\u975e\u5e38\u6162\u3002\u4ece\u51e0\u4f55\u4e0a\u6765\u8bf4\uff0c\u4ece\u5982\u56fe1\u6240\u793a\u7684\u56de\u5f52\u6b65\u9aa4\u6765\u770b\uff0cGIoU\u5b9e\u9645\u4e0a\u589e\u5927\u4e86\u9884\u6d4b\u7684\u6846\u5927\u5c0f\uff0c\u7528\u6765\u548c\u76ee\u6807\u6846\u91cd\u53e0\uff0c\u7136\u540eIoU\u9879\u7528\u4e8e\u9884\u6d4b\u6846\u4e0e\u76ee\u6807\u6846\u5339\u914d\uff0c\u4ea7\u751f\u975e\u5e38\u7f13\u6162\u7684\u6536\u655b\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5728\u975e\u91cd\u53e0\u60c5\u51b5\u4e0b\uff0cIoU\u635f\u5931\u6536\u655b\u662f\u7cdf\u7cd5\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u800cGIoU\u635f\u5931\u6536\u655b\u901f\u5ea6\u8f83\u6162\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u7684\u6846\u3002\u5f53\u7eb3\u5165\u76ee\u6807\u68c0\u6d4b\u7ba1\u9053\u65f6\uff0cIoU\u548cGIoU\u7684\u635f\u5931\u90fd\u4e0d\u80fd\u4fdd\u8bc1\u56de\u5f52\u7684\u51c6\u786e\u6027\u3002 DIOU & CIOU \u901a\u8fc7\u524d\u9762\u7684IOU\u548cGIOU\u7684\u5206\u6790\u6211\u4eec\u5f88\u81ea\u7136\u4f1a\u95ee\u4ee5\u4e0b\u95ee\u9898\uff1a 1. \u7b2c\u4e00\uff0c\u662f\u5426\u53ef\u4ee5\u76f4\u63a5\u6700\u5c0f\u5316\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u4e4b\u95f4\u7684\u5f52\u4e00\u5316\u8ddd\u79bb\uff0c\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u6536\u655b\uff1f 2. \u7b2c\u4e8c\uff0c\u5f53\u4e0e\u76ee\u6807\u6846\u6709\u91cd\u53e0\u751a\u81f3\u5305\u542b\u65f6\uff0c\u5982\u4f55\u4f7f\u56de\u5f52 \u66f4\u51c6\u786e\u3001\u66f4\u5feb\uff1f DIOU loss Distance-IoU \u635f\u5931\uff1a\u66f4\u5feb\u66f4\u597d\u7684\u8fb9\u754c\u6846\u56de\u5f52\u635f\u5931,\u4e00\u822c\u6765\u8bf4, \\(IoU-based\\) \u635f\u5931\u53ef\u4ee5\u5b9a\u4e49\u4e3a \\(\\mathcal{L}=1-I o U+\\mathcal{R}\\left(B, B^{g t}\\right),\\) (5) \u5176\u4e2d \\(\\large\\mathcal{R}\\left(B, B^{g t}\\right)\\) \u662f \u9884\u6d4b\u6846 B \u548c\u76ee\u6807\u6846 \\(B^{g t}\\) \u7684\u60e9\u7f5a\u9879\u3002 \u901a\u8fc7\u8bbe\u8ba1\u9002\u5f53\u7684\u60e9\u7f5a\u9879, \u5728\u672c\u8282\u4e2d, \u6211\u4eec\u63d0\u51fa\u4e86 DIoU \u635f\u5931\u548cCIoU\u635f\u5931\u6765\u89e3\u7b54\u4e0a\u8ff0\u4e24\u4e2a\u95ee\u9898\u3002 \u4e3a\u4e86\u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898, \u6211\u4eec\u63d0\u51fa\u5c06\u4e24\u4e2a\u8fb9\u754c\u6846\u7684\u4e2d\u5fc3\u70b9 \u4e4b\u95f4\u7684\u6807\u51c6\u5316\u8ddd\u79bb\u6700\u5c0f\u5316\uff0c\u60e9\u7f5a\u9879\u53ef\u4ee5\u5b9a\u4e49\u4e3a \\(\\large\\mathcal{R}_{D I o U}=\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}},\\) (6) \u5176\u4e2d \\(\\mathbf{b}\\) \u548c \\(\\mathbf{b}^{g t}\\) \u5206\u522b\u4ee3\u8868 B \u548c \\(B^{g t}\\) \u7684\u4e2d\u5fc3\u70b9\u3002 \\(\\rho(\\cdot)\\) \u4e3a\u6b27\u6c0f\u8ddd\u79bb, \\(\\mathrm{C}\\) \u662f\u8986\u76d6\u4e24\u4e2a\u76d2\u6846\u7684\u6700\u5c0f\u5c01\u95ed\u6846\u7684\u5bf9\u89d2\u7ebf\u957f\u5ea6\u3002 \\(DIoU\\) \u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a: \\(\\large\\mathcal{L}_{D I o U}=1-I o U+\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}} .\\) (7) \u5982\u56fe5\u6240\u793a, \\(DIoU\\) \u635f\u5931\u7684\u60e9\u7f5a\u9879\u76f4\u63a5\u4f7f\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u6700\u5c0f\u5316, \u800c \\(\\mathrm{GIoU}\\) \u635f\u5931\u7684\u76ee\u7684\u662f\u51cf\u5c11 \\(C-B \\cup B^{g t}\\) \u7684\u9762\u79ef\u3002 IoU\u548cGIoU\u635f\u5931\u6bd4\u8f83 \u63d0\u51fa\u7684DIoU\u635f\u5931 \u7ee7\u627fIoU\u548cGIoU\u635f\u5931\u7684\u4e00\u4e9b\u5c5e\u6027 1. \\(DIoU\u635f\u5931\\) \u5bf9\u56de\u5f52\u95ee\u9898\u7684\u5c3a\u5ea6\u4ecd\u5917\u662f\u4e0d\u53d8\u7684 2. \u4e0e \\(GIoU\u635f\u5931\\) \u7c7b\u4f3c, \\(DIoU\u635f\u5931\\) \u53ef\u4ee5\u5728\u4e0e\u76ee\u6807\u6846\u4e0d\u91cd\u53e0\u65f6\u4e3a\u8fb9\u754c\u6846\u63d0\u4f9b\u79fb\u52a8\u65b9\u5411\u3002 3. \u5f53\u4e24\u4e2a\u8fb9\u754c\u6846\u5b8c\u7f8e\u5339\u914d\u65f6, \\(\\mathcal{L}_{I o U}=\\mathcal{L}_{G I o U}=\\mathcal{L}_{D I o U}=0 .\\) \u5f53\u4e24\u4e2a\u6846\u90fd\u5f88\u8fdc\u65f6, \\(\\mathcal{L}_{G I o U}=\\mathcal{L}_{D I o U} \\rightarrow 2 .\\) \\(DIoU\u635f\u5931\\) \u6bd4 \\(IoU\u635f\u5931\\) \u548c \\(GIoU\u635f\u5931\\) \u6709\u51e0\u4e2a\u4f18\u70b9, \u53ef\u4ee5\u901a\u8fc7\u4eff\u771f\u5b9e\u9a8c\u8fdb\u884c\u8bc4\u4f30\u3002 1. \u5982\u56fe1\u548c\u56fe3\u6240\u793a, \\(DIoU\u635f\u5931\\) \u53ef\u4ee5\u76f4\u63a5\u6700\u5c0f\u5316\u4e24\u4e2a\u6846\u7684\u8ddd\u79bb, \u56e0\u6b64\u6536\u655b\u901f\u5ea6\u6bd4 \\(GIoU\u635f\u5931\\) \u8981\u5feb\u5f97\u591a\u3002 2. \u5bf9\u4e8e\u4e24\u4e2a\u6846\u662f\u5305\u542b\u5173\u7cfb\u7684\u60c5\u51b5( \u56fe2 ), \u6216\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u7684\u60c5\u51b5( \u56fe6 )\u4e0b, \\(DIoU\u635f\u77e2\\) \u53ef\u4ee5\u56de\u5f52\u975e\u5e38\u5feb, \u800c \\(\\mathrm{GIoU}\\) \u635f\u5931\u51e0\u4e4e\u9000\u5316\u4e3a \\(\\mathrm{IoU}\u635f\u5931\\) , \u5373 \\(|C-A \\cup B| \\rightarrow 0 .\\) Complete IoU Loss \u63a5\u7740\u6211\u4eec\u56de\u7b54\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u8fb9\u754c\u6846\u56de\u5f52\u7684\u826f\u597d \u635f\u5931\u5e94\u8be5\u8981\u8003\u8651\u4e09\u4e2a\u91cd\u8981\u7684\u51e0\u4f55\u56e0\u7d20, \u5373 \u91cd\u53e0\u9762\u79ef\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u548c\u957f\u5bbd\u6bd4 \u3002\u901a\u8fc7\u7edf\u4e00\u5750\u6807, \\(IoU\u635f\u5931\\) \u8003\u8651\u4e86\u91cd\u53e0\u533a\u57df, \u800c \\(GIoU\u635f\u5931\\) \u4e25\u91cd\u4f9d\u8d56\u4e8e \\(IoU\u635f\u5931\\) \u3002\u6211\u4eec\u63d0\u51fa\u7684 \\(DIoU\u635f\u5931\\) \u65e8\u5728\u540c\u65f6\u8003\u8651\u8fb9\u754c\u6846\u7684\u91cd\u53e0\u9762\u79ef\u548c\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u3002\u7136\u800c, \u8fb9\u754c\u6846\u7684\u957f\u5bbd\u6bd4\u7684\u4e00\u81f4\u6027\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u51e0\u4f55\u56e0\u7d20\u3002 \u56e0\u6b64\uff0c\u57fa\u4e8e \\(DIoU\u635f\u5931\\) \uff0c\u901a\u8fc7\u6dfb\u52a0\u957f\u5bbd\u6bd4\u7684\u4e00\u81f4\u6027\u6765 \u63d0\u51fa \\(CIoU\u635f\u5931\\) : \\(\\large\\mathcal{R}_{C I o U}=\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}}+\\alpha v,\\) (8) \u5176\u4e2d \\(\\alpha\\) \u662f\u4e00\u4e2a\u6b63\u7684\u6743\u8861\u53c2\u6570, \\(v\\) \u8861\u91cf\u957f\u5bbd\u6bd4\u7684\u4e00\u81f4\u6027\u3002 \\(\\large{v=\\frac{4}{\\pi^{2}}\\left(\\arctan \\frac{w^{g t}}{h^{g t}}-\\arctan \\frac{w}{h}\\right)^{2} .}\\) (9) \u5219\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a: \\(\\large\\mathcal{L}_{C I o U}=1-I o U+\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}}+\\alpha v\\) (10) \\(\\large\\alpha=\\frac{v}{(1-I o U)+v}\\) (11) \u901a\u8fc7\u91cd\u53e0\u9762\u79ef\u56e0\u5b50\u7ed9\u4e88\u66f4\u9ad8\u7684\u4f18\u5148\u56de\u5f52, \u7279\u522b\u662f\u5bf9\u4e8e\u975e\u91cd\u53e0\u60c5\u51b5\u3002 \u6700\u7ec8, \\(CIoU\u635f\u5931\\) \u7684\u4f18\u5316\u4e0e \\(DIoU\u635f\u5931\\) \u7684\u4f18\u5316\u76f8\u540c, \u9664 \u4e86 \\(v w.r.t. w\\) \u7684\u68af\u5ea6\u5e94\u8be5\u6307\u5b9a \\(\\mathrm{w}\\) \u548c \\(h\\) \u3002 \\(\\large\\begin{array}{l} \\frac{\\partial v}{\\partial w}=\\frac{8}{\\pi^{2}}\\left(\\arctan \\frac{w^{g t}}{h^{g t}}-\\arctan \\frac{w}{h}\\right) \\times \\frac{h}{w^{2}+h^{2}}, \\\\ \\frac{\\partial v}{\\partial h}=-\\frac{8}{\\pi^{2}}\\left(\\arctan \\frac{w^{g t}}{h^{g t}}-\\arctan \\frac{w}{h}\\right) \\times \\frac{w}{w^{2}+h^{2}} . \\end{array}\\) (12) \u4e3b\u5bfc\u5668 \\(w^{2}+h^{2}\\) \u901a\u5e38\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c\u5bf9\u4e8e \\(h\\) \u548c \\(w\\) \u7684\u8303 \u56f4\u5728 [0,1] , \u8fd9\u5f88\u53ef\u80fd\u4f1a\u4ea7\u751f\u68af\u5ea6\u7206\u70b8\u3002\u56e0\u6b64\u5728\u6211\u4eec\u7684\u5b9e\u73b0, \u4e3b\u5bfc\u5668 \\(w^{2}+h^{2}\\) \u88ab\u79fb\u9664, \u5c06\u6b65\u957f \\(\\frac{1} {w^{2}+h^{2}}\\) \u66ff\u6362\u4e3a \\(1\\) , \u68af\u5ea6\u65b9\u5411\u4ecd\u7136\u4e0e\u516c\u5f0f(12)\u4e00\u81f4\u3002 NMS(Non-Maximum Suppression) \u4ecb\u7ecd NMS\u662f\u5927\u591a\u6570\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u7684\u6700\u540e\u4e00\u6b65\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u5197\u4f59\u7684\u68c0\u6d4b\u6846\u5f53\u5b83\u4e0e\u6700\u9ad8\u5206\u6846\u7684\u91cd\u53e0\u8d85\u8fc7\u4e00\u4e2a\u9608\u503c\u3002 Soft-NMS (Bodla et al. 2017) \u7528\u8fde\u7eed\u51fd\u6570w.r.t.\u60e9\u7f5a\u76f8\u90bb\u6846\u7684\u68c0\u6d4b\u5206\u6570IoU\uff0c\u4ea7\u751f\u6bd4\u539f\u59cbNMS\u4ea7\u751f\u66f4\u67d4\u548c\u5927\u548c\u66f4\u5f3a\u5927\u7684\u6291\u5236\u3002IoU-Net (Jiang et al. 2018) \u63d0\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u7f51\u7edc\u5206\u652f\u6765\u9884\u6d4b\u5b9a\u4f4d\u7f6e\u4fe1\u5ea6\u6765\u6307\u5bfcNMS\u3002\u6700\u8fd1\uff0c\u81ea\u9002\u5e94NMS\uff08Liu\uff0cHuang\uff0c\u548cWang 2019\uff09\u548cSofter-NMS\uff08He et al. 2019\uff09\u88ab\u63d0\u51fa\u5206\u522b\u7814\u7a76\u9002\u5f53\u7684\u9608\u503c\u7b56\u7565\u548c\u52a0\u6743\u5e73\u5747\u7b56\u7565\u3002 \u5728\u672c\u5de5\u4f5c\u4e2d\uff0c\u7b80\u5355\u5c06DIoU\u4f5c\u4e3a\u539f\u59cbNMS\u7684\u6807\u51c6, \u5728\u6291\u5236\u5197\u4f59\u6846\u65f6\uff0c\u540c\u65f6\u8003\u8651\u8fb9\u754c\u6846\u7684\u91cd\u53e0\u9762\u79ef\u548c\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 DioU-NMS \\(Non-Maximum Suppression using DIoU\\) \u5728\u539f\u59cb\u7684NMS\u4e2d, IoU\u6307\u6807\u7528\u4e8e\u6291\u5236\u5415\u4f59\u7684\u68c0\u6d4b\u6846, \u5176 \u4e2d\u91cd\u53e0\u533a\u57df\u662f\u552f\u4e00\u7684\u56e0\u7d20, \u5bf9\u4e8e\u6709\u906e\u6321\u7684\u60c5\u51b5\uff0c\u5f80\u5f80\u4f1a \u4ea7\u751f\u9519\u8bef\u7684\u6291\u5236\u3002 \u6211\u4eec\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\u5efa\u8bae \\(DIoU\\) \u662f \\(NMS\\) \u7684\u66f4\u597d\u6807\u51c6\uff0c\u56e0\u4e3a\u5728\u6291\u5236\u6807\u51c6\u4e2d\u4e0d\u4ec5\u5e94\u8003\u8651\u91cd\u53e0 \\(DIoU-NMS\\) \u88ab\u6b63\u5f0f\u5b9a\u4e49\u4e3a: \\(s_{i}=\\left\\{\\begin{array}{l} s_{i}, I o U-\\mathcal{R}_{D I o U}\\left(\\mathcal{M}, B_{i}\\right)<\\varepsilon, \\\\ 0, \\quad I o U-\\mathcal{R}_{D I o U}\\left(\\mathcal{M}, B_{i}\\right) \\geq \\varepsilon, \\end{array}\\right.\\) (13) \u5176\u4e2d\u6846 \\(B_{i}\\) \u88ab\u53bb\u9664\u901a\u8fc7\u540c\u65f6\u5230\u8003\u8651 \\(IoU\\) \u548c\u4e24\u4e2a\u6846\u4e2d\u5fc3\u70b9 \u7684\u8ddd\u79bb\u3002 \\(s_{i}\\) \u662f\u5206\u7c7b\u5f97\u5206\u548c \\(\\varepsilon\\) \u662f \\(NMS\\) \u9608\u503c\u3002\u6211\u4eec\u8ba4\u4e3a\u4e24 \u4e2a\u4e2d\u5fc3\u70b9\u8f83\u8fdc\u7684\u6846\u53ef\u80fd\u4f1a\u5b9a\u4f4d\u4e0d\u540c\u7684\u7269\u4f53, \u800c\u4e0d\u5e94\u8be5\u88ab \u5220\u9664\u3002\u6b64\u5916 \\(DIoU-NMS\\) \u662f\u975e\u5e38\u7075\u6d3b, \u4ec5\u4ec5\u662f\u51e0\u884c\u7684\u4ee3 \u7801\u5c31\u53ef\u4ee5\u96c6\u6210\u5230\u4efb\u4f55\u76ee\u6807\u68c0\u6d4b\u7ba1\u9053\u4e2d\u3002 \u5c0f\u7ed3 \u5728\u672c\u6587\u4e2d\uff0c\u4e3b\u8981\u7684\u4ecb\u7ecd\u7528\u4e8e\u8fb9\u754c\u6846\u56de\u5f52\u7684 \\(DIoU\u635f\u5931\\) \u548c \\(CIoU \u635f\u5931\\) \u548c \u7528\u4e8e\u6291\u5236\u5197\u4f59\u68c0\u6d4b\u6846\u7684 \\(DIoU-NMS\u3002\\) \u901a\u8fc7\u76f4\u63a5\u6700\u5c0f\u5316\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u7684\u5f52\u4e00\u5316\u7684\u8ddd\u79bb\uff0c \\(DIoU \u635f\u5931\\) \u53ef\u4ee5\u6bd4 \\(GIoU \u635f\u5931\\) \u5b9e\u73b0\u66f4\u5feb\u7684\u6536\u655b\u3002 \u6b64\u5916 \\(CIoU\u635f\u5931\\) \u8003\u8651\u4e86\u4e09\u4e2a\u51e0\u4f55\u5c5e\u6027(\u5373 \u91cd\u53e0\u533a\u57df\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb \u548c \u957f\u5bbd\u6bd4),\u4fc3\u8fdb\u4e86 \u66f4\u5feb\u7684\u6536\u655b\u548c\u66f4\u4f18\u7684\u6027\u80fd\u3002 \u53c2\u8003\u6587\u7ae0 https://github.com/Zzh-tju/DIoU/blob/master/README.md#introduction IOU: https://arxiv.org/pdf/1608.01471.pdf GIOU: https://giou.stanford.edu/GIoU.pdf DIOU: https://arxiv.org/pdf/1911.08287.pdf","title":"IOU\u6df1\u5165\u89e3\u6790"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#_1","text":"\u6765\u6e90:https://github.com/Zzh-tju/DIoU/blob/master/README.md#introduction \u8fb9\u754c\u6846\u56de\u5f52\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u5173\u952e\u6b65\u9aa4 \uff0c\u5728\u73b0\u6709\u65b9\u6cd5\u4e2d\uff0c\u867d\u7136 \\(\\ell_n\\) -norm loss \u88ab\u5e7f\u6cdb\u7528\u4e8e\u8fb9\u754c\u6846\u56de\u5f52\uff0c\u4f46\u5b83\u4e0d\u662f\u9488\u5bf9\u8bc4\u4f30\u6307\u6807\u91cf\u8eab\u5b9a\u5236\u7684\uff0c\u5373 Intersection over Union (IoU)\u3002\u6700\u8fd1\uff0c\u5df2\u7ecf\u63d0\u51fa\u4e86 IoU \u635f\u5931\u548cgeneralized IoU (GIoU) Loss\u4f5c\u4e3a\u8bc4\u4f30IoU\u7684\u6307\u6807 \uff0c\u4f46\u4ecd\u7136\u5b58\u5728\u6536\u655b\u901f\u5ea6\u6162\u548c\u56de\u5f52\u4e0d\u51c6\u786e\u7684\u95ee\u9898\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u7ed3\u5408\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u4e4b\u95f4\u7684\u5f52\u4e00\u5316\u8ddd\u79bb\u6765\u63d0\u51fa\u8ddd\u79bb-IoU (DIoU) Loss\uff0c\u5b83\u5728\u8bad\u7ec3\u4e2d\u7684\u6536\u655b\u901f\u5ea6\u6bd4 IoU \u548c GIoU Loss\u5feb\u5f97\u591a\u3002 \u6b64\u5916\uff0c\u672c\u6587\u603b\u7ed3\u4e86\u8fb9\u754c\u6846\u56de\u5f52\u4e2d\u7684\u4e09\u4e2a\u51e0\u4f55\u56e0\u7d20\uff0c\u5373 \u91cd\u53e0\u9762\u79ef\uff08overlap area\uff09\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb\uff08central point distance\uff09\u548c\u9ad8\u5bbd\u6bd4\uff08aspect ratio\uff09 \uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u63d0\u51fa\u4e86\u5b8c\u5168 \\(IoU (CIoU)\\) \u635f\u5931\uff0c\u4ece\u800c\u4fc3\u8fdb\u4e86\u66f4\u5feb\u7684\u6536\u655b\u548c\u66f4\u4f18\u7684\u6027\u80fd\u3002\u901a\u8fc7\u5c06 \\(DIoU \u548c CIoU \u635f\u5931\\) \u7ed3\u5408\u5230\u6700\u5148\u8fdb\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\uff0c\u4f8b\u5982 YOLO v3\u3001SSD \u548c Faster RCNN\uff0c\u6211\u4eec\u4e0d\u4ec5\u5728 IoU \u6307\u6807\u65b9\u9762\u800c\u4e14\u5728 GIoU \u6307\u6807\u65b9\u9762\u90fd\u83b7\u5f97\u4e86\u663e\u7740\u7684\u6027\u80fd\u63d0\u5347\u3002\u6b64\u5916\uff0cDIoU \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7528\u4e8e\u975e\u6700\u5927\u6291\u5236\uff08NMS\uff09\u4f5c\u4e3a\u6807\u51c6\uff0c\u8fdb\u4e00\u6b65\u4fc3\u8fdb\u6027\u80fd\u63d0\u5347\u3002 \u6ce8\u91ca:\u8fd9\u91ccIOU\u6307\u6807\u65b9\u9762\u548cGIOU\u6307\u6807\u65b9\u9762\u6307\u7684\u662f\u5728\uff1a\u76ee\u6807\u68c0\u6d4b\u7cbe\u5ea6\u6d4b\u91cf(mAP\u503c),IOU\u635f\u5931\u8ba1\u7b97\u7a33\u5b9a\u6027\u7b49\u4e00\u4e9b\u65b9\u9762\u3002 \u76ee\u6807\u68c0\u6d4b\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u4e2d\u7684\u5173\u952e\u95ee\u9898\u4e4b\u4e00 \uff0c\u51e0\u5341 \u5e74\u6765\u4e00\u76f4\u53d7\u5230\u4e86\u5e7f\u6cdb\u7684\u7814\u7a76\u5173\u6ce8 (Redmon et al. 2016; Redmon and Farhadi 2018; Ren et al. 2015; He et al. 2017; Yang et al. 2018; Wang et al. 2019; 2018). \u901a\u5e38\uff0c\u73b0\u6709\u7684\u76ee\u6807\u68c0\u6d4b\u65b9\u6cd5\u53ef\u4ee5\u5206\u4e3a\uff1a - \u5355\u9636\u6bb5-\u68c0\u6d4b\uff0c\u5982YOLO\u7cfb\u5217 (Redmon et al. 2016; Red- mon and Farhadi 2017; 2018) \u548cSSD (Liu et al. 2016; Fu et al. 2017), - \u4e24\u9636\u6bb5\u68c0\u6d4b\uff0c\u5982 R-CNN\u7cfb\u5217\u68c0\u6d4b (Girshick et al. 2014; Girshick 2015; Ren et al. 2015; He et al. 2017), - \u751a\u81f3\u662f\u591a\u9636\u6bb5\u7684\u68c0\u6d4b, \u50cfCascade R-CNN (Cai and Vasconcelos 2018). \u5c3d\u7ba1\u5b58\u5728\u8fd9\u4e9b\u4e0d \u540c\u7684\u68c0\u6d4b\u6846\u67b6\uff0c\u4f46\u8fb9\u754c\u6846\u56de\u5f52\u9884\u6d4b\u4e00\u4e2a\u77e9\u5f62\u6846\u6765\u5b9a\u4f4d\u76ee\u6807\u5bf9\u8c61\u4ecd\u7136\u662f\u5176\u4e2d\u5173\u952e\u6b65\u9aa4\u3002","title":"\u6458\u8981"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#_2","text":"\u672c\u6587\u4e3b\u8981\u662f\u7ed3\u5408\u8bba\u6587 Distance-IoU Loss: Faster and Better Learning for Bounding Box Regression \u8fdb\u884c\u5bf9iou\u7684\u89e3\u6790\u5b66\u4e60\u3002","title":"\u524d\u8a00"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iou","text":"","title":"IOU"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iou_1","text":"Intersection over Union (IoU) \u5728\u6307\u6807\u8bc4\u4f30\u6982\u8ff0\u7684\u5c0f\u8282\u6709\u4ecb\u7ecd\u8fc7IOU,\u5df2\u7ecf\u5bf9IOU\u6709\u4e86\u521d\u6b65\u7684\u8ba4\u8bc6(\u5176\u5b9e\u5728yolov5\u9879\u76ee\u4e2d\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u4f7f\u7528\uff0c\u800c\u662f\u7528\u7684\u540e\u9762\u4ecb\u7ecd\u7684CIOU ) \u8ba1\u7b97\u516c\u5f0f\uff1a \\(\\Large{I o U=\\frac{\\left|B \\cap B^{g t}\\right|}{\\left|B \\cup B^{g t}\\right|} }\\) (1) \\(B^{g t}=\\left(x^{g t}, y^{g t}, w^{g t}, h^{g t}\\right)\\) \u662f\u771f\u5b9e\u56de\u5f52\u6846(gt:ground-truth), \\(B=(x, y, w, h)\\) \u662f\u9884\u6d4b\u56de\u5f52\u6846\u3002","title":"IOU\u4ecb\u7ecd"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iou-loss","text":"\u8ba1\u7b97\u516c\u5f0f: \\(\\Large\\mathcal{L}_{I o U}=1-\\frac{\\left|B \\cap B^{g t}\\right|}{\\left|B \\cup B^{g t}\\right|}\\) (2)","title":"IOU loss"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iou-loss_1","text":"\u6709\u660e\u663e\u7684\u7f3a\u9677 IoU loss\u53ea\u5728\u8fb9\u754c\u6846\u6709\u91cd\u53e0\u65f6\u624d\u80fd\u5de5\u4f5c, \u5bf9\u4e8e\u4e0d\u91cd \u53e0\u7684\u60c5\u51b5\u4e0d\u4f1a\u63d0\u4f9b\u4efb\u4f55\u79fb\u52a8 ( \u79fb\u52a8\u4ee3\u8868:\u9884\u6d4b\u6846\u671d\u7740\u76ee\u6807\u6846\u91cd\u53e0\u7684\u65b9\u5411\u79fb\u52a8 ) \u68af\u5ea6\u3002( \u79fb\u52a8\u68af\u5ea6,\u5373\u65e0\u6cd5\u8861\u91cf\u5b8c\u5168\u4e0d\u76f8\u4ea4\u7684\u4e24\u4e2a\u6846\u6240\u4ea7\u751f\u7684\u7684\u635f\u5931\uff08iou\u56fa\u5b9a\u4e3a0\uff09\uff0c\u548c\u4e24\u4e2a\u4e0d\u540c\u5f62\u72b6\u7684\u9884\u6d4b\u6846\u53ef\u80fd\u4ea7\u751f\u76f8\u540c\u7684loss\uff08\u76f8\u540c\u7684iou\uff09\u5206\u522b\u5982\u4e0b\u56fe\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u6240\u793a\u3002 )","title":"IOU Loss \u4f18\u7f3a\u70b9\u5206\u6790"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#giou","text":"","title":"GIOU"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#giou_1","text":"GIOU\u7684\u8bbe\u8ba1\u521d\u8877\u5c31\u662f\u60f3\u89e3\u51b3IOU Loss\u5b58\u5728\u7684\u95ee\u9898\uff08\u9884\u6d4b\u6846\u4e0e\u771f\u5b9e\u6846\u4e0d\u76f8\u4ea4\u65f6iou\u6052\u5b9a\u4e3a0\uff09\uff0c\u8bbe\u8ba1\u4e86\u4e00\u5957Generalized Intersection over Union Loss\u3002\u5728IOU\u7684\u57fa\u7840\u4e0a\uff0cGIOU\u8fd8\u9700\u8981\u627e\u5230\u9884\u6d4b\u6846\u548c\u771f\u5b9e\u6846\u7684\u6700\u5c0f\u5916\u63a5\u77e9\u5f62\uff0c\u7136\u540e\u6c42\u51fa\u6700\u5c0f\u5916\u63a5\u77e9\u5f62\u51cf\u53bb\u4e24\u4e2a\u9884\u6d4b\u6846union\u7684\u9762\u79ef\uff0c\u5177\u4f53\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a","title":"GIOU\u4ecb\u7ecd"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#giou-loss","text":"\u8ba1\u7b97\u516c\u5f0f : \\(\\large\\mathcal{L}_{G I o U}=1-I o U+\\frac{\\left|C-B \\cup B^{g t}\\right|}{|C|}\\) (3) \u5176\u4e2d \\(C\\) \u662f\u8986\u76d6 \\(B\\) \u548c \\(B^{g t}\\) \u7684\u6700\u5c0f\u65b9\u6846 ,\u7531\u4e8e\u5f15\u5165\u4e86 \\(C\\) \uff0c\u5728\u4e0d\u91cd\u53e0\u7684\u60c5\u51b5\u4e0b\uff0c\u9884\u6d4b\u6846\u4e5f\u4f1a\u5411\u76ee\u6807\u6846\u79fb\u52a8\u3002","title":"GIOU loss"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#giou_2","text":"GIOU Loss\u89e3\u51b3\u4e86IOU Loss\u5728\u4e0d\u76f8\u4ea4\u60c5\u51b5\u7684\u95ee\u9898\uff0c\u5728\u6240\u6709\u6027\u80fd\u6307\u6807\u4e2d\u90fd\u53ef\u4ee5\u4f5c\u4e3aIoU\u7684\u9002\u5f53\u66ff\u4ee3\u54c1\uff0c\u5728\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\u80fd\u591f\u5f97\u5230\u66f4\u9ad8\u7684\u51c6\u786e\u7387\u3002 \u7f3a\u70b9\uff1a\u867d\u7136GIoU\u53ef\u4ee5\u7f13\u89e3\u91cd\u53e0\u60c5\u51b5\u4e0b\u7684\u68af\u5ea6\u6d88\u5931\u95ee\u9898,\u4f46\u5b83\u4ecd\u6709\u4e00\u4e9b\u5c40\u9650\u6027\u3002 ( \u5373\u65e0\u6cd5\u8861\u91cf\u6709\u5305\u542b\u5173\u7cfb\u65f6\u7684\u6846\u56de\u5f52\u635f\u5931\uff0c\u5982\u4e0b\u56fe\uff0c\u4e09\u4e2a\u56de\u5f52\u6846\u5177\u6709\u76f8\u540c\u7684GIOU Loss\uff0c\u4f46\u662f\u663e\u7136\u7b2c\u4e09\u4e2a\u6846\u7684\u56de\u5f52\u6548\u679c\u66f4\u597d\u3002 )","title":"GIOU \u4f18\u7f3a\u70b9\u5206\u6790"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iou-giou","text":"\u9996\u5148\uff0c\u5728\u672c\u6587\u4e0a\u90e8\u5206\u6211\u4eec\u5206\u6790\u4e86\u5173\u4e8e\u539f\u59cb\u7684IoU\u635f\u5931\u548cGIoU \u635f\u5931\u7684\u5c40\u9650\u6027\u3002\u4e0b\u9762\u5c06\u901a\u8fc7\u6a21\u62df\u5b9e\u9a8c\u7ed3\u679c\u5bf9\u8fb9\u754c\u6846\u56de\u5f52\u7684\u8fc7\u7a0b\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u89e3\u6790\u3002(\u8865\u5145\u8bf4\u660e: \u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c\u6a21\u578b\u5b9e\u9a8c? \u56e0\u4e3a\u4ec5\u4ec5\u4ece\u68c0\u6d4b\u7ed3\u679c\u6765\u5206\u6790\u8fb9\u754c\u6846\u56de\u5f52\u7684\u8fc7\u7a0b\u5f88\u96be\uff0c\u56e0\u4e3a\u5728\u4e0d\u53d7\u63a7\u5236\u7684\u57fa\u51c6\u4e2d\u7684\u56de\u5f52\u60c5\u51b5\u5f80\u5f80\u4e0d\u5168\u9762\u6bd4\u5982\uff1a\u4e0d\u540c\u7684\u8ddd\u79bb(distances),\u4e0d\u540c\u7684\u5c3a\u5ea6(scales)\u548c\u4e0d\u540c\u7684\u957f\u5bbd\u6bd4(aspect ratios)\u3002 \u76f8\u53cd\uff0c\u8fdb\u884c\u6a21\u62df\u5b9e\u9a8c\uff0c\u5728\u5b9e\u9a8c\u4e2d\u7efc\u5408\u8003\u8651\u56de\u5f52\u60c5\u51b5\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5206\u6790\u7ed9\u5b9a\u635f\u5931\u51fd\u6570\u7684\u95ee\u9898\u3002)","title":"IOU &amp; GIOU \u5206\u6790"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#_3","text":"\u5728\u6a21\u62df\u5b9e\u9a8c\u4e2d, \u6211\u4eec\u8bd5\u56fe\u901a\u8fc7\u8ddd\u79bb(distances), \u5c3a\u5ea6 (scales)\u548c\u957f\u5bbd\u6bd4(aspect ratios)\u6765\u8986\u76d6\u8fb9\u754c\u6846\u4e4b\u95f4\u7684\u5927\u90e8\u5206\u5173\u7cfb\uff0c\u5982\u56fe3(a).\u6240\u793a\u3002\u7279\u522b\u662f, \u6211\u4eec\u9009\u62e97\u4e2a\u5355\u4f4d\u6846 (\u5373\u6bcf\u4e2a\u6846\u7684\u9762\u79ef\u4e3a 1) \uff0c\u5177\u6709\u4e0d\u540c\u7684\u957f\u5bbd\u6bd4 (\u5373 \\(1: 4\u30011: 3\u30011: 2\u30011:1\u30012: 1\u30013:1 \u548c 4: 1\\) ) \u4f5c\u4e3a\u76ee \u6807\u6846\u3002\u5728\u4e0d\u5931\u4e00\u822c\u6027\u7684\u60c5\u51b5\u4e0b\uff0c7\u4e2a\u76ee\u6807\u6846\u7684\u4e2d\u5fc3\u70b9\u88ab\u56fa\u5b9a\u5728 \\((10,10)\\) \u3002\u951a\u6846\u5747\u5300\u5730\u5206\u6563\u57285000\u4e2a\u70b9\u4e0a\u3002 \\(({i})\\) \u8ddd\u79bb: \u5728\u4ee5\u534a\u5f84\u4e3a 3 \u7684 \\((10\u300110)\\) \u4e3a\u4e2d\u5fc3\u7684\u5706\u5f62\u533a\u57df\u5185, \u5747\u5300\u9009\u62e95000\u4e2a\u70b9, \u653e\u7f6e7\u4e2a\u5c3a\u5ea6\u30017\u4e2a\u957f\u5bbd\u6bd4\u7684\u951a \u6846\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u91cd\u53e0\u548c\u4e0d\u91cd\u53e0\u7684\u65b9\u6846\u90fd\u88ab\u5305\u62ec\u3002 \\(({ii})\\) \u5c3a\u5ea6:\u5bf9\u4e8e\u6bcf\u4e2a\u70b9, \u951a\u6846\u7684\u9762\u79ef\u5206\u522b\u8bbe\u7f6e\u4e3a \\(0.5 \u3001 0.67 \u3001 0.75 \u3001 1 \u3001 1.33 \u3001 1.5 \u548c 2\\) \u3002 \\(({iii})\\) \u957f\u5bbd\u6bd4: \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u70b9\u548c\u5c3a\u5ea6, \u91c7\u7528 7 \u4e2a\u957f\u5bbd\u6bd4, \u5373\u4e0e\u76ee\u6807\u6846\u9075\u5faa\u76f8\u540c\u7684\u8bbe\u7f6e (\u5373 \\(1: 4 \u3001 1: 3 \u3001 1: 2 \u3001 1: 1 \u3001 2: 1 \u3001 3: 1 \u548c 4: 1\\) ) \u3002\u6240\u6709 \\(5000 \\times 7 \\times 7\\) \u951a\u7bb1\u90fd\u5bf9\u5e94\u5728\u6bcf\u4e2a\u76ee\u6807\u6846\u3002\u7efc \u4e0a\u6240\u8ff0\uff0c\u603b\u5171\u6709 \\(1,715,000 =7 \\times 7 \\times 7 \\times 5,000\\) \u4e2a\u56de\u5f52\u6848\u4f8b\u3002 \u56fe3: \u4eff\u771f\u5b9e\u9a8c: (a) \u901a\u8fc7\u8003\u8651\u4e0d\u540c\u7684\u8ddd\u79bb\u3001\u5c3a\u5ea6\u548c\u957f\u5bbd\u6bd4, \u91c7\u7528\u4e86171.5\u4e07\u4e2a\u56de\u5f52\u6848\u4f8b\u3002(b)\u56de\u5f52\u8bef\u5dee\u548c\uff08\u5373: \\(\\sum_{n} \\mathbf{E}(t, n)\\) ) \u8fed\u4ee3\u6b21\u6570\u4e3a \\(\\mathrm{t}\\) \u65f6\u4e0d\u540c\u635f\u5931\u51fd\u6570\u7684\u66f2\u7ebf\u3002 \u7136\u540e\u901a\u8fc7\u7ed9\u5b9a\u635f\u5931\u51fd\u6570 \\(\\mathcal{L}\\) , \u6211\u4eec\u53ef\u4ee5\u7528\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5 \u6765\u6a21\u62df\u6bcf\u79cd\u60c5\u51b5\u4e0b\u7684\u8fb9\u754c\u6846\u56de\u5f52\u8fc7\u7a0b\u3002\u5bf9\u4e8e\u9884\u6d4b\u6846 \\(B_{i}\\) , \u5f53\u524d\u7684\u9884\u6d4b\u53ef\u4ee5\u901a\u8fc7: \\(B_{i}^{t}=B_{i}^{t-1}+\\eta\\left(2-I o U_{i}^{t-1}\\right) \\nabla B_{i}^{t-1},\\) (4) \u5176\u4e2d \\(B_{i}^{t}\\) \u662f\u8fed\u4ee3 \\(t\\) \u65f6\u7684\u9884\u6d4b\u6846, \\(\\nabla B_{i}^{t-1}\\) \u8868\u793a\u635f\u5931\u7684\u68af\u5ea6 \\(\\mathcal{L} w.r.t. B_{i}\\) \u8fed\u4ee3\u65f6 \\(t-1\\) , \u548c \\(\\eta\\) \u662f\u4e00\u4e2a\u6b65 \u9aa4\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6211\u4eec\u7684\u5b9e\u73b0\u4e2d\uff0c\u68af\u5ea6\u4e58\u4ee5 \\(2-I o U_{1}^{t-1}\\) \u53bb\u52a0\u901f\u6536\u655b\u3002 \u8fb9\u754c\u76d2\u56de\u5f52\u7684\u6027\u80fd\u8bc4\u4f30\u901a\u8fc7\u4f7f\u7528 \\(\\ell_{1} -norm.\\) \u5bf9\u4e8e\u6bcf\u4e2a\u635f\u5931 \u51fd\u6570, \u4eff\u771f\u6a21\u62df\u5b9e\u9a8c\u5f53\u8fbe\u5230\u8fed\u4ee3 \\(T=200\\) \u65f6, \u8bef\u5dee\u66f2\u7ebf\u5982 \\(\u56fe3(b).\\) \u6240\u793a\u3002","title":"\u6a21\u62df\u5b9e\u9a8c"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iou-giou_1","text":"\u5728\u56fe4\u4e2d\uff0c\u6211\u4eec\u53ef\u89c6\u5316\u8fed\u4ee3T\u65f6\u5bf95000\u4e2a\u5206\u6563\u70b9\u7684\u6700\u7ec8\u56de\u5f52\u8bef\u5dee\u3002 \u4ece\u56fe4(a)\u4e2d\u5f88\u5bb9\u6613\u770b\u51fa\uff0cIoU\u635f\u5931\u53ea\u9002\u7528\u4e8e\u4e0e\u76ee\u6807\u6846\u91cd\u53e0\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u2207B\u603b\u662f0\uff0c\u6ca1\u6709\u91cd\u53e0\u7684\u951a\u6846\u5c06\u4e0d\u4f1a\u79fb\u52a8\u3002\u901a\u8fc7\u6dfb\u52a0\u4e00\u4e2a\u60e9\u7f5a\u9879\u89c1\u516c\u5f0f(3), GIoU \u635f\u5931\u80fd\u591f\u66f4\u597d\u7684\u7f13\u89e3\u975e\u91cd\u53e0 \u6848\u4f8b\u7684\u95ee\u9898\uff0c\u5982\u56fe\u6240\u793a4(b), \u4f46GIoU\u7684\u635f\u5931\u663e\u8457\u6269\u5927\u4e86\u76c6\u5730\uff0c\u5373GIoU\u7684\u5de5\u4f5c\u9762\u79ef\u3002\u4f46\u662f\uff0c\u5728\u6c34\u5e73\u65b9\u5411\u548c\u5782\u76f4\u65b9\u5411\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u5f88\u53ef\u80fd\u6709\u5f88\u5927\u7684\u8bef\u5dee\u3002\u8fd9\u662f\u56e0\u4e3aGIoU\u635f\u5931\u4e2d\u7684\u60e9\u7f5a\u9879\u662f\u7528\u6765\u6700\u5c0f\u5316|C\u2212A\u222aB|\uff0c\u4f46\u662fC\u2212A\u222aB\u7684\u9762\u79ef\u901a\u5e38\u5f88\u5c0f\u6216\u4e3a0\uff08\u5f53\u4e24\u4e2a\u76d2\u5b50\u6709\u5305\u542b\u5173\u7cfb\u65f6\uff09\uff0c\u7136\u540eGIoU\u51e0\u4e4e\u9000\u5316\u4e3aIoU\u635f\u5931\u3002\u53ea\u8981\u4ee5\u9002\u5f53\u7684\u5b66\u4e60\u901f\u7387\u8fd0\u884c\u8db3\u591f\u7684\u8fed\u4ee3GIoU \u635f\u5931\u80fd\u6536\u655b\u5230\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u6536\u655b\u901f\u5ea6\u5374\u662f\u975e\u5e38\u6162\u3002\u4ece\u51e0\u4f55\u4e0a\u6765\u8bf4\uff0c\u4ece\u5982\u56fe1\u6240\u793a\u7684\u56de\u5f52\u6b65\u9aa4\u6765\u770b\uff0cGIoU\u5b9e\u9645\u4e0a\u589e\u5927\u4e86\u9884\u6d4b\u7684\u6846\u5927\u5c0f\uff0c\u7528\u6765\u548c\u76ee\u6807\u6846\u91cd\u53e0\uff0c\u7136\u540eIoU\u9879\u7528\u4e8e\u9884\u6d4b\u6846\u4e0e\u76ee\u6807\u6846\u5339\u914d\uff0c\u4ea7\u751f\u975e\u5e38\u7f13\u6162\u7684\u6536\u655b\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5728\u975e\u91cd\u53e0\u60c5\u51b5\u4e0b\uff0cIoU\u635f\u5931\u6536\u655b\u662f\u7cdf\u7cd5\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u800cGIoU\u635f\u5931\u6536\u655b\u901f\u5ea6\u8f83\u6162\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u7684\u6846\u3002\u5f53\u7eb3\u5165\u76ee\u6807\u68c0\u6d4b\u7ba1\u9053\u65f6\uff0cIoU\u548cGIoU\u7684\u635f\u5931\u90fd\u4e0d\u80fd\u4fdd\u8bc1\u56de\u5f52\u7684\u51c6\u786e\u6027\u3002","title":"IoU \u548c GIoU \u635f\u5931\u7684\u9650\u5236"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#diou-ciou","text":"\u901a\u8fc7\u524d\u9762\u7684IOU\u548cGIOU\u7684\u5206\u6790\u6211\u4eec\u5f88\u81ea\u7136\u4f1a\u95ee\u4ee5\u4e0b\u95ee\u9898\uff1a 1. \u7b2c\u4e00\uff0c\u662f\u5426\u53ef\u4ee5\u76f4\u63a5\u6700\u5c0f\u5316\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u4e4b\u95f4\u7684\u5f52\u4e00\u5316\u8ddd\u79bb\uff0c\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u6536\u655b\uff1f 2. \u7b2c\u4e8c\uff0c\u5f53\u4e0e\u76ee\u6807\u6846\u6709\u91cd\u53e0\u751a\u81f3\u5305\u542b\u65f6\uff0c\u5982\u4f55\u4f7f\u56de\u5f52 \u66f4\u51c6\u786e\u3001\u66f4\u5feb\uff1f","title":"DIOU &amp; CIOU"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#diou-loss","text":"Distance-IoU \u635f\u5931\uff1a\u66f4\u5feb\u66f4\u597d\u7684\u8fb9\u754c\u6846\u56de\u5f52\u635f\u5931,\u4e00\u822c\u6765\u8bf4, \\(IoU-based\\) \u635f\u5931\u53ef\u4ee5\u5b9a\u4e49\u4e3a \\(\\mathcal{L}=1-I o U+\\mathcal{R}\\left(B, B^{g t}\\right),\\) (5) \u5176\u4e2d \\(\\large\\mathcal{R}\\left(B, B^{g t}\\right)\\) \u662f \u9884\u6d4b\u6846 B \u548c\u76ee\u6807\u6846 \\(B^{g t}\\) \u7684\u60e9\u7f5a\u9879\u3002 \u901a\u8fc7\u8bbe\u8ba1\u9002\u5f53\u7684\u60e9\u7f5a\u9879, \u5728\u672c\u8282\u4e2d, \u6211\u4eec\u63d0\u51fa\u4e86 DIoU \u635f\u5931\u548cCIoU\u635f\u5931\u6765\u89e3\u7b54\u4e0a\u8ff0\u4e24\u4e2a\u95ee\u9898\u3002 \u4e3a\u4e86\u56de\u7b54\u7b2c\u4e00\u4e2a\u95ee\u9898, \u6211\u4eec\u63d0\u51fa\u5c06\u4e24\u4e2a\u8fb9\u754c\u6846\u7684\u4e2d\u5fc3\u70b9 \u4e4b\u95f4\u7684\u6807\u51c6\u5316\u8ddd\u79bb\u6700\u5c0f\u5316\uff0c\u60e9\u7f5a\u9879\u53ef\u4ee5\u5b9a\u4e49\u4e3a \\(\\large\\mathcal{R}_{D I o U}=\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}},\\) (6) \u5176\u4e2d \\(\\mathbf{b}\\) \u548c \\(\\mathbf{b}^{g t}\\) \u5206\u522b\u4ee3\u8868 B \u548c \\(B^{g t}\\) \u7684\u4e2d\u5fc3\u70b9\u3002 \\(\\rho(\\cdot)\\) \u4e3a\u6b27\u6c0f\u8ddd\u79bb, \\(\\mathrm{C}\\) \u662f\u8986\u76d6\u4e24\u4e2a\u76d2\u6846\u7684\u6700\u5c0f\u5c01\u95ed\u6846\u7684\u5bf9\u89d2\u7ebf\u957f\u5ea6\u3002 \\(DIoU\\) \u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a: \\(\\large\\mathcal{L}_{D I o U}=1-I o U+\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}} .\\) (7) \u5982\u56fe5\u6240\u793a, \\(DIoU\\) \u635f\u5931\u7684\u60e9\u7f5a\u9879\u76f4\u63a5\u4f7f\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u6700\u5c0f\u5316, \u800c \\(\\mathrm{GIoU}\\) \u635f\u5931\u7684\u76ee\u7684\u662f\u51cf\u5c11 \\(C-B \\cup B^{g t}\\) \u7684\u9762\u79ef\u3002","title":"DIOU loss"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#iougiou","text":"\u63d0\u51fa\u7684DIoU\u635f\u5931 \u7ee7\u627fIoU\u548cGIoU\u635f\u5931\u7684\u4e00\u4e9b\u5c5e\u6027 1. \\(DIoU\u635f\u5931\\) \u5bf9\u56de\u5f52\u95ee\u9898\u7684\u5c3a\u5ea6\u4ecd\u5917\u662f\u4e0d\u53d8\u7684 2. \u4e0e \\(GIoU\u635f\u5931\\) \u7c7b\u4f3c, \\(DIoU\u635f\u5931\\) \u53ef\u4ee5\u5728\u4e0e\u76ee\u6807\u6846\u4e0d\u91cd\u53e0\u65f6\u4e3a\u8fb9\u754c\u6846\u63d0\u4f9b\u79fb\u52a8\u65b9\u5411\u3002 3. \u5f53\u4e24\u4e2a\u8fb9\u754c\u6846\u5b8c\u7f8e\u5339\u914d\u65f6, \\(\\mathcal{L}_{I o U}=\\mathcal{L}_{G I o U}=\\mathcal{L}_{D I o U}=0 .\\) \u5f53\u4e24\u4e2a\u6846\u90fd\u5f88\u8fdc\u65f6, \\(\\mathcal{L}_{G I o U}=\\mathcal{L}_{D I o U} \\rightarrow 2 .\\) \\(DIoU\u635f\u5931\\) \u6bd4 \\(IoU\u635f\u5931\\) \u548c \\(GIoU\u635f\u5931\\) \u6709\u51e0\u4e2a\u4f18\u70b9, \u53ef\u4ee5\u901a\u8fc7\u4eff\u771f\u5b9e\u9a8c\u8fdb\u884c\u8bc4\u4f30\u3002 1. \u5982\u56fe1\u548c\u56fe3\u6240\u793a, \\(DIoU\u635f\u5931\\) \u53ef\u4ee5\u76f4\u63a5\u6700\u5c0f\u5316\u4e24\u4e2a\u6846\u7684\u8ddd\u79bb, \u56e0\u6b64\u6536\u655b\u901f\u5ea6\u6bd4 \\(GIoU\u635f\u5931\\) \u8981\u5feb\u5f97\u591a\u3002 2. \u5bf9\u4e8e\u4e24\u4e2a\u6846\u662f\u5305\u542b\u5173\u7cfb\u7684\u60c5\u51b5( \u56fe2 ), \u6216\u5728\u6c34\u5e73\u548c\u5782\u76f4\u65b9\u5411\u7684\u60c5\u51b5( \u56fe6 )\u4e0b, \\(DIoU\u635f\u77e2\\) \u53ef\u4ee5\u56de\u5f52\u975e\u5e38\u5feb, \u800c \\(\\mathrm{GIoU}\\) \u635f\u5931\u51e0\u4e4e\u9000\u5316\u4e3a \\(\\mathrm{IoU}\u635f\u5931\\) , \u5373 \\(|C-A \\cup B| \\rightarrow 0 .\\)","title":"IoU\u548cGIoU\u635f\u5931\u6bd4\u8f83"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#complete-iou-loss","text":"\u63a5\u7740\u6211\u4eec\u56de\u7b54\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u8fb9\u754c\u6846\u56de\u5f52\u7684\u826f\u597d \u635f\u5931\u5e94\u8be5\u8981\u8003\u8651\u4e09\u4e2a\u91cd\u8981\u7684\u51e0\u4f55\u56e0\u7d20, \u5373 \u91cd\u53e0\u9762\u79ef\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u548c\u957f\u5bbd\u6bd4 \u3002\u901a\u8fc7\u7edf\u4e00\u5750\u6807, \\(IoU\u635f\u5931\\) \u8003\u8651\u4e86\u91cd\u53e0\u533a\u57df, \u800c \\(GIoU\u635f\u5931\\) \u4e25\u91cd\u4f9d\u8d56\u4e8e \\(IoU\u635f\u5931\\) \u3002\u6211\u4eec\u63d0\u51fa\u7684 \\(DIoU\u635f\u5931\\) \u65e8\u5728\u540c\u65f6\u8003\u8651\u8fb9\u754c\u6846\u7684\u91cd\u53e0\u9762\u79ef\u548c\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u3002\u7136\u800c, \u8fb9\u754c\u6846\u7684\u957f\u5bbd\u6bd4\u7684\u4e00\u81f4\u6027\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u51e0\u4f55\u56e0\u7d20\u3002 \u56e0\u6b64\uff0c\u57fa\u4e8e \\(DIoU\u635f\u5931\\) \uff0c\u901a\u8fc7\u6dfb\u52a0\u957f\u5bbd\u6bd4\u7684\u4e00\u81f4\u6027\u6765 \u63d0\u51fa \\(CIoU\u635f\u5931\\) : \\(\\large\\mathcal{R}_{C I o U}=\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}}+\\alpha v,\\) (8) \u5176\u4e2d \\(\\alpha\\) \u662f\u4e00\u4e2a\u6b63\u7684\u6743\u8861\u53c2\u6570, \\(v\\) \u8861\u91cf\u957f\u5bbd\u6bd4\u7684\u4e00\u81f4\u6027\u3002 \\(\\large{v=\\frac{4}{\\pi^{2}}\\left(\\arctan \\frac{w^{g t}}{h^{g t}}-\\arctan \\frac{w}{h}\\right)^{2} .}\\) (9) \u5219\u635f\u5931\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u4e3a: \\(\\large\\mathcal{L}_{C I o U}=1-I o U+\\frac{\\rho^{2}\\left(\\mathbf{b}, \\mathbf{b}^{g t}\\right)}{c^{2}}+\\alpha v\\) (10) \\(\\large\\alpha=\\frac{v}{(1-I o U)+v}\\) (11) \u901a\u8fc7\u91cd\u53e0\u9762\u79ef\u56e0\u5b50\u7ed9\u4e88\u66f4\u9ad8\u7684\u4f18\u5148\u56de\u5f52, \u7279\u522b\u662f\u5bf9\u4e8e\u975e\u91cd\u53e0\u60c5\u51b5\u3002 \u6700\u7ec8, \\(CIoU\u635f\u5931\\) \u7684\u4f18\u5316\u4e0e \\(DIoU\u635f\u5931\\) \u7684\u4f18\u5316\u76f8\u540c, \u9664 \u4e86 \\(v w.r.t. w\\) \u7684\u68af\u5ea6\u5e94\u8be5\u6307\u5b9a \\(\\mathrm{w}\\) \u548c \\(h\\) \u3002 \\(\\large\\begin{array}{l} \\frac{\\partial v}{\\partial w}=\\frac{8}{\\pi^{2}}\\left(\\arctan \\frac{w^{g t}}{h^{g t}}-\\arctan \\frac{w}{h}\\right) \\times \\frac{h}{w^{2}+h^{2}}, \\\\ \\frac{\\partial v}{\\partial h}=-\\frac{8}{\\pi^{2}}\\left(\\arctan \\frac{w^{g t}}{h^{g t}}-\\arctan \\frac{w}{h}\\right) \\times \\frac{w}{w^{2}+h^{2}} . \\end{array}\\) (12) \u4e3b\u5bfc\u5668 \\(w^{2}+h^{2}\\) \u901a\u5e38\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u503c\u5bf9\u4e8e \\(h\\) \u548c \\(w\\) \u7684\u8303 \u56f4\u5728 [0,1] , \u8fd9\u5f88\u53ef\u80fd\u4f1a\u4ea7\u751f\u68af\u5ea6\u7206\u70b8\u3002\u56e0\u6b64\u5728\u6211\u4eec\u7684\u5b9e\u73b0, \u4e3b\u5bfc\u5668 \\(w^{2}+h^{2}\\) \u88ab\u79fb\u9664, \u5c06\u6b65\u957f \\(\\frac{1} {w^{2}+h^{2}}\\) \u66ff\u6362\u4e3a \\(1\\) , \u68af\u5ea6\u65b9\u5411\u4ecd\u7136\u4e0e\u516c\u5f0f(12)\u4e00\u81f4\u3002","title":"Complete IoU Loss"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#nmsnon-maximum-suppression","text":"","title":"NMS(Non-Maximum Suppression)"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#_4","text":"NMS\u662f\u5927\u591a\u6570\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u7684\u6700\u540e\u4e00\u6b65\uff0c\u5176\u4e2d\u5220\u9664\u4e86\u5197\u4f59\u7684\u68c0\u6d4b\u6846\u5f53\u5b83\u4e0e\u6700\u9ad8\u5206\u6846\u7684\u91cd\u53e0\u8d85\u8fc7\u4e00\u4e2a\u9608\u503c\u3002 Soft-NMS (Bodla et al. 2017) \u7528\u8fde\u7eed\u51fd\u6570w.r.t.\u60e9\u7f5a\u76f8\u90bb\u6846\u7684\u68c0\u6d4b\u5206\u6570IoU\uff0c\u4ea7\u751f\u6bd4\u539f\u59cbNMS\u4ea7\u751f\u66f4\u67d4\u548c\u5927\u548c\u66f4\u5f3a\u5927\u7684\u6291\u5236\u3002IoU-Net (Jiang et al. 2018) \u63d0\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u7f51\u7edc\u5206\u652f\u6765\u9884\u6d4b\u5b9a\u4f4d\u7f6e\u4fe1\u5ea6\u6765\u6307\u5bfcNMS\u3002\u6700\u8fd1\uff0c\u81ea\u9002\u5e94NMS\uff08Liu\uff0cHuang\uff0c\u548cWang 2019\uff09\u548cSofter-NMS\uff08He et al. 2019\uff09\u88ab\u63d0\u51fa\u5206\u522b\u7814\u7a76\u9002\u5f53\u7684\u9608\u503c\u7b56\u7565\u548c\u52a0\u6743\u5e73\u5747\u7b56\u7565\u3002 \u5728\u672c\u5de5\u4f5c\u4e2d\uff0c\u7b80\u5355\u5c06DIoU\u4f5c\u4e3a\u539f\u59cbNMS\u7684\u6807\u51c6, \u5728\u6291\u5236\u5197\u4f59\u6846\u65f6\uff0c\u540c\u65f6\u8003\u8651\u8fb9\u754c\u6846\u7684\u91cd\u53e0\u9762\u79ef\u548c\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002","title":"\u4ecb\u7ecd"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#diou-nms","text":"\\(Non-Maximum Suppression using DIoU\\) \u5728\u539f\u59cb\u7684NMS\u4e2d, IoU\u6307\u6807\u7528\u4e8e\u6291\u5236\u5415\u4f59\u7684\u68c0\u6d4b\u6846, \u5176 \u4e2d\u91cd\u53e0\u533a\u57df\u662f\u552f\u4e00\u7684\u56e0\u7d20, \u5bf9\u4e8e\u6709\u906e\u6321\u7684\u60c5\u51b5\uff0c\u5f80\u5f80\u4f1a \u4ea7\u751f\u9519\u8bef\u7684\u6291\u5236\u3002 \u6211\u4eec\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\u5efa\u8bae \\(DIoU\\) \u662f \\(NMS\\) \u7684\u66f4\u597d\u6807\u51c6\uff0c\u56e0\u4e3a\u5728\u6291\u5236\u6807\u51c6\u4e2d\u4e0d\u4ec5\u5e94\u8003\u8651\u91cd\u53e0 \\(DIoU-NMS\\) \u88ab\u6b63\u5f0f\u5b9a\u4e49\u4e3a: \\(s_{i}=\\left\\{\\begin{array}{l} s_{i}, I o U-\\mathcal{R}_{D I o U}\\left(\\mathcal{M}, B_{i}\\right)<\\varepsilon, \\\\ 0, \\quad I o U-\\mathcal{R}_{D I o U}\\left(\\mathcal{M}, B_{i}\\right) \\geq \\varepsilon, \\end{array}\\right.\\) (13) \u5176\u4e2d\u6846 \\(B_{i}\\) \u88ab\u53bb\u9664\u901a\u8fc7\u540c\u65f6\u5230\u8003\u8651 \\(IoU\\) \u548c\u4e24\u4e2a\u6846\u4e2d\u5fc3\u70b9 \u7684\u8ddd\u79bb\u3002 \\(s_{i}\\) \u662f\u5206\u7c7b\u5f97\u5206\u548c \\(\\varepsilon\\) \u662f \\(NMS\\) \u9608\u503c\u3002\u6211\u4eec\u8ba4\u4e3a\u4e24 \u4e2a\u4e2d\u5fc3\u70b9\u8f83\u8fdc\u7684\u6846\u53ef\u80fd\u4f1a\u5b9a\u4f4d\u4e0d\u540c\u7684\u7269\u4f53, \u800c\u4e0d\u5e94\u8be5\u88ab \u5220\u9664\u3002\u6b64\u5916 \\(DIoU-NMS\\) \u662f\u975e\u5e38\u7075\u6d3b, \u4ec5\u4ec5\u662f\u51e0\u884c\u7684\u4ee3 \u7801\u5c31\u53ef\u4ee5\u96c6\u6210\u5230\u4efb\u4f55\u76ee\u6807\u68c0\u6d4b\u7ba1\u9053\u4e2d\u3002","title":"DioU-NMS"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#_5","text":"\u5728\u672c\u6587\u4e2d\uff0c\u4e3b\u8981\u7684\u4ecb\u7ecd\u7528\u4e8e\u8fb9\u754c\u6846\u56de\u5f52\u7684 \\(DIoU\u635f\u5931\\) \u548c \\(CIoU \u635f\u5931\\) \u548c \u7528\u4e8e\u6291\u5236\u5197\u4f59\u68c0\u6d4b\u6846\u7684 \\(DIoU-NMS\u3002\\) \u901a\u8fc7\u76f4\u63a5\u6700\u5c0f\u5316\u4e24\u4e2a\u4e2d\u5fc3\u70b9\u7684\u5f52\u4e00\u5316\u7684\u8ddd\u79bb\uff0c \\(DIoU \u635f\u5931\\) \u53ef\u4ee5\u6bd4 \\(GIoU \u635f\u5931\\) \u5b9e\u73b0\u66f4\u5feb\u7684\u6536\u655b\u3002 \u6b64\u5916 \\(CIoU\u635f\u5931\\) \u8003\u8651\u4e86\u4e09\u4e2a\u51e0\u4f55\u5c5e\u6027(\u5373 \u91cd\u53e0\u533a\u57df\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb \u548c \u957f\u5bbd\u6bd4),\u4fc3\u8fdb\u4e86 \u66f4\u5feb\u7684\u6536\u655b\u548c\u66f4\u4f18\u7684\u6027\u80fd\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorials/04_chapter/iou_in-depth_analysis.html#_6","text":"https://github.com/Zzh-tju/DIoU/blob/master/README.md#introduction IOU: https://arxiv.org/pdf/1608.01471.pdf GIOU: https://giou.stanford.edu/GIoU.pdf DIOU: https://arxiv.org/pdf/1911.08287.pdf","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"tutorials/04_chapter/rectangular_reasoning.html","text":"\u77e9\u5f62\u63a8\u7406 \u4ecb\u7ecd \u5f53\u6211\u4eec\u628a\u4e00\u5e45\u56fe\u7247\u9001\u5165\u7f51\u7edc\uff0c\u8fd9\u5e45\u56fe\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4e0e\u7f51\u7edc\u9700\u6c42\u7684\u4e0d\u4e00\u81f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80af\u5b9a\u9700\u8981\u5bf9\u56fe\u7247\u505a\u51fa\u4e00\u4e9b\u6539\u53d8\u3002 \u4e00\u822c\u6765\u8bf4\u6709\u4e24\u79cd\u5e38\u7528\u7684\u9009\u62e9:(\u5047\u8bbe \u7f51\u7edc\u9700\u6c42\u7684\u56fe\u7247\u5927\u5c0f\u4e3a32\u7684\u500d\u6570,\u4f20\u5165\u7684\u56fe\u7247\u9ad8\u5bbd\u4e3a 200 x 416 ) 1. \u6b63\u65b9\u5f62\u63a8\u7406(square lnference) \u662f\u5c06\u56fe\u7247\u586b\u5145\u4e3a\u6b63\u65b9\u5f62,\u5982\u4e0b\u56fe\u5de6\u8fb9\u6240\u793a\u3002 2. \u77e9\u5f62\u63a8\u7406(Rectangular Inference) \u5982\u4e0b\u56fe\u53f3\u8fb9\u6240\u793a\u3002 \u5206\u6790: \u53ef\u4ee5\u770b\u5230\u4e0a\u56fe\u6b63\u65b9\u5f62\u63a8\u7406\u5b58\u5728\u5927\u91cf\u7684\u5197\u4f59\u90e8\u5206,\u800c\u53f3\u8fb9\u7684\u77e9\u5f62\u63a8\u7406\u660e\u663e\u5197\u4f59\u90e8\u5206\u5c11\u4e8e\u5de6\u8fb9\u5e76\u4e14\u5b9e\u9645\u8868\u73b0\u7684\u76f8\u6bd4\u6b63\u65b9\u5f62\u63a8\u7406\u80fd\u663e\u8457\u7684\u51cf\u5c11\u63a8\u7406\u65f6\u95f4\u3002 \u63a8\u7406\u8fc7\u7a0b\uff1a\u5c06\u8f83\u957f\u8fb9\u8bbe\u5b9a\u4e3a\u76ee\u6807\u5c3a\u5bf8 416,512\u2026 (\u5fc5\u987b\u662f32\u7684\u500d\u6570)\uff0c\u77ed\u8fb9\u6309\u6bd4\u4f8b\u7f29\u653e\uff0c\u518d\u5bf9\u77ed\u8fb9\u8fdb\u884c\u8f83\u5c11\u586b\u5145\u4f7f\u77ed\u8fb9\u6ee1\u8db332\u7684\u500d\u6570\uff0c\u8be6\u7ec6\u8fc7\u7a0b\u8be6\u89c1\u6e90\u7801\u89e3\u6790\u3002 \u62d3\u5c55 \u77e9\u5f62\u63a8\u7406\u6e90\u7801\u89e3\u6790 \u5bf9\u5e94\u4ed3\u5e93\u6587\u4ef6: https://github.com/Oneflow-Inc/one-yolov5/blob/main/utils/augmentations.py#L93-L131 # \u56fe\u7247\u7f29\u653e\uff1a\u4fdd\u6301\u56fe\u7247\u7684\u5bbd\u9ad8\u6bd4\u4f8b\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u7528\u7070\u8272\u586b\u5145\u3002 def letterbox ( im , new_shape = ( 640 , 640 ), color = ( 114 , 114 , 114 ), auto = True , scaleFill = False , scaleup = True , stride = 32 ): \"\"\" \u5c06\u56fe\u7247\u7f29\u653e\u8c03\u6574\u5230\u6307\u5b9a\u5927\u5c0f @Param img: \u539f\u56fe @Param new_shape: \u7f29\u653e\u540e\u7684\u56fe\u7247\u5927\u5c0f @Param color: pad\u7684\u989c\u8272 @Param auto: True \u4fdd\u8bc1\u7f29\u653e\u540e\u7684\u56fe\u7247\u4fdd\u6301\u539f\u56fe\u7684\u6bd4\u4f8b \u5373 \u5c06\u539f\u56fe\u6700\u957f\u8fb9\u7f29\u653e\u5230\u6307\u5b9a\u5927\u5c0f\uff0c\u518d\u5c06\u539f\u56fe\u8f83\u77ed\u8fb9\u6309\u539f\u56fe\u6bd4\u4f8b\u7f29\u653e\uff08\u4e0d\u4f1a\u5931\u771f\uff09 False \u5c06\u539f\u56fe\u6700\u957f\u8fb9\u7f29\u653e\u5230\u6307\u5b9a\u5927\u5c0f\uff0c\u518d\u5c06\u539f\u56fe\u8f83\u77ed\u8fb9\u6309\u539f\u56fe\u6bd4\u4f8b\u7f29\u653e,\u6700\u540e\u5c06\u8f83\u77ed\u8fb9\u4e24\u8fb9pad\u64cd\u4f5c\u7f29\u653e\u5230\u6700\u957f\u8fb9\u5927\u5c0f\uff08\u4e0d\u4f1a\u5931\u771f\uff09 @Param scale_fill: True \u7b80\u5355\u7c97\u66b4\u7684\u5c06\u539f\u56feresize\u5230\u6307\u5b9a\u7684\u5927\u5c0f \u76f8\u5f53\u4e8e\u5c31\u662fresize \u6ca1\u6709pad\u64cd\u4f5c\uff08\u5931\u771f\uff09 @Param scale_up: True \u5bf9\u4e8e\u5c0f\u4e8enew_shape\u7684\u539f\u56fe\u8fdb\u884c\u7f29\u653e,\u5927\u4e8e\u7684\u4e0d\u53d8 False \u5bf9\u4e8e\u5927\u4e8enew_shape\u7684\u539f\u56fe\u8fdb\u884c\u7f29\u653e,\u5c0f\u4e8e\u7684\u4e0d\u53d8 @return: img: letterbox\u540e\u7684\u56fe\u7247 ratio: wh ratios (dw, dh): w\u548ch\u7684pad \"\"\" # Resize and pad image while meeting stride-multiple constraints # \u53d6\u56fe\u7247\u7684\u9ad8\u5bbd shape = im . shape [: 2 ] # current shape [height, width] if isinstance ( new_shape , int ): new_shape = ( new_shape , new_shape ) # Scale ratio (new / old) \u8ba1\u7b97\u7f29\u653e\u56e0\u5b50 r = min ( new_shape [ 0 ] / shape [ 0 ], new_shape [ 1 ] / shape [ 1 ]) \"\"\" \u7f29\u653e(resize)\u5230\u8f93\u5165\u5927\u5c0fimg_size\u7684\u65f6\u5019,\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u4e0a\u91c7\u6837\u7684\u8bdd,\u5219\u53ea\u8fdb\u884c\u4e0b\u91c7\u6837 \u56e0\u4e3a\u4e0a\u91c7\u6837\u56fe\u7247\u4f1a\u8ba9\u56fe\u7247\u6a21\u7cca,\u5bf9\u8bad\u7ec3\u4e0d\u53cb\u597d\u4e14\u5f71\u54cd\u6027\u80fd\u3002 \"\"\" if not scaleup : # only scale down, do not scale up (for better val mAP) r = min ( r , 1.0 ) # Compute padding \u8ba1\u7b97\u586b\u5145 ratio = r , r # width, height ratios # \u65b0\u7684\u672a\u586b\u5145\u5927\u5c0f, \u4fdd\u8bc1\u7f29\u653e\u540e\u56fe\u50cf\u6bd4\u4f8b\u4e0d\u53d8 new_unpad = int ( round ( shape [ 1 ] * r )), int ( round ( shape [ 0 ] * r )) dw , dh = new_shape [ 1 ] - new_unpad [ 0 ], new_shape [ 0 ] - new_unpad [ 1 ] # wh padding if auto : # minimum rectangle \u83b7\u53d6\u6700\u5c0f\u77e9\u5f62\u586b\u5145 # \u8fd9\u91cc\u7684\u53d6\u4f59\u64cd\u4f5c\u53ef\u4ee5\u4fdd\u8bc1padding\u540e\u7684\u56fe\u7247\u662f32\u7684\u6574\u6570\u500d(416x416)\uff0c\u5982\u679c\u662f(512x512)\u53ef\u4ee5\u4fdd\u8bc1\u662f64\u7684\u6574\u6570\u500d dw , dh = np . mod ( dw , stride ), np . mod ( dh , stride ) # wh padding # \u5982\u679cscaleFill = True,\u5219\u4e0d\u8fdb\u884c\u586b\u5145\uff0c\u76f4\u63a5resize\u6210img_size,\u4efb\u7531\u56fe\u7247\u8fdb\u884c\u62c9\u4f38\u548c\u538b\u7f29 elif scaleFill : # stretch dw , dh = 0.0 , 0.0 new_unpad = ( new_shape [ 1 ], new_shape [ 0 ]) ratio = new_shape [ 1 ] / shape [ 1 ], new_shape [ 0 ] / shape [ 0 ] # width, height ratios # \u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u5230\u586b\u5145,\u5373\u5c06padding\u5206\u5230\u4e0a\u4e0b\uff0c\u5de6\u53f3\u4e24\u4fa7 dw /= 2 # divide padding into 2 sides dh /= 2 # \u5c06\u539f\u56feresize\u5230new_unpad if shape [:: - 1 ] != new_unpad : # resize im = cv2 . resize ( im , new_unpad , interpolation = cv2 . INTER_LINEAR ) # \u4e0b\u9762\u4e24\u884c\u8ba1\u7b97\u9700\u8981\u586b\u5145 padding top , bottom = int ( round ( dh - 0.1 )), int ( round ( dh + 0.1 )) # \u8ba1\u7b97\u4e0a\u4e0b\u4e24\u4fa7\u7684padding left , right = int ( round ( dw - 0.1 )), int ( round ( dw + 0.1 )) # \u8ba1\u7b97\u5de6\u53f3\u4e24\u4fa7\u7684padding # \u8c03\u7528cv2.copyMakeBorder\u51fd\u6570\u8fdb\u884c\u80cc\u666f\u586b\u5145\u3002 im = cv2 . copyMakeBorder ( im , top , bottom , left , right , cv2 . BORDER_CONSTANT , value = color ) # add border return im , ratio , ( dw , dh )","title":"\u77e9\u5f62\u63a8\u7406"},{"location":"tutorials/04_chapter/rectangular_reasoning.html#_1","text":"","title":"\u77e9\u5f62\u63a8\u7406"},{"location":"tutorials/04_chapter/rectangular_reasoning.html#_2","text":"\u5f53\u6211\u4eec\u628a\u4e00\u5e45\u56fe\u7247\u9001\u5165\u7f51\u7edc\uff0c\u8fd9\u5e45\u56fe\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u4e0e\u7f51\u7edc\u9700\u6c42\u7684\u4e0d\u4e00\u81f4\u7684\u65f6\u5019\uff0c\u6211\u4eec\u80af\u5b9a\u9700\u8981\u5bf9\u56fe\u7247\u505a\u51fa\u4e00\u4e9b\u6539\u53d8\u3002 \u4e00\u822c\u6765\u8bf4\u6709\u4e24\u79cd\u5e38\u7528\u7684\u9009\u62e9:(\u5047\u8bbe \u7f51\u7edc\u9700\u6c42\u7684\u56fe\u7247\u5927\u5c0f\u4e3a32\u7684\u500d\u6570,\u4f20\u5165\u7684\u56fe\u7247\u9ad8\u5bbd\u4e3a 200 x 416 ) 1. \u6b63\u65b9\u5f62\u63a8\u7406(square lnference) \u662f\u5c06\u56fe\u7247\u586b\u5145\u4e3a\u6b63\u65b9\u5f62,\u5982\u4e0b\u56fe\u5de6\u8fb9\u6240\u793a\u3002 2. \u77e9\u5f62\u63a8\u7406(Rectangular Inference) \u5982\u4e0b\u56fe\u53f3\u8fb9\u6240\u793a\u3002 \u5206\u6790: \u53ef\u4ee5\u770b\u5230\u4e0a\u56fe\u6b63\u65b9\u5f62\u63a8\u7406\u5b58\u5728\u5927\u91cf\u7684\u5197\u4f59\u90e8\u5206,\u800c\u53f3\u8fb9\u7684\u77e9\u5f62\u63a8\u7406\u660e\u663e\u5197\u4f59\u90e8\u5206\u5c11\u4e8e\u5de6\u8fb9\u5e76\u4e14\u5b9e\u9645\u8868\u73b0\u7684\u76f8\u6bd4\u6b63\u65b9\u5f62\u63a8\u7406\u80fd\u663e\u8457\u7684\u51cf\u5c11\u63a8\u7406\u65f6\u95f4\u3002 \u63a8\u7406\u8fc7\u7a0b\uff1a\u5c06\u8f83\u957f\u8fb9\u8bbe\u5b9a\u4e3a\u76ee\u6807\u5c3a\u5bf8 416,512\u2026 (\u5fc5\u987b\u662f32\u7684\u500d\u6570)\uff0c\u77ed\u8fb9\u6309\u6bd4\u4f8b\u7f29\u653e\uff0c\u518d\u5bf9\u77ed\u8fb9\u8fdb\u884c\u8f83\u5c11\u586b\u5145\u4f7f\u77ed\u8fb9\u6ee1\u8db332\u7684\u500d\u6570\uff0c\u8be6\u7ec6\u8fc7\u7a0b\u8be6\u89c1\u6e90\u7801\u89e3\u6790\u3002","title":"\u4ecb\u7ecd"},{"location":"tutorials/04_chapter/rectangular_reasoning.html#_3","text":"","title":"\u62d3\u5c55"},{"location":"tutorials/04_chapter/rectangular_reasoning.html#_4","text":"\u5bf9\u5e94\u4ed3\u5e93\u6587\u4ef6: https://github.com/Oneflow-Inc/one-yolov5/blob/main/utils/augmentations.py#L93-L131 # \u56fe\u7247\u7f29\u653e\uff1a\u4fdd\u6301\u56fe\u7247\u7684\u5bbd\u9ad8\u6bd4\u4f8b\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u7528\u7070\u8272\u586b\u5145\u3002 def letterbox ( im , new_shape = ( 640 , 640 ), color = ( 114 , 114 , 114 ), auto = True , scaleFill = False , scaleup = True , stride = 32 ): \"\"\" \u5c06\u56fe\u7247\u7f29\u653e\u8c03\u6574\u5230\u6307\u5b9a\u5927\u5c0f @Param img: \u539f\u56fe @Param new_shape: \u7f29\u653e\u540e\u7684\u56fe\u7247\u5927\u5c0f @Param color: pad\u7684\u989c\u8272 @Param auto: True \u4fdd\u8bc1\u7f29\u653e\u540e\u7684\u56fe\u7247\u4fdd\u6301\u539f\u56fe\u7684\u6bd4\u4f8b \u5373 \u5c06\u539f\u56fe\u6700\u957f\u8fb9\u7f29\u653e\u5230\u6307\u5b9a\u5927\u5c0f\uff0c\u518d\u5c06\u539f\u56fe\u8f83\u77ed\u8fb9\u6309\u539f\u56fe\u6bd4\u4f8b\u7f29\u653e\uff08\u4e0d\u4f1a\u5931\u771f\uff09 False \u5c06\u539f\u56fe\u6700\u957f\u8fb9\u7f29\u653e\u5230\u6307\u5b9a\u5927\u5c0f\uff0c\u518d\u5c06\u539f\u56fe\u8f83\u77ed\u8fb9\u6309\u539f\u56fe\u6bd4\u4f8b\u7f29\u653e,\u6700\u540e\u5c06\u8f83\u77ed\u8fb9\u4e24\u8fb9pad\u64cd\u4f5c\u7f29\u653e\u5230\u6700\u957f\u8fb9\u5927\u5c0f\uff08\u4e0d\u4f1a\u5931\u771f\uff09 @Param scale_fill: True \u7b80\u5355\u7c97\u66b4\u7684\u5c06\u539f\u56feresize\u5230\u6307\u5b9a\u7684\u5927\u5c0f \u76f8\u5f53\u4e8e\u5c31\u662fresize \u6ca1\u6709pad\u64cd\u4f5c\uff08\u5931\u771f\uff09 @Param scale_up: True \u5bf9\u4e8e\u5c0f\u4e8enew_shape\u7684\u539f\u56fe\u8fdb\u884c\u7f29\u653e,\u5927\u4e8e\u7684\u4e0d\u53d8 False \u5bf9\u4e8e\u5927\u4e8enew_shape\u7684\u539f\u56fe\u8fdb\u884c\u7f29\u653e,\u5c0f\u4e8e\u7684\u4e0d\u53d8 @return: img: letterbox\u540e\u7684\u56fe\u7247 ratio: wh ratios (dw, dh): w\u548ch\u7684pad \"\"\" # Resize and pad image while meeting stride-multiple constraints # \u53d6\u56fe\u7247\u7684\u9ad8\u5bbd shape = im . shape [: 2 ] # current shape [height, width] if isinstance ( new_shape , int ): new_shape = ( new_shape , new_shape ) # Scale ratio (new / old) \u8ba1\u7b97\u7f29\u653e\u56e0\u5b50 r = min ( new_shape [ 0 ] / shape [ 0 ], new_shape [ 1 ] / shape [ 1 ]) \"\"\" \u7f29\u653e(resize)\u5230\u8f93\u5165\u5927\u5c0fimg_size\u7684\u65f6\u5019,\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u4e0a\u91c7\u6837\u7684\u8bdd,\u5219\u53ea\u8fdb\u884c\u4e0b\u91c7\u6837 \u56e0\u4e3a\u4e0a\u91c7\u6837\u56fe\u7247\u4f1a\u8ba9\u56fe\u7247\u6a21\u7cca,\u5bf9\u8bad\u7ec3\u4e0d\u53cb\u597d\u4e14\u5f71\u54cd\u6027\u80fd\u3002 \"\"\" if not scaleup : # only scale down, do not scale up (for better val mAP) r = min ( r , 1.0 ) # Compute padding \u8ba1\u7b97\u586b\u5145 ratio = r , r # width, height ratios # \u65b0\u7684\u672a\u586b\u5145\u5927\u5c0f, \u4fdd\u8bc1\u7f29\u653e\u540e\u56fe\u50cf\u6bd4\u4f8b\u4e0d\u53d8 new_unpad = int ( round ( shape [ 1 ] * r )), int ( round ( shape [ 0 ] * r )) dw , dh = new_shape [ 1 ] - new_unpad [ 0 ], new_shape [ 0 ] - new_unpad [ 1 ] # wh padding if auto : # minimum rectangle \u83b7\u53d6\u6700\u5c0f\u77e9\u5f62\u586b\u5145 # \u8fd9\u91cc\u7684\u53d6\u4f59\u64cd\u4f5c\u53ef\u4ee5\u4fdd\u8bc1padding\u540e\u7684\u56fe\u7247\u662f32\u7684\u6574\u6570\u500d(416x416)\uff0c\u5982\u679c\u662f(512x512)\u53ef\u4ee5\u4fdd\u8bc1\u662f64\u7684\u6574\u6570\u500d dw , dh = np . mod ( dw , stride ), np . mod ( dh , stride ) # wh padding # \u5982\u679cscaleFill = True,\u5219\u4e0d\u8fdb\u884c\u586b\u5145\uff0c\u76f4\u63a5resize\u6210img_size,\u4efb\u7531\u56fe\u7247\u8fdb\u884c\u62c9\u4f38\u548c\u538b\u7f29 elif scaleFill : # stretch dw , dh = 0.0 , 0.0 new_unpad = ( new_shape [ 1 ], new_shape [ 0 ]) ratio = new_shape [ 1 ] / shape [ 1 ], new_shape [ 0 ] / shape [ 0 ] # width, height ratios # \u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u5230\u586b\u5145,\u5373\u5c06padding\u5206\u5230\u4e0a\u4e0b\uff0c\u5de6\u53f3\u4e24\u4fa7 dw /= 2 # divide padding into 2 sides dh /= 2 # \u5c06\u539f\u56feresize\u5230new_unpad if shape [:: - 1 ] != new_unpad : # resize im = cv2 . resize ( im , new_unpad , interpolation = cv2 . INTER_LINEAR ) # \u4e0b\u9762\u4e24\u884c\u8ba1\u7b97\u9700\u8981\u586b\u5145 padding top , bottom = int ( round ( dh - 0.1 )), int ( round ( dh + 0.1 )) # \u8ba1\u7b97\u4e0a\u4e0b\u4e24\u4fa7\u7684padding left , right = int ( round ( dw - 0.1 )), int ( round ( dw + 0.1 )) # \u8ba1\u7b97\u5de6\u53f3\u4e24\u4fa7\u7684padding # \u8c03\u7528cv2.copyMakeBorder\u51fd\u6570\u8fdb\u884c\u80cc\u666f\u586b\u5145\u3002 im = cv2 . copyMakeBorder ( im , top , bottom , left , right , cv2 . BORDER_CONSTANT , value = color ) # add border return im , ratio , ( dw , dh )","title":"\u77e9\u5f62\u63a8\u7406\u6e90\u7801\u89e3\u6790"}]}